{
	"$field->callback()": {
		"prefix": "->callback()",
		"body": "->callback(${1:\\$callback})",
		"description": "Applies the callback function to the field",
		"scope": "php"
	},
	"$field->escape()": {
		"prefix": "->escape()",
		"body": "->escape(${1:\\$context = 'html'})",
		"description": "Escapes the field value to be safely used in HTML templates without the risk of XSS attacks",
		"scope": "php"
	},
	"$field->excerpt()": {
		"prefix": "->excerpt()",
		"body": "->excerpt(${1:\\$chars = 0}, ${2:\\$strip = true}, ${3:\\$rep = ' …'})",
		"description": "Creates an excerpt of the field value without html or any other formatting.",
		"scope": "php"
	},
	"$field->exists()": {
		"prefix": "->exists()",
		"body": "->exists()",
		"description": "Checks if the field exists in the content data array",
		"scope": "php"
	},
	"$field->html()": {
		"prefix": "->html()",
		"body": "->html()",
		"description": "Converts the field content to valid HTML",
		"scope": "php"
	},
	"$field->inline()": {
		"prefix": "->inline()",
		"body": "->inline()",
		"description": "Strips all block-level HTML elements from the field value, it can be safely placed inside of other inline elements without the risk of breaking the HTML structure.",
		"scope": "php"
	},
	"$field->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the field content is empty",
		"scope": "php"
	},
	"$field->isFalse()": {
		"prefix": "->isFalse()",
		"body": "->isFalse()",
		"description": "Converts the field value into a proper boolean and inverts it",
		"scope": "php"
	},
	"$field->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the field content is not empty",
		"scope": "php"
	},
	"$field->isTrue()": {
		"prefix": "->isTrue()",
		"body": "->isTrue()",
		"description": "Converts the field value into a proper boolean",
		"scope": "php"
	},
	"$field->isValid()": {
		"prefix": "->isValid()",
		"body": "->isValid(${1:\\$validator}, ${2:\\$arguments = null})",
		"description": "Validates the field content with the given validator and parameters",
		"scope": "php"
	},
	"$field->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the name of the field",
		"scope": "php"
	},
	"$field->kirbytags()": {
		"prefix": "->kirbytags()",
		"body": "->kirbytags()",
		"description": "Parses all KirbyTags without also parsing Markdown",
		"scope": "php"
	},
	"$field->kirbytext()": {
		"prefix": "->kirbytext()",
		"body": "->kirbytext(${1:\\$options = [ ]})",
		"description": "Converts the field content from Markdown/Kirbytext to valid HTML",
		"scope": "php"
	},
	"$field->kirbytextinline()": {
		"prefix": "->kirbytextinline()",
		"body": "->kirbytextinline(${1:\\$options = [ ]})",
		"description": "Converts the field content from inline Markdown/Kirbytext to valid HTML",
		"scope": "php"
	},
	"$field->length()": {
		"prefix": "->length()",
		"body": "->length()",
		"description": "Returns the length of the field content",
		"scope": "php"
	},
	"$field->lower()": {
		"prefix": "->lower()",
		"body": "->lower()",
		"description": "Converts the field content to lowercase",
		"scope": "php"
	},
	"$field->markdown()": {
		"prefix": "->markdown()",
		"body": "->markdown(${1:\\$options = [ ]})",
		"description": "Converts markdown to valid HTML",
		"scope": "php"
	},
	"$field->model()": {
		"prefix": "->model()",
		"body": "->model()",
		"description": "",
		"scope": "php"
	},
	"$field->nl2br()": {
		"prefix": "->nl2br()",
		"body": "->nl2br()",
		"description": "Converts all line breaks in the field content to `&lt;br&gt;` tags.",
		"scope": "php"
	},
	"$field->or()": {
		"prefix": "->or()",
		"body": "->or(${1:\\$fallback = null})",
		"description": "Provides a fallback if the field value is empty",
		"scope": "php"
	},
	"$field->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent object of the field",
		"scope": "php"
	},
	"$field->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$expect = null})",
		"description": "Uses the field value as Kirby query",
		"scope": "php"
	},
	"$field->replace()": {
		"prefix": "->replace()",
		"body": "->replace(${1:\\$data = [ ]}, ${2:\\$fallback = ''})",
		"description": "It parses any queries found in the field value.",
		"scope": "php"
	},
	"$field->short()": {
		"prefix": "->short()",
		"body": "->short(${1:\\$length}, ${2:\\$appendix = '…'})",
		"description": "Cuts the string after the given length and adds &quot;…&quot; if it is longer",
		"scope": "php"
	},
	"$field->slug()": {
		"prefix": "->slug()",
		"body": "->slug()",
		"description": "Converts the field content to a slug",
		"scope": "php"
	},
	"$field->smartypants()": {
		"prefix": "->smartypants()",
		"body": "->smartypants()",
		"description": "Applies SmartyPants to the field",
		"scope": "php"
	},
	"$field->split()": {
		"prefix": "->split()",
		"body": "->split(${1:\\$separator = ','})",
		"description": "Splits the field content into an array",
		"scope": "php"
	},
	"$field->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Converts the Field object to an array",
		"scope": "php"
	},
	"$field->toBlocks()": {
		"prefix": "->toBlocks()",
		"body": "->toBlocks()",
		"description": "Converts a yaml or json field to a Blocks object",
		"scope": "php"
	},
	"$field->toBool()": {
		"prefix": "->toBool()",
		"body": "->toBool(${1:\\$default = false})",
		"description": "Converts the field value into a proper boolean",
		"scope": "php"
	},
	"$field->toData()": {
		"prefix": "->toData()",
		"body": "->toData(${1:\\$method = ','})",
		"description": "Parses the field value with the given method",
		"scope": "php"
	},
	"$field->toDate()": {
		"prefix": "->toDate()",
		"body": "->toDate(${1:\\$format = null}, ${2:\\$fallback = null})",
		"description": "Converts the field value to a timestamp or a formatted date",
		"scope": "php"
	},
	"$field->toFile()": {
		"prefix": "->toFile()",
		"body": "->toFile()",
		"description": "Returns a file object from a filename in the field",
		"scope": "php"
	},
	"$field->toFiles()": {
		"prefix": "->toFiles()",
		"body": "->toFiles(${1:\\$separator = 'yaml'})",
		"description": "Returns a file collection from a yaml list of filenames in the field",
		"scope": "php"
	},
	"$field->toFloat()": {
		"prefix": "->toFloat()",
		"body": "->toFloat(${1:\\$default = 0.0})",
		"description": "Converts the field value into a proper float",
		"scope": "php"
	},
	"$field->toInt()": {
		"prefix": "->toInt()",
		"body": "->toInt(${1:\\$default = 0})",
		"description": "Converts the field value into a proper integer",
		"scope": "php"
	},
	"$field->toLayouts()": {
		"prefix": "->toLayouts()",
		"body": "->toLayouts()",
		"description": "Parse layouts and turn them into Layout objects",
		"scope": "php"
	},
	"$field->toLink()": {
		"prefix": "->toLink()",
		"body": "->toLink(${1:\\$attr1 = null}, ${2:\\$attr2 = null})",
		"description": "Wraps a link tag around the field value. The field value is used as the link text",
		"scope": "php"
	},
	"$field->toObject()": {
		"prefix": "->toObject()",
		"body": "->toObject()",
		"description": "Parse yaml data and convert it to a content object",
		"scope": "php"
	},
	"$field->toPage()": {
		"prefix": "->toPage()",
		"body": "->toPage()",
		"description": "Returns a page object from a page id in the field",
		"scope": "php"
	},
	"$field->toPages()": {
		"prefix": "->toPages()",
		"body": "->toPages(${1:\\$separator = 'yaml'})",
		"description": "Returns a pages collection from a yaml list of page ids in the field",
		"scope": "php"
	},
	"$field->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Returns the field value as string",
		"scope": "php"
	},
	"$field->toStructure()": {
		"prefix": "->toStructure()",
		"body": "->toStructure()",
		"description": "Converts a yaml field to a Structure object",
		"scope": "php"
	},
	"$field->toTimestamp()": {
		"prefix": "->toTimestamp()",
		"body": "->toTimestamp()",
		"description": "Converts the field value to a Unix timestamp",
		"scope": "php"
	},
	"$field->toUrl()": {
		"prefix": "->toUrl()",
		"body": "->toUrl()",
		"description": "Turns the field value into an absolute Url",
		"scope": "php"
	},
	"$field->toUser()": {
		"prefix": "->toUser()",
		"body": "->toUser()",
		"description": "Converts a user email address to a user object",
		"scope": "php"
	},
	"$field->toUsers()": {
		"prefix": "->toUsers()",
		"body": "->toUsers(${1:\\$separator = 'yaml'})",
		"description": "Returns a users collection from a yaml list of user email addresses in the field",
		"scope": "php"
	},
	"$field->upper()": {
		"prefix": "->upper()",
		"body": "->upper()",
		"description": "Converts the field content to uppercase",
		"scope": "php"
	},
	"$field->value()": {
		"prefix": "->value()",
		"body": "->value(${1:\\$value = null})",
		"description": "Returns the field content. If a new value is passed, the modified field will be returned. Otherwise it will return the field value.",
		"scope": "php"
	},
	"$field->widont()": {
		"prefix": "->widont()",
		"body": "->widont()",
		"description": "Avoids typographical widows in strings by replacing the last space with `&amp;nbsp;`",
		"scope": "php"
	},
	"$field->words()": {
		"prefix": "->words()",
		"body": "->words()",
		"description": "Returns the number of words in the text",
		"scope": "php"
	},
	"$field->xml()": {
		"prefix": "->xml()",
		"body": "->xml()",
		"description": "Converts the field content to valid XML",
		"scope": "php"
	},
	"$field->yaml()": {
		"prefix": "->yaml()",
		"body": "->yaml()",
		"description": "Parses yaml in the field content and returns an array",
		"scope": "php"
	},
	"$kirby->api()": {
		"prefix": "->api()",
		"body": "->api()",
		"description": "Returns the Api instance",
		"scope": "php"
	},
	"$kirby->apply()": {
		"prefix": "->apply()",
		"body": "->apply(${1:\\$name}, ${2:\\$args}, ${3:\\$modify}, ${4:\\$originalEvent = null})",
		"description": "Applies a hook to the given value",
		"scope": "php"
	},
	"$kirby->auth()": {
		"prefix": "->auth()",
		"body": "->auth()",
		"description": "Returns the Authentication layer class",
		"scope": "php"
	},
	"$kirby->blueprints()": {
		"prefix": "->blueprints()",
		"body": "->blueprints(${1:\\$type = 'pages'})",
		"description": "Returns all available blueprints for this installation",
		"scope": "php"
	},
	"$kirby->cache()": {
		"prefix": "->cache()",
		"body": "->cache(${1:\\$key})",
		"description": "Returns a cache instance by key",
		"scope": "php"
	},
	"$kirby->call()": {
		"prefix": "->call()",
		"body": "->call(${1:\\$path = null}, ${2:\\$method = null})",
		"description": "Calls any Kirby route",
		"scope": "php"
	},
	"$kirby->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]}, ${2:\\$setInstance = true})",
		"description": "Creates an instance with the same initial properties",
		"scope": "php"
	},
	"$kirby->collection()": {
		"prefix": "->collection()",
		"body": "->collection(${1:\\$name})",
		"description": "Returns a specific user-defined collection by name. All relevant dependencies are automatically injected",
		"scope": "php"
	},
	"$kirby->collections()": {
		"prefix": "->collections()",
		"body": "->collections()",
		"description": "Returns all user-defined collections",
		"scope": "php"
	},
	"$kirby->component()": {
		"prefix": "->component()",
		"body": "->component(${1:\\$name})",
		"description": "Returns a core component",
		"scope": "php"
	},
	"$kirby->contentExtension()": {
		"prefix": "->contentExtension()",
		"body": "->contentExtension()",
		"description": "Returns the content extension",
		"scope": "php"
	},
	"$kirby->contentIgnore()": {
		"prefix": "->contentIgnore()",
		"body": "->contentIgnore()",
		"description": "Returns files that should be ignored when scanning folders",
		"scope": "php"
	},
	"$kirby->contentToken()": {
		"prefix": "->contentToken()",
		"body": "->contentToken(${1:\\$model}, ${2:\\$value})",
		"description": "Generates a non-guessable token based on model data and a configured salt",
		"scope": "php"
	},
	"$kirby->controller()": {
		"prefix": "->controller()",
		"body": "->controller(${1:\\$name}, ${2:\\$arguments = [ ]}, ${3:\\$contentType = 'html'})",
		"description": "Calls a page controller by name and with the given arguments",
		"scope": "php"
	},
	"$kirby->core()": {
		"prefix": "->core()",
		"body": "->core()",
		"description": "Get access to object that lists all parts of Kirby core",
		"scope": "php"
	},
	"$kirby->csrf()": {
		"prefix": "->csrf()",
		"body": "->csrf(${1:\\$check = null})",
		"description": "Checks/returns a CSRF token",
		"scope": "php"
	},
	"$kirby->defaultLanguage()": {
		"prefix": "->defaultLanguage()",
		"body": "->defaultLanguage()",
		"description": "Returns the default language object",
		"scope": "php"
	},
	"$kirby->detectedLanguage()": {
		"prefix": "->detectedLanguage()",
		"body": "->detectedLanguage()",
		"description": "Detect the preferred language from the visitor object",
		"scope": "php"
	},
	"$kirby->email()": {
		"prefix": "->email()",
		"body": "->email(${1:\\$preset = [ ]}, ${2:\\$props = [ ]})",
		"description": "Returns the Email singleton",
		"scope": "php"
	},
	"$kirby->environment()": {
		"prefix": "->environment()",
		"body": "->environment()",
		"description": "Returns the environment object with access to the detected host, base url and dedicated options",
		"scope": "php"
	},
	"$kirby->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$extensions}, ${2:\\$plugin = null})",
		"description": "Register all given extensions",
		"scope": "php"
	},
	"$kirby->extension()": {
		"prefix": "->extension()",
		"body": "->extension(${1:\\$type}, ${2:\\$name}, ${3:\\$fallback = null})",
		"description": "Returns a given extension by type and name",
		"scope": "php"
	},
	"$kirby->extensions()": {
		"prefix": "->extensions()",
		"body": "->extensions(${1:\\$type = null})",
		"description": "Returns the extensions registry",
		"scope": "php"
	},
	"$kirby->file()": {
		"prefix": "->file()",
		"body": "->file(${1:\\$path}, ${2:\\$parent = null}, ${3:\\$drafts = true})",
		"description": "Finds any file in the content directory",
		"scope": "php"
	},
	"$kirby->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$kirby->image()": {
		"prefix": "->image()",
		"body": "->image(${1:\\$path = null})",
		"description": "Return an image from any page specified by the path",
		"scope": "php"
	},
	"$kirby->impersonate()": {
		"prefix": "->impersonate()",
		"body": "->impersonate(${1:\\$who = null}, ${2:\\$callback = null})",
		"description": "Become any existing user or disable the current user",
		"scope": "php"
	},
	"$kirby->io()": {
		"prefix": "->io()",
		"body": "->io(${1:\\$input})",
		"description": "Takes almost any kind of input and tries to convert it into a valid response",
		"scope": "php"
	},
	"$kirby->isNativeComponent()": {
		"prefix": "->isNativeComponent()",
		"body": "->isNativeComponent(${1:\\$component})",
		"description": "Checks if a native component was extended",
		"scope": "php"
	},
	"$kirby->kirbytag()": {
		"prefix": "->kirbytag()",
		"body": "->kirbytag(${1:\\$type}, ${2:\\$value = null}, ${3:\\$attr = [ ]}, ${4:\\$data = [ ]})",
		"description": "Renders a single KirbyTag with the given attributes",
		"scope": "php"
	},
	"$kirby->kirbytags()": {
		"prefix": "->kirbytags()",
		"body": "->kirbytags(${1:\\$text = null}, ${2:\\$data = [ ]})",
		"description": "KirbyTags Parser",
		"scope": "php"
	},
	"$kirby->kirbytext()": {
		"prefix": "->kirbytext()",
		"body": "->kirbytext(${1:\\$text = null}, ${2:\\$options = [ ]})",
		"description": "Parses KirbyTags first and Markdown afterwards",
		"scope": "php"
	},
	"$kirby->language()": {
		"prefix": "->language()",
		"body": "->language(${1:\\$code = null})",
		"description": "Returns the current language",
		"scope": "php"
	},
	"$kirby->languageCode()": {
		"prefix": "->languageCode()",
		"body": "->languageCode(${1:\\$languageCode = null})",
		"description": "Returns the current language code",
		"scope": "php"
	},
	"$kirby->languages()": {
		"prefix": "->languages()",
		"body": "->languages(${1:\\$clone = true})",
		"description": "Returns all available site languages",
		"scope": "php"
	},
	"$kirby->load()": {
		"prefix": "->load()",
		"body": "->load()",
		"description": "Access Kirby’s part loader",
		"scope": "php"
	},
	"$kirby->locks()": {
		"prefix": "->locks()",
		"body": "->locks()",
		"description": "Returns the app’s locks object",
		"scope": "php"
	},
	"$kirby->markdown()": {
		"prefix": "->markdown()",
		"body": "->markdown(${1:\\$text = null}, ${2:\\$options = null})",
		"description": "Parses Markdown",
		"scope": "php"
	},
	"$kirby->multilang()": {
		"prefix": "->multilang()",
		"body": "->multilang()",
		"description": "Check for a multilang setup",
		"scope": "php"
	},
	"$kirby->nativeComponent()": {
		"prefix": "->nativeComponent()",
		"body": "->nativeComponent(${1:\\$component})",
		"description": "Returns the native implementation of a core component",
		"scope": "php"
	},
	"$kirby->nonce()": {
		"prefix": "->nonce()",
		"body": "->nonce()",
		"description": "Returns the nonce, which is used in the panel for inline scripts",
		"scope": "php"
	},
	"$kirby->option()": {
		"prefix": "->option()",
		"body": "->option(${1:\\$key}, ${2:\\$default = null})",
		"description": "Load a specific configuration option",
		"scope": "php"
	},
	"$kirby->options()": {
		"prefix": "->options()",
		"body": "->options()",
		"description": "Returns all configuration options",
		"scope": "php"
	},
	"$kirby->page()": {
		"prefix": "->page()",
		"body": "->page(${1:\\$id = null}, ${2:\\$parent = null}, ${3:\\$drafts = true})",
		"description": "Returns any page from the content folder",
		"scope": "php"
	},
	"$kirby->panelLanguage()": {
		"prefix": "->panelLanguage()",
		"body": "->panelLanguage()",
		"description": "Returns the language code that will be used for the Panel if no user is logged in or if no language is configured for the user",
		"scope": "php"
	},
	"$kirby->path()": {
		"prefix": "->path()",
		"body": "->path()",
		"description": "Returns the request path",
		"scope": "php"
	},
	"$kirby->plugins()": {
		"prefix": "->plugins()",
		"body": "->plugins(${1:\\$plugins = null})",
		"description": "Loads and returns all plugins in the site/plugins directory Loading only happens on the first call.",
		"scope": "php"
	},
	"$kirby->render()": {
		"prefix": "->render()",
		"body": "->render(${1:\\$path = null}, ${2:\\$method = null})",
		"description": "Returns the Response object for the current request",
		"scope": "php"
	},
	"$kirby->request()": {
		"prefix": "->request()",
		"body": "->request()",
		"description": "Returns the Request singleton",
		"scope": "php"
	},
	"$kirby->resolve()": {
		"prefix": "->resolve()",
		"body": "->resolve(${1:\\$path = null}, ${2:\\$language = null})",
		"description": "Path resolver for the router",
		"scope": "php"
	},
	"$kirby->response()": {
		"prefix": "->response()",
		"body": "->response()",
		"description": "Response configuration",
		"scope": "php"
	},
	"$kirby->roles()": {
		"prefix": "->roles()",
		"body": "->roles()",
		"description": "Returns all user roles",
		"scope": "php"
	},
	"$kirby->root()": {
		"prefix": "->root()",
		"body": "->root(${1:\\$type = 'index'})",
		"description": "Returns a system root",
		"scope": "php"
	},
	"$kirby->roots()": {
		"prefix": "->roots()",
		"body": "->roots()",
		"description": "Returns the directory structure",
		"scope": "php"
	},
	"$kirby->route()": {
		"prefix": "->route()",
		"body": "->route()",
		"description": "Returns the currently active route",
		"scope": "php"
	},
	"$kirby->router()": {
		"prefix": "->router()",
		"body": "->router()",
		"description": "Returns the Router singleton",
		"scope": "php"
	},
	"$kirby->routes()": {
		"prefix": "->routes()",
		"body": "->routes()",
		"description": "Returns all defined routes",
		"scope": "php"
	},
	"$kirby->server()": {
		"prefix": "->server()",
		"body": "->server()",
		"description": "Returns the Environment object",
		"scope": "php"
	},
	"$kirby->session()": {
		"prefix": "->session()",
		"body": "->session(${1:\\$options = [ ]})",
		"description": "Returns the current session object",
		"scope": "php"
	},
	"$kirby->sessionHandler()": {
		"prefix": "->sessionHandler()",
		"body": "->sessionHandler()",
		"description": "Returns the session handler",
		"scope": "php"
	},
	"$kirby->setCurrentLanguage()": {
		"prefix": "->setCurrentLanguage()",
		"body": "->setCurrentLanguage(${1:\\$languageCode = null})",
		"description": "Load and set the current language if it exists Otherwise fall back to the default language",
		"scope": "php"
	},
	"$kirby->setCurrentTranslation()": {
		"prefix": "->setCurrentTranslation()",
		"body": "->setCurrentTranslation(${1:\\$translationCode = null})",
		"description": "Set the current translation",
		"scope": "php"
	},
	"$kirby->site()": {
		"prefix": "->site()",
		"body": "->site()",
		"description": "Initializes and returns the Site object",
		"scope": "php"
	},
	"$kirby->smartypants()": {
		"prefix": "->smartypants()",
		"body": "->smartypants(${1:\\$text = null})",
		"description": "Applies the smartypants rule on the text",
		"scope": "php"
	},
	"$kirby->snippet()": {
		"prefix": "->snippet()",
		"body": "->snippet(${1:\\$name}, ${2:\\$data = [ ]}, ${3:\\$return = true})",
		"description": "Uses the snippet component to create and return a template snippet",
		"scope": "php"
	},
	"$kirby->system()": {
		"prefix": "->system()",
		"body": "->system()",
		"description": "System check class",
		"scope": "php"
	},
	"$kirby->template()": {
		"prefix": "->template()",
		"body": "->template(${1:\\$name}, ${2:\\$type = 'html'}, ${3:\\$defaultType = 'html'})",
		"description": "Uses the template component to initialize and return the Template object",
		"scope": "php"
	},
	"$kirby->thumb()": {
		"prefix": "->thumb()",
		"body": "->thumb(${1:\\$src}, ${2:\\$dst}, ${3:\\$options = [ ]})",
		"description": "Thumbnail creator",
		"scope": "php"
	},
	"$kirby->translation()": {
		"prefix": "->translation()",
		"body": "->translation(${1:\\$locale = null})",
		"description": "Load a specific translation by locale",
		"scope": "php"
	},
	"$kirby->translations()": {
		"prefix": "->translations()",
		"body": "->translations()",
		"description": "Returns all available translations",
		"scope": "php"
	},
	"$kirby->trigger()": {
		"prefix": "->trigger()",
		"body": "->trigger(${1:\\$name}, ${2:\\$args = [ ]}, ${3:\\$originalEvent = null})",
		"description": "Trigger a hook by name",
		"scope": "php"
	},
	"$kirby->url()": {
		"prefix": "->url()",
		"body": "->url(${1:\\$type = 'index'}, ${2:\\$object = false})",
		"description": "Returns a system url",
		"scope": "php"
	},
	"$kirby->urls()": {
		"prefix": "->urls()",
		"body": "->urls()",
		"description": "Returns the url structure",
		"scope": "php"
	},
	"$kirby->user()": {
		"prefix": "->user()",
		"body": "->user(${1:\\$id = null}, ${2:\\$allowImpersonation = true})",
		"description": "Returns a specific user by id or the current user if no id is given",
		"scope": "php"
	},
	"$kirby->users()": {
		"prefix": "->users()",
		"body": "->users()",
		"description": "Returns all users",
		"scope": "php"
	},
	"$kirby->visitor()": {
		"prefix": "->visitor()",
		"body": "->visitor()",
		"description": "Returns the visitor object",
		"scope": "php"
	},
	"$site->apiUrl()": {
		"prefix": "->apiUrl()",
		"body": "->apiUrl(${1:\\$relative = false})",
		"description": "Returns the url to the api endpoint",
		"scope": "php"
	},
	"$site->audio()": {
		"prefix": "->audio()",
		"body": "->audio()",
		"description": "Filters the Files collection by type audio",
		"scope": "php"
	},
	"$site->blueprint()": {
		"prefix": "->blueprint()",
		"body": "->blueprint()",
		"description": "Returns the blueprint object",
		"scope": "php"
	},
	"$site->blueprints()": {
		"prefix": "->blueprints()",
		"body": "->blueprints(${1:\\$inSection = null})",
		"description": "Returns an array with all blueprints that are available",
		"scope": "php"
	},
	"$site->breadcrumb()": {
		"prefix": "->breadcrumb()",
		"body": "->breadcrumb()",
		"description": "Builds a breadcrumb collection",
		"scope": "php"
	},
	"$site->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$site->changeTitle()": {
		"prefix": "->changeTitle()",
		"body": "->changeTitle(${1:\\$title}, ${2:\\$languageCode = null})",
		"description": "Change the site title",
		"scope": "php"
	},
	"$site->children()": {
		"prefix": "->children()",
		"body": "->children()",
		"description": "Returns all published children",
		"scope": "php"
	},
	"$site->childrenAndDrafts()": {
		"prefix": "->childrenAndDrafts()",
		"body": "->childrenAndDrafts()",
		"description": "Returns all published and draft children at the same time",
		"scope": "php"
	},
	"$site->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]})",
		"description": "Creates an instance with the same initial properties.",
		"scope": "php"
	},
	"$site->code()": {
		"prefix": "->code()",
		"body": "->code()",
		"description": "Filters the Files collection by type code",
		"scope": "php"
	},
	"$site->content()": {
		"prefix": "->content()",
		"body": "->content(${1:\\$languageCode = null})",
		"description": "Returns the content",
		"scope": "php"
	},
	"$site->contentFile()": {
		"prefix": "->contentFile()",
		"body": "->contentFile(${1:\\$languageCode = null}, ${2:\\$force = false})",
		"description": "Returns the absolute path to the content file",
		"scope": "php"
	},
	"$site->contentFileData()": {
		"prefix": "->contentFileData()",
		"body": "->contentFileData(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Prepares the content for the write method",
		"scope": "php"
	},
	"$site->contentFileDirectory()": {
		"prefix": "->contentFileDirectory()",
		"body": "->contentFileDirectory()",
		"description": "Returns the absolute path to the folder in which the content file is located",
		"scope": "php"
	},
	"$site->contentFileExtension()": {
		"prefix": "->contentFileExtension()",
		"body": "->contentFileExtension()",
		"description": "Returns the extension of the content file",
		"scope": "php"
	},
	"$site->contentFileName()": {
		"prefix": "->contentFileName()",
		"body": "->contentFileName()",
		"description": "Filename for the content file",
		"scope": "php"
	},
	"$site->contentFiles()": {
		"prefix": "->contentFiles()",
		"body": "->contentFiles()",
		"description": "Returns an array with all content files",
		"scope": "php"
	},
	"$site->createChild()": {
		"prefix": "->createChild()",
		"body": "->createChild(${1:\\$props})",
		"description": "Creates a main page",
		"scope": "php"
	},
	"$site->createFile()": {
		"prefix": "->createFile()",
		"body": "->createFile(${1:\\$props})",
		"description": "Creates a new file",
		"scope": "php"
	},
	"$site->decrement()": {
		"prefix": "->decrement()",
		"body": "->decrement(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$min = 0})",
		"description": "Decrement a given field value",
		"scope": "php"
	},
	"$site->documents()": {
		"prefix": "->documents()",
		"body": "->documents()",
		"description": "Filters the Files collection by type documents",
		"scope": "php"
	},
	"$site->draft()": {
		"prefix": "->draft()",
		"body": "->draft(${1:\\$path})",
		"description": "Searches for a draft child by ID",
		"scope": "php"
	},
	"$site->drafts()": {
		"prefix": "->drafts()",
		"body": "->drafts()",
		"description": "Returns all draft children",
		"scope": "php"
	},
	"$site->errorPage()": {
		"prefix": "->errorPage()",
		"body": "->errorPage()",
		"description": "Returns the error page object",
		"scope": "php"
	},
	"$site->errorPageId()": {
		"prefix": "->errorPageId()",
		"body": "->errorPageId()",
		"description": "Returns the global error page id",
		"scope": "php"
	},
	"$site->errors()": {
		"prefix": "->errors()",
		"body": "->errors()",
		"description": "Returns all content validation errors",
		"scope": "php"
	},
	"$site->exists()": {
		"prefix": "->exists()",
		"body": "->exists()",
		"description": "Checks if the site exists on disk",
		"scope": "php"
	},
	"$site->file()": {
		"prefix": "->file()",
		"body": "->file(${1:\\$filename = null}, ${2:\\$in = 'files'})",
		"description": "Returns a specific file by filename or the first one",
		"scope": "php"
	},
	"$site->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns the Files collection",
		"scope": "php"
	},
	"$site->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$arguments = null})",
		"description": "Finds one or multiple published children by ID",
		"scope": "php"
	},
	"$site->findPageOrDraft()": {
		"prefix": "->findPageOrDraft()",
		"body": "->findPageOrDraft(${1:\\$path})",
		"description": "Finds a single published or draft child",
		"scope": "php"
	},
	"$site->grandChildren()": {
		"prefix": "->grandChildren()",
		"body": "->grandChildren()",
		"description": "Returns a collection of all published children of published children",
		"scope": "php"
	},
	"$site->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$site->hasAudio()": {
		"prefix": "->hasAudio()",
		"body": "->hasAudio()",
		"description": "Checks if the Files collection has any audio files",
		"scope": "php"
	},
	"$site->hasChildren()": {
		"prefix": "->hasChildren()",
		"body": "->hasChildren()",
		"description": "Checks if the model has any published children",
		"scope": "php"
	},
	"$site->hasCode()": {
		"prefix": "->hasCode()",
		"body": "->hasCode()",
		"description": "Checks if the Files collection has any code files",
		"scope": "php"
	},
	"$site->hasDocuments()": {
		"prefix": "->hasDocuments()",
		"body": "->hasDocuments()",
		"description": "Checks if the Files collection has any document files",
		"scope": "php"
	},
	"$site->hasDrafts()": {
		"prefix": "->hasDrafts()",
		"body": "->hasDrafts()",
		"description": "Checks if the model has any draft children",
		"scope": "php"
	},
	"$site->hasFiles()": {
		"prefix": "->hasFiles()",
		"body": "->hasFiles()",
		"description": "Checks if the Files collection has any files",
		"scope": "php"
	},
	"$site->hasImages()": {
		"prefix": "->hasImages()",
		"body": "->hasImages()",
		"description": "Checks if the Files collection has any images",
		"scope": "php"
	},
	"$site->hasListedChildren()": {
		"prefix": "->hasListedChildren()",
		"body": "->hasListedChildren()",
		"description": "Checks if the page has any listed children",
		"scope": "php"
	},
	"$site->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$site->hasUnlistedChildren()": {
		"prefix": "->hasUnlistedChildren()",
		"body": "->hasUnlistedChildren()",
		"description": "Checks if the page has any unlisted children",
		"scope": "php"
	},
	"$site->hasVideos()": {
		"prefix": "->hasVideos()",
		"body": "->hasVideos()",
		"description": "Checks if the Files collection has any videos",
		"scope": "php"
	},
	"$site->homePage()": {
		"prefix": "->homePage()",
		"body": "->homePage()",
		"description": "Returns the home page object",
		"scope": "php"
	},
	"$site->homePageId()": {
		"prefix": "->homePageId()",
		"body": "->homePageId()",
		"description": "Returns the global home page id",
		"scope": "php"
	},
	"$site->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "Each model must return a unique id",
		"scope": "php"
	},
	"$site->image()": {
		"prefix": "->image()",
		"body": "->image(${1:\\$filename = null})",
		"description": "Returns a specific image by filename or the first one",
		"scope": "php"
	},
	"$site->images()": {
		"prefix": "->images()",
		"body": "->images()",
		"description": "Filters the Files collection by type image",
		"scope": "php"
	},
	"$site->increment()": {
		"prefix": "->increment()",
		"body": "->increment(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$max = null})",
		"description": "Increment a given field value",
		"scope": "php"
	},
	"$site->index()": {
		"prefix": "->index()",
		"body": "->index(${1:\\$drafts = false})",
		"description": "Creates a flat child index",
		"scope": "php"
	},
	"$site->inventory()": {
		"prefix": "->inventory()",
		"body": "->inventory()",
		"description": "Creates an inventory of all files and children in the site directory",
		"scope": "php"
	},
	"$site->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$site})",
		"description": "Compares the current object with the given site object",
		"scope": "php"
	},
	"$site->isLocked()": {
		"prefix": "->isLocked()",
		"body": "->isLocked()",
		"description": "Checks if the model is locked for the current user",
		"scope": "php"
	},
	"$site->isValid()": {
		"prefix": "->isValid()",
		"body": "->isValid()",
		"description": "Checks if the data has any errors",
		"scope": "php"
	},
	"$site->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the parent Kirby instance",
		"scope": "php"
	},
	"$site->lock()": {
		"prefix": "->lock()",
		"body": "->lock()",
		"description": "Returns the lock object for this model",
		"scope": "php"
	},
	"$site->mediaRoot()": {
		"prefix": "->mediaRoot()",
		"body": "->mediaRoot()",
		"description": "Returns the root to the media folder for the site",
		"scope": "php"
	},
	"$site->mediaUrl()": {
		"prefix": "->mediaUrl()",
		"body": "->mediaUrl()",
		"description": "The site’s base url for any files",
		"scope": "php"
	},
	"$site->modified()": {
		"prefix": "->modified()",
		"body": "->modified(${1:\\$format = null}, ${2:\\$handler = null})",
		"description": "Gets the last modification date of all pages in the content folder.",
		"scope": "php"
	},
	"$site->page()": {
		"prefix": "->page()",
		"body": "->page(${1:\\$path = null})",
		"description": "Returns the current page if `$path` is not specified. Otherwise it will try to find a page by the given path.",
		"scope": "php"
	},
	"$site->pages()": {
		"prefix": "->pages()",
		"body": "->pages()",
		"description": "Alias for `Site::children()`",
		"scope": "php"
	},
	"$site->panel()": {
		"prefix": "->panel()",
		"body": "->panel()",
		"description": "Returns the panel info object",
		"scope": "php"
	},
	"$site->permissions()": {
		"prefix": "->permissions()",
		"body": "->permissions()",
		"description": "Returns the permissions object for this site",
		"scope": "php"
	},
	"$site->previewUrl()": {
		"prefix": "->previewUrl()",
		"body": "->previewUrl()",
		"description": "Preview Url",
		"scope": "php"
	},
	"$site->purge()": {
		"prefix": "->purge()",
		"body": "->purge()",
		"description": "Clean internal caches",
		"scope": "php"
	},
	"$site->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$query = null}, ${2:\\$expect = null})",
		"description": "Creates a string query, starting from the model",
		"scope": "php"
	},
	"$site->readContent()": {
		"prefix": "->readContent()",
		"body": "->readContent(${1:\\$languageCode = null})",
		"description": "Read the content from the content file",
		"scope": "php"
	},
	"$site->root()": {
		"prefix": "->root()",
		"body": "->root()",
		"description": "Returns the absolute path to the content directory",
		"scope": "php"
	},
	"$site->save()": {
		"prefix": "->save()",
		"body": "->save(${1:\\$data = null}, ${2:\\$languageCode = null}, ${3:\\$overwrite = false})",
		"description": "Stores the content on disk",
		"scope": "php"
	},
	"$site->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Search all pages in the site",
		"scope": "php"
	},
	"$site->setPage()": {
		"prefix": "->setPage()",
		"body": "->setPage(${1:\\$page = null})",
		"description": "Sets the current page object",
		"scope": "php"
	},
	"$site->setSite()": {
		"prefix": "->setSite()",
		"body": "->setSite(${1:\\$site = null})",
		"description": "Setter for the parent site object",
		"scope": "php"
	},
	"$site->site()": {
		"prefix": "->site()",
		"body": "->site()",
		"description": "Returns the parent Site instance",
		"scope": "php"
	},
	"$site->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Converts the most important site properties to an array",
		"scope": "php"
	},
	"$site->toSafeString()": {
		"prefix": "->toSafeString()",
		"body": "->toSafeString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''})",
		"description": "String template builder with automatic HTML escaping",
		"scope": "php"
	},
	"$site->toString()": {
		"prefix": "->toString()",
		"body": "->toString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''}, ${4:\\$handler = 'template'})",
		"description": "String template builder",
		"scope": "php"
	},
	"$site->translation()": {
		"prefix": "->translation()",
		"body": "->translation(${1:\\$languageCode = null})",
		"description": "Returns a single translation by language code If no code is specified the current translation is returned",
		"scope": "php"
	},
	"$site->translations()": {
		"prefix": "->translations()",
		"body": "->translations()",
		"description": "Returns the translations collection",
		"scope": "php"
	},
	"$site->update()": {
		"prefix": "->update()",
		"body": "->update(${1:\\$input = null}, ${2:\\$languageCode = null}, ${3:\\$validate = false})",
		"description": "Updates the model data",
		"scope": "php"
	},
	"$site->url()": {
		"prefix": "->url()",
		"body": "->url(${1:\\$language = null})",
		"description": "Returns the Url",
		"scope": "php"
	},
	"$site->urlForLanguage()": {
		"prefix": "->urlForLanguage()",
		"body": "->urlForLanguage(${1:\\$languageCode = null}, ${2:\\$options = null})",
		"description": "Returns the translated url",
		"scope": "php"
	},
	"$site->uuid()": {
		"prefix": "->uuid()",
		"body": "->uuid()",
		"description": "Returns the site’s Unique ID which is always `site://`.",
		"scope": "php"
	},
	"$site->videos()": {
		"prefix": "->videos()",
		"body": "->videos()",
		"description": "Filters the Files collection by type videos",
		"scope": "php"
	},
	"$site->visit()": {
		"prefix": "->visit()",
		"body": "->visit(${1:\\$page}, ${2:\\$languageCode = null})",
		"description": "Sets the current page by id or page object and returns the current page",
		"scope": "php"
	},
	"$site->wasModifiedAfter()": {
		"prefix": "->wasModifiedAfter()",
		"body": "->wasModifiedAfter(${1:\\$time})",
		"description": "Checks if any content of the site has been modified after the given unix timestamp This is mainly used to auto-update the cache",
		"scope": "php"
	},
	"$site->writeContent()": {
		"prefix": "->writeContent()",
		"body": "->writeContent(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Low level data writer method to store the given data on disk or anywhere else",
		"scope": "php"
	},
	"$page->apiUrl()": {
		"prefix": "->apiUrl()",
		"body": "->apiUrl(${1:\\$relative = false})",
		"description": "Returns the url to the api endpoint",
		"scope": "php"
	},
	"$page->audio()": {
		"prefix": "->audio()",
		"body": "->audio()",
		"description": "Filters the Files collection by type audio",
		"scope": "php"
	},
	"$page->blueprint()": {
		"prefix": "->blueprint()",
		"body": "->blueprint()",
		"description": "Returns the blueprint object",
		"scope": "php"
	},
	"$page->blueprints()": {
		"prefix": "->blueprints()",
		"body": "->blueprints(${1:\\$inSection = null})",
		"description": "Returns an array with all blueprints that are available for the page",
		"scope": "php"
	},
	"$page->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$page->changeNum()": {
		"prefix": "->changeNum()",
		"body": "->changeNum(${1:\\$num = null})",
		"description": "Changes the sorting number.",
		"scope": "php"
	},
	"$page->changeSlug()": {
		"prefix": "->changeSlug()",
		"body": "->changeSlug(${1:\\$slug}, ${2:\\$languageCode = null})",
		"description": "Changes the slug/uid of the page",
		"scope": "php"
	},
	"$page->changeSort()": {
		"prefix": "->changeSort()",
		"body": "->changeSort(${1:\\$position = null})",
		"description": "Change the position of the page in its siblings collection. Siblings will be resorted. If the page status isn’t yet `listed`, it will be changed to it.",
		"scope": "php"
	},
	"$page->changeStatus()": {
		"prefix": "->changeStatus()",
		"body": "->changeStatus(${1:\\$status}, ${2:\\$position = null})",
		"description": "Change the status of the current page to either draft, listed or unlisted.",
		"scope": "php"
	},
	"$page->changeTemplate()": {
		"prefix": "->changeTemplate()",
		"body": "->changeTemplate(${1:\\$template})",
		"description": "Changes the page template",
		"scope": "php"
	},
	"$page->changeTitle()": {
		"prefix": "->changeTitle()",
		"body": "->changeTitle(${1:\\$title}, ${2:\\$languageCode = null})",
		"description": "Change the page title",
		"scope": "php"
	},
	"$page->children()": {
		"prefix": "->children()",
		"body": "->children()",
		"description": "Returns all published children",
		"scope": "php"
	},
	"$page->childrenAndDrafts()": {
		"prefix": "->childrenAndDrafts()",
		"body": "->childrenAndDrafts()",
		"description": "Returns all published and draft children at the same time",
		"scope": "php"
	},
	"$page->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]})",
		"description": "Creates an instance with the same initial properties.",
		"scope": "php"
	},
	"$page->code()": {
		"prefix": "->code()",
		"body": "->code()",
		"description": "Filters the Files collection by type code",
		"scope": "php"
	},
	"$page->content()": {
		"prefix": "->content()",
		"body": "->content(${1:\\$languageCode = null})",
		"description": "Returns the content",
		"scope": "php"
	},
	"$page->contentFile()": {
		"prefix": "->contentFile()",
		"body": "->contentFile(${1:\\$languageCode = null}, ${2:\\$force = false})",
		"description": "Returns the absolute path to the content file",
		"scope": "php"
	},
	"$page->contentFileData()": {
		"prefix": "->contentFileData()",
		"body": "->contentFileData(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Prepares the content for the write method",
		"scope": "php"
	},
	"$page->contentFileDirectory()": {
		"prefix": "->contentFileDirectory()",
		"body": "->contentFileDirectory()",
		"description": "Returns the absolute path to the folder in which the content file is located",
		"scope": "php"
	},
	"$page->contentFileExtension()": {
		"prefix": "->contentFileExtension()",
		"body": "->contentFileExtension()",
		"description": "Returns the extension of the content file",
		"scope": "php"
	},
	"$page->contentFileName()": {
		"prefix": "->contentFileName()",
		"body": "->contentFileName(${1:\\$languageCode = null})",
		"description": "Returns the content text file which is found by the inventory method",
		"scope": "php"
	},
	"$page->contentFiles()": {
		"prefix": "->contentFiles()",
		"body": "->contentFiles()",
		"description": "Returns an array with all content files",
		"scope": "php"
	},
	"$page->controller()": {
		"prefix": "->controller()",
		"body": "->controller(${1:\\$data = [ ]}, ${2:\\$contentType = 'html'})",
		"description": "Call the page controller",
		"scope": "php"
	},
	"$page->copy()": {
		"prefix": "->copy()",
		"body": "->copy(${1:\\$options = [ ]})",
		"description": "Copies the page to a new parent",
		"scope": "php"
	},
	"$page->createChild()": {
		"prefix": "->createChild()",
		"body": "->createChild(${1:\\$props})",
		"description": "Creates a child of the current page",
		"scope": "php"
	},
	"$page->createFile()": {
		"prefix": "->createFile()",
		"body": "->createFile(${1:\\$props})",
		"description": "Creates a new file",
		"scope": "php"
	},
	"$page->createNum()": {
		"prefix": "->createNum()",
		"body": "->createNum(${1:\\$num = null})",
		"description": "Create the sorting number for the page depending on the blueprint settings",
		"scope": "php"
	},
	"$page->decrement()": {
		"prefix": "->decrement()",
		"body": "->decrement(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$min = 0})",
		"description": "Decrement a given field value",
		"scope": "php"
	},
	"$page->delete()": {
		"prefix": "->delete()",
		"body": "->delete(${1:\\$force = false})",
		"description": "Deletes the page",
		"scope": "php"
	},
	"$page->depth()": {
		"prefix": "->depth()",
		"body": "->depth()",
		"description": "Returns a number indicating how deep the page is nested within the content folder",
		"scope": "php"
	},
	"$page->dirname()": {
		"prefix": "->dirname()",
		"body": "->dirname()",
		"description": "Sorting number + Slug",
		"scope": "php"
	},
	"$page->diruri()": {
		"prefix": "->diruri()",
		"body": "->diruri()",
		"description": "Sorting number + Slug",
		"scope": "php"
	},
	"$page->documents()": {
		"prefix": "->documents()",
		"body": "->documents()",
		"description": "Filters the Files collection by type documents",
		"scope": "php"
	},
	"$page->draft()": {
		"prefix": "->draft()",
		"body": "->draft(${1:\\$path})",
		"description": "Searches for a draft child by ID",
		"scope": "php"
	},
	"$page->drafts()": {
		"prefix": "->drafts()",
		"body": "->drafts()",
		"description": "Returns all draft children",
		"scope": "php"
	},
	"$page->duplicate()": {
		"prefix": "->duplicate()",
		"body": "->duplicate(${1:\\$slug = null}, ${2:\\$options = [ ]})",
		"description": "Duplicates the page with the given slug and optionally copies all files",
		"scope": "php"
	},
	"$page->errors()": {
		"prefix": "->errors()",
		"body": "->errors()",
		"description": "Returns all content validation errors",
		"scope": "php"
	},
	"$page->exists()": {
		"prefix": "->exists()",
		"body": "->exists()",
		"description": "Checks if the page exists on disk",
		"scope": "php"
	},
	"$page->file()": {
		"prefix": "->file()",
		"body": "->file(${1:\\$filename = null}, ${2:\\$in = 'files'})",
		"description": "Returns a specific file by filename or the first one",
		"scope": "php"
	},
	"$page->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns the Files collection",
		"scope": "php"
	},
	"$page->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$arguments = null})",
		"description": "Finds one or multiple published children by ID",
		"scope": "php"
	},
	"$page->findPageOrDraft()": {
		"prefix": "->findPageOrDraft()",
		"body": "->findPageOrDraft(${1:\\$path})",
		"description": "Finds a single published or draft child",
		"scope": "php"
	},
	"$page->go()": {
		"prefix": "->go()",
		"body": "->go(${1:\\$options = [ ]}, ${2:\\$code = 302})",
		"description": "Redirects to this page, wrapper for the `go()` helper",
		"scope": "php"
	},
	"$page->grandChildren()": {
		"prefix": "->grandChildren()",
		"body": "->grandChildren()",
		"description": "Returns a collection of all published children of published children",
		"scope": "php"
	},
	"$page->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$page->hasAudio()": {
		"prefix": "->hasAudio()",
		"body": "->hasAudio()",
		"description": "Checks if the Files collection has any audio files",
		"scope": "php"
	},
	"$page->hasChildren()": {
		"prefix": "->hasChildren()",
		"body": "->hasChildren()",
		"description": "Checks if the model has any published children",
		"scope": "php"
	},
	"$page->hasCode()": {
		"prefix": "->hasCode()",
		"body": "->hasCode()",
		"description": "Checks if the Files collection has any code files",
		"scope": "php"
	},
	"$page->hasDocuments()": {
		"prefix": "->hasDocuments()",
		"body": "->hasDocuments()",
		"description": "Checks if the Files collection has any document files",
		"scope": "php"
	},
	"$page->hasDrafts()": {
		"prefix": "->hasDrafts()",
		"body": "->hasDrafts()",
		"description": "Checks if the model has any draft children",
		"scope": "php"
	},
	"$page->hasFiles()": {
		"prefix": "->hasFiles()",
		"body": "->hasFiles()",
		"description": "Checks if the Files collection has any files",
		"scope": "php"
	},
	"$page->hasImages()": {
		"prefix": "->hasImages()",
		"body": "->hasImages()",
		"description": "Checks if the Files collection has any images",
		"scope": "php"
	},
	"$page->hasListedChildren()": {
		"prefix": "->hasListedChildren()",
		"body": "->hasListedChildren()",
		"description": "Checks if the page has any listed children",
		"scope": "php"
	},
	"$page->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$page->hasNext()": {
		"prefix": "->hasNext()",
		"body": "->hasNext(${1:\\$collection = null})",
		"description": "Checks if there’s a next item in the collection",
		"scope": "php"
	},
	"$page->hasNextListed()": {
		"prefix": "->hasNextListed()",
		"body": "->hasNextListed(${1:\\$collection = null})",
		"description": "Checks if there’s a next listed page in the siblings collection",
		"scope": "php"
	},
	"$page->hasNextUnlisted()": {
		"prefix": "->hasNextUnlisted()",
		"body": "->hasNextUnlisted(${1:\\$collection = null})",
		"description": "Checks if there’s a next unlisted page in the siblings collection",
		"scope": "php"
	},
	"$page->hasPrev()": {
		"prefix": "->hasPrev()",
		"body": "->hasPrev(${1:\\$collection = null})",
		"description": "Checks if there’s a previous item in the collection",
		"scope": "php"
	},
	"$page->hasPrevListed()": {
		"prefix": "->hasPrevListed()",
		"body": "->hasPrevListed(${1:\\$collection = null})",
		"description": "Checks if there’s a previous listed page in the siblings collection",
		"scope": "php"
	},
	"$page->hasPrevUnlisted()": {
		"prefix": "->hasPrevUnlisted()",
		"body": "->hasPrevUnlisted(${1:\\$collection = null})",
		"description": "Checks if there’s a previous unlisted page in the siblings collection",
		"scope": "php"
	},
	"$page->hasTemplate()": {
		"prefix": "->hasTemplate()",
		"body": "->hasTemplate()",
		"description": "Checks if the intended template for the page exists.",
		"scope": "php"
	},
	"$page->hasUnlistedChildren()": {
		"prefix": "->hasUnlistedChildren()",
		"body": "->hasUnlistedChildren()",
		"description": "Checks if the page has any unlisted children",
		"scope": "php"
	},
	"$page->hasVideos()": {
		"prefix": "->hasVideos()",
		"body": "->hasVideos()",
		"description": "Checks if the Files collection has any videos",
		"scope": "php"
	},
	"$page->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "Returns the Page Id",
		"scope": "php"
	},
	"$page->image()": {
		"prefix": "->image()",
		"body": "->image(${1:\\$filename = null})",
		"description": "Returns a specific image by filename or the first one",
		"scope": "php"
	},
	"$page->images()": {
		"prefix": "->images()",
		"body": "->images()",
		"description": "Filters the Files collection by type image",
		"scope": "php"
	},
	"$page->increment()": {
		"prefix": "->increment()",
		"body": "->increment(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$max = null})",
		"description": "Increment a given field value",
		"scope": "php"
	},
	"$page->index()": {
		"prefix": "->index()",
		"body": "->index(${1:\\$drafts = false})",
		"description": "Creates a flat child index",
		"scope": "php"
	},
	"$page->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$collection = null})",
		"description": "Returns the position / index in the collection",
		"scope": "php"
	},
	"$page->intendedTemplate()": {
		"prefix": "->intendedTemplate()",
		"body": "->intendedTemplate()",
		"description": "Returns the template that should be loaded if it exists.",
		"scope": "php"
	},
	"$page->inventory()": {
		"prefix": "->inventory()",
		"body": "->inventory()",
		"description": "Returns the inventory of files children and content files",
		"scope": "php"
	},
	"$page->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$page})",
		"description": "Compares the current object with the given page object",
		"scope": "php"
	},
	"$page->isActive()": {
		"prefix": "->isActive()",
		"body": "->isActive()",
		"description": "Checks if the page is the current page",
		"scope": "php"
	},
	"$page->isAncestorOf()": {
		"prefix": "->isAncestorOf()",
		"body": "->isAncestorOf(${1:\\$child})",
		"description": "Checks if the page is a direct or indirect ancestor of the given $page object",
		"scope": "php"
	},
	"$page->isCacheable()": {
		"prefix": "->isCacheable()",
		"body": "->isCacheable()",
		"description": "Checks if the page can be cached in the pages cache. This will also check if one of the ignore rules from the config kick in.",
		"scope": "php"
	},
	"$page->isChildOf()": {
		"prefix": "->isChildOf()",
		"body": "->isChildOf(${1:\\$parent})",
		"description": "Checks if the page is a child of the given page",
		"scope": "php"
	},
	"$page->isDescendantOf()": {
		"prefix": "->isDescendantOf()",
		"body": "->isDescendantOf(${1:\\$parent})",
		"description": "Checks if the page is a descendant of the given page",
		"scope": "php"
	},
	"$page->isDescendantOfActive()": {
		"prefix": "->isDescendantOfActive()",
		"body": "->isDescendantOfActive()",
		"description": "Checks if the page is a descendant of the currently active page",
		"scope": "php"
	},
	"$page->isDraft()": {
		"prefix": "->isDraft()",
		"body": "->isDraft()",
		"description": "Checks if the current page is a draft",
		"scope": "php"
	},
	"$page->isErrorPage()": {
		"prefix": "->isErrorPage()",
		"body": "->isErrorPage()",
		"description": "Checks if the page is the error page",
		"scope": "php"
	},
	"$page->isFirst()": {
		"prefix": "->isFirst()",
		"body": "->isFirst(${1:\\$collection = null})",
		"description": "Checks if the item is the first in the collection",
		"scope": "php"
	},
	"$page->isHomeOrErrorPage()": {
		"prefix": "->isHomeOrErrorPage()",
		"body": "->isHomeOrErrorPage()",
		"description": "It’s often required to check for the home and error page to stop certain actions. That’s why there’s a shortcut.",
		"scope": "php"
	},
	"$page->isHomePage()": {
		"prefix": "->isHomePage()",
		"body": "->isHomePage()",
		"description": "Checks if the page is the home page",
		"scope": "php"
	},
	"$page->isLast()": {
		"prefix": "->isLast()",
		"body": "->isLast(${1:\\$collection = null})",
		"description": "Checks if the item is the last in the collection",
		"scope": "php"
	},
	"$page->isListed()": {
		"prefix": "->isListed()",
		"body": "->isListed()",
		"description": "Checks if the page has a sorting number",
		"scope": "php"
	},
	"$page->isLocked()": {
		"prefix": "->isLocked()",
		"body": "->isLocked()",
		"description": "Checks if the model is locked for the current user",
		"scope": "php"
	},
	"$page->isNth()": {
		"prefix": "->isNth()",
		"body": "->isNth(${1:\\$n}, ${2:\\$collection = null})",
		"description": "Checks if the item is at a certain position",
		"scope": "php"
	},
	"$page->isOpen()": {
		"prefix": "->isOpen()",
		"body": "->isOpen()",
		"description": "Checks if the page is open.",
		"scope": "php"
	},
	"$page->isPublished()": {
		"prefix": "->isPublished()",
		"body": "->isPublished()",
		"description": "Checks if the page is not a draft.",
		"scope": "php"
	},
	"$page->isReadable()": {
		"prefix": "->isReadable()",
		"body": "->isReadable()",
		"description": "Check if the page can be read by the current user",
		"scope": "php"
	},
	"$page->isSortable()": {
		"prefix": "->isSortable()",
		"body": "->isSortable()",
		"description": "Checks if the page is sortable",
		"scope": "php"
	},
	"$page->isUnlisted()": {
		"prefix": "->isUnlisted()",
		"body": "->isUnlisted()",
		"description": "Checks if the page has no sorting number",
		"scope": "php"
	},
	"$page->isValid()": {
		"prefix": "->isValid()",
		"body": "->isValid()",
		"description": "Checks if the data has any errors",
		"scope": "php"
	},
	"$page->isVerified()": {
		"prefix": "->isVerified()",
		"body": "->isVerified(${1:\\$token = null})",
		"description": "Checks if the page access is verified.",
		"scope": "php"
	},
	"$page->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the parent Kirby instance",
		"scope": "php"
	},
	"$page->lock()": {
		"prefix": "->lock()",
		"body": "->lock()",
		"description": "Returns the lock object for this model",
		"scope": "php"
	},
	"$page->mediaRoot()": {
		"prefix": "->mediaRoot()",
		"body": "->mediaRoot()",
		"description": "Returns the root to the media folder for the page",
		"scope": "php"
	},
	"$page->mediaUrl()": {
		"prefix": "->mediaUrl()",
		"body": "->mediaUrl()",
		"description": "The page’s base URL for any files",
		"scope": "php"
	},
	"$page->modified()": {
		"prefix": "->modified()",
		"body": "->modified(${1:\\$format = null}, ${2:\\$handler = null}, ${3:\\$languageCode = null})",
		"description": "Returns the last modification date of the page",
		"scope": "php"
	},
	"$page->next()": {
		"prefix": "->next()",
		"body": "->next(${1:\\$collection = null})",
		"description": "Returns the next item in the collection if available",
		"scope": "php"
	},
	"$page->nextAll()": {
		"prefix": "->nextAll()",
		"body": "->nextAll(${1:\\$collection = null})",
		"description": "Returns the end of the collection starting after the current item",
		"scope": "php"
	},
	"$page->nextListed()": {
		"prefix": "->nextListed()",
		"body": "->nextListed(${1:\\$collection = null})",
		"description": "Returns the next listed page if it exists",
		"scope": "php"
	},
	"$page->nextUnlisted()": {
		"prefix": "->nextUnlisted()",
		"body": "->nextUnlisted(${1:\\$collection = null})",
		"description": "Returns the next unlisted page if it exists",
		"scope": "php"
	},
	"$page->num()": {
		"prefix": "->num()",
		"body": "->num()",
		"description": "Returns the sorting number",
		"scope": "php"
	},
	"$page->panel()": {
		"prefix": "->panel()",
		"body": "->panel()",
		"description": "Returns the panel info object",
		"scope": "php"
	},
	"$page->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent Page object",
		"scope": "php"
	},
	"$page->parentId()": {
		"prefix": "->parentId()",
		"body": "->parentId()",
		"description": "Returns the parent id, if a parent exists",
		"scope": "php"
	},
	"$page->parentModel()": {
		"prefix": "->parentModel()",
		"body": "->parentModel()",
		"description": "Returns the parent model, which can either be another Page or the Site",
		"scope": "php"
	},
	"$page->parents()": {
		"prefix": "->parents()",
		"body": "->parents()",
		"description": "Returns a list of all parents and their parents recursively",
		"scope": "php"
	},
	"$page->permalink()": {
		"prefix": "->permalink()",
		"body": "->permalink()",
		"description": "Return the permanent URL to the page using its UUID",
		"scope": "php"
	},
	"$page->permissions()": {
		"prefix": "->permissions()",
		"body": "->permissions()",
		"description": "Returns the permissions object for this page",
		"scope": "php"
	},
	"$page->prev()": {
		"prefix": "->prev()",
		"body": "->prev(${1:\\$collection = null})",
		"description": "Returns the previous item in the collection if available",
		"scope": "php"
	},
	"$page->prevAll()": {
		"prefix": "->prevAll()",
		"body": "->prevAll(${1:\\$collection = null})",
		"description": "Returns the beginning of the collection before the current item",
		"scope": "php"
	},
	"$page->prevListed()": {
		"prefix": "->prevListed()",
		"body": "->prevListed(${1:\\$collection = null})",
		"description": "Returns the previous listed page",
		"scope": "php"
	},
	"$page->prevUnlisted()": {
		"prefix": "->prevUnlisted()",
		"body": "->prevUnlisted(${1:\\$collection = null})",
		"description": "Returns the previous unlisted page",
		"scope": "php"
	},
	"$page->previewUrl()": {
		"prefix": "->previewUrl()",
		"body": "->previewUrl()",
		"description": "Draft preview Url",
		"scope": "php"
	},
	"$page->publish()": {
		"prefix": "->publish()",
		"body": "->publish()",
		"description": "",
		"scope": "php"
	},
	"$page->purge()": {
		"prefix": "->purge()",
		"body": "->purge()",
		"description": "Clean internal caches",
		"scope": "php"
	},
	"$page->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$query = null}, ${2:\\$expect = null})",
		"description": "Creates a string query, starting from the model",
		"scope": "php"
	},
	"$page->readContent()": {
		"prefix": "->readContent()",
		"body": "->readContent(${1:\\$languageCode = null})",
		"description": "Read the content from the content file",
		"scope": "php"
	},
	"$page->render()": {
		"prefix": "->render()",
		"body": "->render(${1:\\$data = [ ]}, ${2:\\$contentType = 'html'})",
		"description": "Renders the page with the given data.",
		"scope": "php"
	},
	"$page->representation()": {
		"prefix": "->representation()",
		"body": "->representation(${1:\\$type})",
		"description": "",
		"scope": "php"
	},
	"$page->resortSiblingsAfterUnlisting()": {
		"prefix": "->resortSiblingsAfterUnlisting()",
		"body": "->resortSiblingsAfterUnlisting()",
		"description": "",
		"scope": "php"
	},
	"$page->root()": {
		"prefix": "->root()",
		"body": "->root()",
		"description": "Returns the absolute root to the page directory No matter if it exists or not.",
		"scope": "php"
	},
	"$page->save()": {
		"prefix": "->save()",
		"body": "->save(${1:\\$data = null}, ${2:\\$languageCode = null}, ${3:\\$overwrite = false})",
		"description": "Stores the content on disk",
		"scope": "php"
	},
	"$page->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Search all pages within the current page",
		"scope": "php"
	},
	"$page->setSite()": {
		"prefix": "->setSite()",
		"body": "->setSite(${1:\\$site = null})",
		"description": "Setter for the parent site object",
		"scope": "php"
	},
	"$page->siblings()": {
		"prefix": "->siblings()",
		"body": "->siblings(${1:\\$self = true})",
		"description": "Returns all sibling elements",
		"scope": "php"
	},
	"$page->site()": {
		"prefix": "->site()",
		"body": "->site()",
		"description": "Returns the parent Site instance",
		"scope": "php"
	},
	"$page->slug()": {
		"prefix": "->slug()",
		"body": "->slug(${1:\\$languageCode = null})",
		"description": "Returns the slug of the page",
		"scope": "php"
	},
	"$page->status()": {
		"prefix": "->status()",
		"body": "->status()",
		"description": "Returns the page status, which can be `draft`, `listed` or `unlisted`",
		"scope": "php"
	},
	"$page->template()": {
		"prefix": "->template()",
		"body": "->template()",
		"description": "Returns the final template",
		"scope": "php"
	},
	"$page->templateSiblings()": {
		"prefix": "->templateSiblings()",
		"body": "->templateSiblings(${1:\\$self = true})",
		"description": "Returns siblings with the same template",
		"scope": "php"
	},
	"$page->title()": {
		"prefix": "->title()",
		"body": "->title()",
		"description": "Returns the title field or the slug as fallback",
		"scope": "php"
	},
	"$page->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Converts the most important properties to array",
		"scope": "php"
	},
	"$page->toSafeString()": {
		"prefix": "->toSafeString()",
		"body": "->toSafeString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''})",
		"description": "String template builder with automatic HTML escaping",
		"scope": "php"
	},
	"$page->toString()": {
		"prefix": "->toString()",
		"body": "->toString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''}, ${4:\\$handler = 'template'})",
		"description": "String template builder",
		"scope": "php"
	},
	"$page->translation()": {
		"prefix": "->translation()",
		"body": "->translation(${1:\\$languageCode = null})",
		"description": "Returns a single translation by language code If no code is specified the current translation is returned",
		"scope": "php"
	},
	"$page->translations()": {
		"prefix": "->translations()",
		"body": "->translations()",
		"description": "Returns the translations collection",
		"scope": "php"
	},
	"$page->uid()": {
		"prefix": "->uid()",
		"body": "->uid()",
		"description": "Returns the UID of the page.",
		"scope": "php"
	},
	"$page->unpublish()": {
		"prefix": "->unpublish()",
		"body": "->unpublish()",
		"description": "Convert a page from listed or unlisted to draft.",
		"scope": "php"
	},
	"$page->update()": {
		"prefix": "->update()",
		"body": "->update(${1:\\$input = null}, ${2:\\$languageCode = null}, ${3:\\$validate = false})",
		"description": "Updates the page data",
		"scope": "php"
	},
	"$page->uri()": {
		"prefix": "->uri()",
		"body": "->uri(${1:\\$languageCode = null})",
		"description": "The uri is the same as the id, except that it will be translated in multi-language setups",
		"scope": "php"
	},
	"$page->url()": {
		"prefix": "->url()",
		"body": "->url(${1:\\$options = null})",
		"description": "Returns the Url",
		"scope": "php"
	},
	"$page->urlForLanguage()": {
		"prefix": "->urlForLanguage()",
		"body": "->urlForLanguage(${1:\\$language = null}, ${2:\\$options = null})",
		"description": "Builds the Url for a specific language",
		"scope": "php"
	},
	"$page->uuid()": {
		"prefix": "->uuid()",
		"body": "->uuid()",
		"description": "Returns the page’s Unique ID.",
		"scope": "php"
	},
	"$page->videos()": {
		"prefix": "->videos()",
		"body": "->videos()",
		"description": "Filters the Files collection by type videos",
		"scope": "php"
	},
	"$page->writeContent()": {
		"prefix": "->writeContent()",
		"body": "->writeContent(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Low level data writer method to store the given data on disk or anywhere else",
		"scope": "php"
	},
	"$pages->add()": {
		"prefix": "->add()",
		"body": "->add(${1:\\$object})",
		"description": "Adds a single page or an entire second collection to the current collection",
		"scope": "php"
	},
	"$pages->append()": {
		"prefix": "->append()",
		"body": "->append(${1:\\$args = null})",
		"description": "Appends an element to the data array",
		"scope": "php"
	},
	"$pages->audio()": {
		"prefix": "->audio()",
		"body": "->audio()",
		"description": "Returns all audio files of all children",
		"scope": "php"
	},
	"$pages->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$pages->children()": {
		"prefix": "->children()",
		"body": "->children()",
		"description": "Returns all children for each page in the array",
		"scope": "php"
	},
	"$pages->chunk()": {
		"prefix": "->chunk()",
		"body": "->chunk(${1:\\$size})",
		"description": "Creates chunks of the same size.",
		"scope": "php"
	},
	"$pages->clone()": {
		"prefix": "->clone()",
		"body": "->clone()",
		"description": "Returns a cloned instance of the collection",
		"scope": "php"
	},
	"$pages->code()": {
		"prefix": "->code()",
		"body": "->code()",
		"description": "Returns all code files of all children",
		"scope": "php"
	},
	"$pages->count()": {
		"prefix": "->count()",
		"body": "->count()",
		"description": "Counts all elements",
		"scope": "php"
	},
	"$pages->current()": {
		"prefix": "->current()",
		"body": "->current()",
		"description": "Returns the current element",
		"scope": "php"
	},
	"$pages->data()": {
		"prefix": "->data()",
		"body": "->data(${1:\\$data = null})",
		"description": "Getter and setter for the data",
		"scope": "php"
	},
	"$pages->documents()": {
		"prefix": "->documents()",
		"body": "->documents()",
		"description": "Returns all documents of all children",
		"scope": "php"
	},
	"$pages->drafts()": {
		"prefix": "->drafts()",
		"body": "->drafts()",
		"description": "Fetch all drafts for all pages in the collection",
		"scope": "php"
	},
	"$pages->empty()": {
		"prefix": "->empty()",
		"body": "->empty()",
		"description": "Clone and remove all elements from the collection",
		"scope": "php"
	},
	"$pages->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$items})",
		"description": "Adds all elements to the collection",
		"scope": "php"
	},
	"$pages->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns all files of all children",
		"scope": "php"
	},
	"$pages->filter()": {
		"prefix": "->filter()",
		"body": "->filter(${1:\\$field}, ${2:\\$args = null})",
		"description": "Filters elements by one of the predefined filter methods, by a custom filter function or an array of filters",
		"scope": "php"
	},
	"$pages->filterBy()": {
		"prefix": "->filterBy()",
		"body": "->filterBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::filter`",
		"scope": "php"
	},
	"$pages->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$keys = null})",
		"description": "Find one or multiple elements by id",
		"scope": "php"
	},
	"$pages->findBy()": {
		"prefix": "->findBy()",
		"body": "->findBy(${1:\\$attribute}, ${2:\\$value})",
		"description": "Find a single element by an attribute and its value",
		"scope": "php"
	},
	"$pages->findByKey()": {
		"prefix": "->findByKey()",
		"body": "->findByKey(${1:\\$key = null})",
		"description": "Finds a page by its ID or URI",
		"scope": "php"
	},
	"$pages->findOpen()": {
		"prefix": "->findOpen()",
		"body": "->findOpen()",
		"description": "Finds the currently open page",
		"scope": "php"
	},
	"$pages->first()": {
		"prefix": "->first()",
		"body": "->first()",
		"description": "Returns the first element",
		"scope": "php"
	},
	"$pages->flip()": {
		"prefix": "->flip()",
		"body": "->flip()",
		"description": "Returns the elements in reverse order",
		"scope": "php"
	},
	"$pages->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key}, ${2:\\$default = null})",
		"description": "Custom getter that is able to find extension pages",
		"scope": "php"
	},
	"$pages->getAttribute()": {
		"prefix": "->getAttribute()",
		"body": "->getAttribute(${1:\\$item}, ${2:\\$attribute}, ${3:\\$split = false}, ${4:\\$related = null})",
		"description": "Extracts an attribute value from the given element in the collection. This is useful if elements in the collection might be objects, arrays or anything else and you need to get the value independently from that. We use it for `filter`.",
		"scope": "php"
	},
	"$pages->getIterator()": {
		"prefix": "->getIterator()",
		"body": "->getIterator()",
		"description": "Get an iterator for the items.",
		"scope": "php"
	},
	"$pages->group()": {
		"prefix": "->group()",
		"body": "->group(${1:\\$field}, ${2:\\$i = true})",
		"description": "Groups the items by a given field or callback. Returns a collection with an item for each group and a collection for each group.",
		"scope": "php"
	},
	"$pages->groupBy()": {
		"prefix": "->groupBy()",
		"body": "->groupBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::group`",
		"scope": "php"
	},
	"$pages->has()": {
		"prefix": "->has()",
		"body": "->has(${1:\\$key})",
		"description": "Checks if the given object or id is in the collection",
		"scope": "php"
	},
	"$pages->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$pages->images()": {
		"prefix": "->images()",
		"body": "->images()",
		"description": "Returns all images of all children",
		"scope": "php"
	},
	"$pages->index()": {
		"prefix": "->index()",
		"body": "->index(${1:\\$drafts = false})",
		"description": "Create a recursive flat index of all pages and subpages, etc.",
		"scope": "php"
	},
	"$pages->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$needle})",
		"description": "Correct position detection for objects.",
		"scope": "php"
	},
	"$pages->intersection()": {
		"prefix": "->intersection()",
		"body": "->intersection(${1:\\$other})",
		"description": "Returns a Collection with the intersection of the given elements",
		"scope": "php"
	},
	"$pages->intersects()": {
		"prefix": "->intersects()",
		"body": "->intersects(${1:\\$other})",
		"description": "Checks if there is an intersection between the given collection and this collection",
		"scope": "php"
	},
	"$pages->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the number of elements is zero",
		"scope": "php"
	},
	"$pages->isEven()": {
		"prefix": "->isEven()",
		"body": "->isEven()",
		"description": "Checks if the number of elements is even",
		"scope": "php"
	},
	"$pages->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the number of elements is more than zero",
		"scope": "php"
	},
	"$pages->isOdd()": {
		"prefix": "->isOdd()",
		"body": "->isOdd()",
		"description": "Checks if the number of elements is odd",
		"scope": "php"
	},
	"$pages->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the current key",
		"scope": "php"
	},
	"$pages->keyOf()": {
		"prefix": "->keyOf()",
		"body": "->keyOf(${1:\\$needle})",
		"description": "Tries to find the key for the given element",
		"scope": "php"
	},
	"$pages->keys()": {
		"prefix": "->keys()",
		"body": "->keys()",
		"description": "Returns an array of all keys",
		"scope": "php"
	},
	"$pages->last()": {
		"prefix": "->last()",
		"body": "->last()",
		"description": "Returns the last element",
		"scope": "php"
	},
	"$pages->limit()": {
		"prefix": "->limit()",
		"body": "->limit(${1:\\$limit})",
		"description": "Returns a new object with a limited number of elements",
		"scope": "php"
	},
	"$pages->listed()": {
		"prefix": "->listed()",
		"body": "->listed()",
		"description": "Returns all listed pages in the collection",
		"scope": "php"
	},
	"$pages->map()": {
		"prefix": "->map()",
		"body": "->map(${1:\\$callback})",
		"description": "Map a function to each element",
		"scope": "php"
	},
	"$pages->merge()": {
		"prefix": "->merge()",
		"body": "->merge(${1:\\$args = null})",
		"description": "Include all given items in the collection",
		"scope": "php"
	},
	"$pages->next()": {
		"prefix": "->next()",
		"body": "->next()",
		"description": "Moves the cursor to the next element and returns it",
		"scope": "php"
	},
	"$pages->not()": {
		"prefix": "->not()",
		"body": "->not(${1:\\$keys = null})",
		"description": "Returns a Collection without the given element(s)",
		"scope": "php"
	},
	"$pages->notTemplate()": {
		"prefix": "->notTemplate()",
		"body": "->notTemplate(${1:\\$templates})",
		"description": "Filter all pages by excluding the given template",
		"scope": "php"
	},
	"$pages->nth()": {
		"prefix": "->nth()",
		"body": "->nth(${1:\\$n})",
		"description": "Returns the nth element from the collection",
		"scope": "php"
	},
	"$pages->nums()": {
		"prefix": "->nums()",
		"body": "->nums()",
		"description": "Returns an array with all page numbers",
		"scope": "php"
	},
	"$pages->offset()": {
		"prefix": "->offset()",
		"body": "->offset(${1:\\$offset})",
		"description": "Returns a new object starting from the given offset",
		"scope": "php"
	},
	"$pages->paginate()": {
		"prefix": "->paginate()",
		"body": "->paginate(${1:\\$arguments = null})",
		"description": "Add pagination and return a sliced set of data.",
		"scope": "php"
	},
	"$pages->pagination()": {
		"prefix": "->pagination()",
		"body": "->pagination()",
		"description": "Get the previously added pagination object",
		"scope": "php"
	},
	"$pages->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$pages->pluck()": {
		"prefix": "->pluck()",
		"body": "->pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
		"description": "Extracts all values for a single field into a new array",
		"scope": "php"
	},
	"$pages->prepend()": {
		"prefix": "->prepend()",
		"body": "->prepend(${1:\\$args = null})",
		"description": "Prepends an element to the data array",
		"scope": "php"
	},
	"$pages->prev()": {
		"prefix": "->prev()",
		"body": "->prev()",
		"description": "Moves the cursor to the previous element and returns it",
		"scope": "php"
	},
	"$pages->published()": {
		"prefix": "->published()",
		"body": "->published()",
		"description": "",
		"scope": "php"
	},
	"$pages->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$arguments = [ ]})",
		"description": "Runs a combination of filter, sort, not, offset, limit, search and paginate on the collection.",
		"scope": "php"
	},
	"$pages->random()": {
		"prefix": "->random()",
		"body": "->random(${1:\\$count = 1}, ${2:\\$shuffle = false})",
		"description": "Returns a new collection consisting of random elements, from the original collection, shuffled or ordered",
		"scope": "php"
	},
	"$pages->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes an object",
		"scope": "php"
	},
	"$pages->rewind()": {
		"prefix": "->rewind()",
		"body": "->rewind()",
		"description": "Moves the cursor to the first element",
		"scope": "php"
	},
	"$pages->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Searches the collection",
		"scope": "php"
	},
	"$pages->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Adds a new element to the collection",
		"scope": "php"
	},
	"$pages->shuffle()": {
		"prefix": "->shuffle()",
		"body": "->shuffle()",
		"description": "Shuffle all elements",
		"scope": "php"
	},
	"$pages->slice()": {
		"prefix": "->slice()",
		"body": "->slice(${1:\\$offset = 0}, ${2:\\$limit = null})",
		"description": "Returns a slice of the object",
		"scope": "php"
	},
	"$pages->sort()": {
		"prefix": "->sort()",
		"body": "->sort()",
		"description": "Sorts the elements by any number of fields",
		"scope": "php"
	},
	"$pages->sortBy()": {
		"prefix": "->sortBy()",
		"body": "->sortBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::sort`",
		"scope": "php"
	},
	"$pages->template()": {
		"prefix": "->template()",
		"body": "->template(${1:\\$templates})",
		"description": "Filter all pages by the given template",
		"scope": "php"
	},
	"$pages->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray(${1:\\$map = null})",
		"description": "Converts all objects in the collection to an array. This can also take a callback function to further modify the array result.",
		"scope": "php"
	},
	"$pages->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the object into a JSON string",
		"scope": "php"
	},
	"$pages->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Converts the object to a string",
		"scope": "php"
	},
	"$pages->unlisted()": {
		"prefix": "->unlisted()",
		"body": "->unlisted()",
		"description": "Returns all unlisted pages in the collection",
		"scope": "php"
	},
	"$pages->valid()": {
		"prefix": "->valid()",
		"body": "->valid()",
		"description": "Checks if the current element is valid",
		"scope": "php"
	},
	"$pages->values()": {
		"prefix": "->values()",
		"body": "->values(${1:\\$map = null})",
		"description": "Returns a non-associative array with all values. If a mapping Closure is passed, all values are processed by the Closure.",
		"scope": "php"
	},
	"$pages->videos()": {
		"prefix": "->videos()",
		"body": "->videos()",
		"description": "Returns all video files of all children",
		"scope": "php"
	},
	"$pages->when()": {
		"prefix": "->when()",
		"body": "->when(${1:\\$condition}, ${2:\\$callback}, ${3:\\$fallback = null})",
		"description": "The when method only executes the given Closure when the first parameter is true. If the first parameter is false, the Closure will not be executed.",
		"scope": "php"
	},
	"$pages->without()": {
		"prefix": "->without()",
		"body": "->without(${1:\\$keys = null})",
		"description": "Alias for $this-&gt;not()",
		"scope": "php"
	},
	"$file->apiUrl()": {
		"prefix": "->apiUrl()",
		"body": "->apiUrl(${1:\\$relative = false})",
		"description": "Returns the url to api endpoint",
		"scope": "php"
	},
	"$file->asset()": {
		"prefix": "->asset()",
		"body": "->asset(${1:\\$props = null})",
		"description": "Returns the file asset object",
		"scope": "php"
	},
	"$file->base64()": {
		"prefix": "->base64()",
		"body": "->base64()",
		"description": "Returns the file content as base64 encoded string",
		"scope": "php"
	},
	"$file->blueprint()": {
		"prefix": "->blueprint()",
		"body": "->blueprint()",
		"description": "Returns the FileBlueprint object for the file",
		"scope": "php"
	},
	"$file->blueprints()": {
		"prefix": "->blueprints()",
		"body": "->blueprints(${1:\\$inSection = null})",
		"description": "Returns an array with all blueprints that are available",
		"scope": "php"
	},
	"$file->blur()": {
		"prefix": "->blur()",
		"body": "->blur(${1:\\$pixels = true})",
		"description": "Blurs the image by the given amount of pixels",
		"scope": "php"
	},
	"$file->bw()": {
		"prefix": "->bw()",
		"body": "->bw()",
		"description": "Converts the image to black and white",
		"scope": "php"
	},
	"$file->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$file->changeName()": {
		"prefix": "->changeName()",
		"body": "->changeName(${1:\\$name}, ${2:\\$sanitize = true})",
		"description": "Renames the file without touching the extension The store is used to actually execute this.",
		"scope": "php"
	},
	"$file->changeSort()": {
		"prefix": "->changeSort()",
		"body": "->changeSort(${1:\\$sort})",
		"description": "Changes the file’s sorting number in the meta file",
		"scope": "php"
	},
	"$file->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]})",
		"description": "Creates an instance with the same initial properties.",
		"scope": "php"
	},
	"$file->content()": {
		"prefix": "->content()",
		"body": "->content(${1:\\$languageCode = null})",
		"description": "Returns the content",
		"scope": "php"
	},
	"$file->contentFile()": {
		"prefix": "->contentFile()",
		"body": "->contentFile(${1:\\$languageCode = null}, ${2:\\$force = false})",
		"description": "Returns the absolute path to the content file",
		"scope": "php"
	},
	"$file->contentFileData()": {
		"prefix": "->contentFileData()",
		"body": "->contentFileData(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Store the template in addition to the other content.",
		"scope": "php"
	},
	"$file->contentFileDirectory()": {
		"prefix": "->contentFileDirectory()",
		"body": "->contentFileDirectory()",
		"description": "Returns the directory in which the content file is located",
		"scope": "php"
	},
	"$file->contentFileExtension()": {
		"prefix": "->contentFileExtension()",
		"body": "->contentFileExtension()",
		"description": "Returns the extension of the content file",
		"scope": "php"
	},
	"$file->contentFileName()": {
		"prefix": "->contentFileName()",
		"body": "->contentFileName()",
		"description": "Filename for the content file",
		"scope": "php"
	},
	"$file->contentFiles()": {
		"prefix": "->contentFiles()",
		"body": "->contentFiles()",
		"description": "Returns an array with all content files",
		"scope": "php"
	},
	"$file->copy()": {
		"prefix": "->copy()",
		"body": "->copy(${1:\\$page})",
		"description": "Copy the file to the given page",
		"scope": "php"
	},
	"$file->crop()": {
		"prefix": "->crop()",
		"body": "->crop(${1:\\$width}, ${2:\\$height = null}, ${3:\\$options = null})",
		"description": "Crops the image by the given width and height",
		"scope": "php"
	},
	"$file->dataUri()": {
		"prefix": "->dataUri()",
		"body": "->dataUri(${1:\\$base64 = true})",
		"description": "Returns the file as data uri",
		"scope": "php"
	},
	"$file->decrement()": {
		"prefix": "->decrement()",
		"body": "->decrement(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$min = 0})",
		"description": "Decrement a given field value",
		"scope": "php"
	},
	"$file->delete()": {
		"prefix": "->delete()",
		"body": "->delete()",
		"description": "Deletes the file. The store is used to manipulate the filesystem or whatever you prefer.",
		"scope": "php"
	},
	"$image->dimensions()": {
		"prefix": "->dimensions()",
		"body": "->dimensions()",
		"description": "Returns the dimensions of the file if possible",
		"scope": "php"
	},
	"$file->download()": {
		"prefix": "->download()",
		"body": "->download(${1:\\$filename = null})",
		"description": "",
		"scope": "php"
	},
	"$file->errors()": {
		"prefix": "->errors()",
		"body": "->errors()",
		"description": "Returns all content validation errors",
		"scope": "php"
	},
	"$image->exif()": {
		"prefix": "->exif()",
		"body": "->exif()",
		"description": "Returns the exif object for this file (if image)",
		"scope": "php"
	},
	"$file->exists()": {
		"prefix": "->exists()",
		"body": "->exists()",
		"description": "Checks if the file exists on disk",
		"scope": "php"
	},
	"$file->extension()": {
		"prefix": "->extension()",
		"body": "->extension()",
		"description": "Returns the current lowercase extension (without .)",
		"scope": "php"
	},
	"$file->filename()": {
		"prefix": "->filename()",
		"body": "->filename()",
		"description": "Returns the filename with extension",
		"scope": "php"
	},
	"$file->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns the parent Files collection",
		"scope": "php"
	},
	"$file->grayscale()": {
		"prefix": "->grayscale()",
		"body": "->grayscale()",
		"description": "Alias for File::bw()",
		"scope": "php"
	},
	"$file->greyscale()": {
		"prefix": "->greyscale()",
		"body": "->greyscale()",
		"description": "Alias for File::bw()",
		"scope": "php"
	},
	"$file->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$file->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$file->hasNext()": {
		"prefix": "->hasNext()",
		"body": "->hasNext(${1:\\$collection = null})",
		"description": "Checks if there’s a next item in the collection",
		"scope": "php"
	},
	"$file->hasPrev()": {
		"prefix": "->hasPrev()",
		"body": "->hasPrev(${1:\\$collection = null})",
		"description": "Checks if there’s a previous item in the collection",
		"scope": "php"
	},
	"$file->hash()": {
		"prefix": "->hash()",
		"body": "->hash()",
		"description": "Returns a md5 hash of the root",
		"scope": "php"
	},
	"$file->header()": {
		"prefix": "->header()",
		"body": "->header(${1:\\$send = true})",
		"description": "Sends an appropriate header for the asset",
		"scope": "php"
	},
	"$image->height()": {
		"prefix": "->height()",
		"body": "->height()",
		"description": "Returns the height of the asset",
		"scope": "php"
	},
	"$file->html()": {
		"prefix": "->html()",
		"body": "->html(${1:\\$attr = [ ]})",
		"description": "Converts the file to html",
		"scope": "php"
	},
	"$file->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "Returns the id",
		"scope": "php"
	},
	"$image->imagesize()": {
		"prefix": "->imagesize()",
		"body": "->imagesize()",
		"description": "Returns the PHP imagesize array",
		"scope": "php"
	},
	"$file->increment()": {
		"prefix": "->increment()",
		"body": "->increment(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$max = null})",
		"description": "Increment a given field value",
		"scope": "php"
	},
	"$file->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$collection = null})",
		"description": "Returns the position / index in the collection",
		"scope": "php"
	},
	"$file->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$file})",
		"description": "Compares the current object with the given file object",
		"scope": "php"
	},
	"$file->isFirst()": {
		"prefix": "->isFirst()",
		"body": "->isFirst(${1:\\$collection = null})",
		"description": "Checks if the item is the first in the collection",
		"scope": "php"
	},
	"$image->isLandscape()": {
		"prefix": "->isLandscape()",
		"body": "->isLandscape()",
		"description": "Checks if the dimensions of the asset are landscape",
		"scope": "php"
	},
	"$file->isLast()": {
		"prefix": "->isLast()",
		"body": "->isLast(${1:\\$collection = null})",
		"description": "Checks if the item is the last in the collection",
		"scope": "php"
	},
	"$file->isLocked()": {
		"prefix": "->isLocked()",
		"body": "->isLocked()",
		"description": "Checks if the model is locked for the current user",
		"scope": "php"
	},
	"$file->isNth()": {
		"prefix": "->isNth()",
		"body": "->isNth(${1:\\$n}, ${2:\\$collection = null})",
		"description": "Checks if the item is at a certain position",
		"scope": "php"
	},
	"$image->isPortrait()": {
		"prefix": "->isPortrait()",
		"body": "->isPortrait()",
		"description": "Checks if the dimensions of the asset are portrait",
		"scope": "php"
	},
	"$file->isReadable()": {
		"prefix": "->isReadable()",
		"body": "->isReadable()",
		"description": "Check if the file can be read by the current user",
		"scope": "php"
	},
	"$file->isResizable()": {
		"prefix": "->isResizable()",
		"body": "->isResizable()",
		"description": "Checks if the file is a resizable image",
		"scope": "php"
	},
	"$image->isSquare()": {
		"prefix": "->isSquare()",
		"body": "->isSquare()",
		"description": "Checks if the dimensions of the asset are square",
		"scope": "php"
	},
	"$file->isValid()": {
		"prefix": "->isValid()",
		"body": "->isValid()",
		"description": "Checks if the data has any errors",
		"scope": "php"
	},
	"$file->isViewable()": {
		"prefix": "->isViewable()",
		"body": "->isViewable()",
		"description": "Checks if a preview can be displayed for the file in the panel or in the frontend",
		"scope": "php"
	},
	"$file->isWritable()": {
		"prefix": "->isWritable()",
		"body": "->isWritable()",
		"description": "Checks if the file is writable",
		"scope": "php"
	},
	"$file->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the app instance",
		"scope": "php"
	},
	"$file->lock()": {
		"prefix": "->lock()",
		"body": "->lock()",
		"description": "Returns the lock object for this model",
		"scope": "php"
	},
	"$file->match()": {
		"prefix": "->match()",
		"body": "->match(${1:\\$rules})",
		"description": "Runs a set of validations on the file object (mainly for images).",
		"scope": "php"
	},
	"$file->mediaHash()": {
		"prefix": "->mediaHash()",
		"body": "->mediaHash()",
		"description": "Creates a unique media hash",
		"scope": "php"
	},
	"$file->mediaRoot()": {
		"prefix": "->mediaRoot()",
		"body": "->mediaRoot()",
		"description": "Returns the absolute path to the file in the public media folder",
		"scope": "php"
	},
	"$file->mediaToken()": {
		"prefix": "->mediaToken()",
		"body": "->mediaToken()",
		"description": "Creates a non-guessable token string for this file",
		"scope": "php"
	},
	"$file->mediaUrl()": {
		"prefix": "->mediaUrl()",
		"body": "->mediaUrl()",
		"description": "Returns the absolute Url to the file in the public media folder",
		"scope": "php"
	},
	"$file->mime()": {
		"prefix": "->mime()",
		"body": "->mime()",
		"description": "Detects the mime type of the file",
		"scope": "php"
	},
	"$file->model()": {
		"prefix": "->model()",
		"body": "->model()",
		"description": "Returns the parent file model, which uses this instance as proxied file asset",
		"scope": "php"
	},
	"$file->modified()": {
		"prefix": "->modified()",
		"body": "->modified(${1:\\$format = null}, ${2:\\$handler = null}, ${3:\\$languageCode = null})",
		"description": "Get the file’s last modification time.",
		"scope": "php"
	},
	"$file->move()": {
		"prefix": "->move()",
		"body": "->move(${1:\\$newRoot}, ${2:\\$overwrite = false})",
		"description": "Move the file to a new location",
		"scope": "php"
	},
	"$file->name()": {
		"prefix": "->name()",
		"body": "->name()",
		"description": "Getter for the name of the file without the extension",
		"scope": "php"
	},
	"$file->next()": {
		"prefix": "->next()",
		"body": "->next(${1:\\$collection = null})",
		"description": "Returns the next item in the collection if available",
		"scope": "php"
	},
	"$file->nextAll()": {
		"prefix": "->nextAll()",
		"body": "->nextAll(${1:\\$collection = null})",
		"description": "Returns the end of the collection starting after the current item",
		"scope": "php"
	},
	"$file->niceSize()": {
		"prefix": "->niceSize()",
		"body": "->niceSize(${1:\\$locale = null})",
		"description": "Returns the file size in a human-readable format",
		"scope": "php"
	},
	"$image->orientation()": {
		"prefix": "->orientation()",
		"body": "->orientation()",
		"description": "Returns the orientation as string `landscape` | `portrait` | `square`",
		"scope": "php"
	},
	"$file->page()": {
		"prefix": "->page()",
		"body": "->page()",
		"description": "Returns the parent Page object",
		"scope": "php"
	},
	"$file->panel()": {
		"prefix": "->panel()",
		"body": "->panel()",
		"description": "Returns the panel info object",
		"scope": "php"
	},
	"$file->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent Model object",
		"scope": "php"
	},
	"$file->parentId()": {
		"prefix": "->parentId()",
		"body": "->parentId()",
		"description": "Returns the parent id if a parent exists",
		"scope": "php"
	},
	"$file->parents()": {
		"prefix": "->parents()",
		"body": "->parents()",
		"description": "Returns a collection of all parent pages",
		"scope": "php"
	},
	"$file->permalink()": {
		"prefix": "->permalink()",
		"body": "->permalink()",
		"description": "Return the permanent URL to the file using its UUID",
		"scope": "php"
	},
	"$file->permissions()": {
		"prefix": "->permissions()",
		"body": "->permissions()",
		"description": "Returns the permissions object for this file",
		"scope": "php"
	},
	"$file->prev()": {
		"prefix": "->prev()",
		"body": "->prev(${1:\\$collection = null})",
		"description": "Returns the previous item in the collection if available",
		"scope": "php"
	},
	"$file->prevAll()": {
		"prefix": "->prevAll()",
		"body": "->prevAll(${1:\\$collection = null})",
		"description": "Returns the beginning of the collection before the current item",
		"scope": "php"
	},
	"$file->previewUrl()": {
		"prefix": "->previewUrl()",
		"body": "->previewUrl()",
		"description": "Simplified File URL that uses the parent Page URL and the filename as a more stable alternative for the media URLs.",
		"scope": "php"
	},
	"$file->publish()": {
		"prefix": "->publish()",
		"body": "->publish()",
		"description": "Move the file to the public media folder if it’s not already there.",
		"scope": "php"
	},
	"$file->quality()": {
		"prefix": "->quality()",
		"body": "->quality(${1:\\$quality})",
		"description": "Sets the JPEG compression quality",
		"scope": "php"
	},
	"$file->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$query = null}, ${2:\\$expect = null})",
		"description": "Creates a string query, starting from the model",
		"scope": "php"
	},
	"$image->ratio()": {
		"prefix": "->ratio()",
		"body": "->ratio()",
		"description": "Returns the ratio of the asset",
		"scope": "php"
	},
	"$file->read()": {
		"prefix": "->read()",
		"body": "->read()",
		"description": "Reads the file content and returns it.",
		"scope": "php"
	},
	"$file->readContent()": {
		"prefix": "->readContent()",
		"body": "->readContent(${1:\\$languageCode = null})",
		"description": "Read the content from the content file",
		"scope": "php"
	},
	"$file->realpath()": {
		"prefix": "->realpath()",
		"body": "->realpath()",
		"description": "Returns the absolute path to the file",
		"scope": "php"
	},
	"$file->rename()": {
		"prefix": "->rename()",
		"body": "->rename(${1:\\$newName}, ${2:\\$overwrite = false})",
		"description": "Changes the name of the file without touching the extension",
		"scope": "php"
	},
	"$file->replace()": {
		"prefix": "->replace()",
		"body": "->replace(${1:\\$source})",
		"description": "Replaces the file. The source must be an absolute path to a file or a Url.",
		"scope": "php"
	},
	"$file->resize()": {
		"prefix": "->resize()",
		"body": "->resize(${1:\\$width = null}, ${2:\\$height = null}, ${3:\\$quality = null})",
		"description": "Resizes the file with the given width and height while keeping the aspect ratio.",
		"scope": "php"
	},
	"$file->root()": {
		"prefix": "->root()",
		"body": "->root()",
		"description": "Returns the absolute root to the file",
		"scope": "php"
	},
	"$file->sanitizeContents()": {
		"prefix": "->sanitizeContents()",
		"body": "->sanitizeContents(${1:\\$typeLazy = false})",
		"description": "Sanitizes the file contents depending on the file type by overwriting the file with the sanitized version",
		"scope": "php"
	},
	"$file->save()": {
		"prefix": "->save()",
		"body": "->save(${1:\\$data = null}, ${2:\\$languageCode = null}, ${3:\\$overwrite = false})",
		"description": "Stores the content on disk",
		"scope": "php"
	},
	"$file->setSite()": {
		"prefix": "->setSite()",
		"body": "->setSite(${1:\\$site = null})",
		"description": "Setter for the parent site object",
		"scope": "php"
	},
	"$file->sha1()": {
		"prefix": "->sha1()",
		"body": "->sha1()",
		"description": "Returns the sha1 hash of the file",
		"scope": "php"
	},
	"$file->siblings()": {
		"prefix": "->siblings()",
		"body": "->siblings(${1:\\$self = true})",
		"description": "Returns all sibling elements",
		"scope": "php"
	},
	"$file->site()": {
		"prefix": "->site()",
		"body": "->site()",
		"description": "Returns the parent Site object",
		"scope": "php"
	},
	"$file->size()": {
		"prefix": "->size()",
		"body": "->size()",
		"description": "Returns the raw size of the file",
		"scope": "php"
	},
	"$file->srcset()": {
		"prefix": "->srcset()",
		"body": "->srcset(${1:\\$sizes = null})",
		"description": "Create a srcset definition for the given sizes Sizes can be defined as a simple array. They can also be set up in the config with the thumbs.srcsets option.",
		"scope": "php"
	},
	"$file->template()": {
		"prefix": "->template()",
		"body": "->template()",
		"description": "Returns the final template",
		"scope": "php"
	},
	"$file->templateSiblings()": {
		"prefix": "->templateSiblings()",
		"body": "->templateSiblings(${1:\\$self = true})",
		"description": "Returns siblings with the same template",
		"scope": "php"
	},
	"$file->thumb()": {
		"prefix": "->thumb()",
		"body": "->thumb(${1:\\$options = null})",
		"description": "Creates a modified version of images The media manager takes care of generating those modified versions and putting them in the right place. This is normally the `/media` folder of your installation, but could potentially also be a CDN or any other place.",
		"scope": "php"
	},
	"$file->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Extended info for the array export by injecting the information from the asset.",
		"scope": "php"
	},
	"$file->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the entire file array into a json string",
		"scope": "php"
	},
	"$file->toSafeString()": {
		"prefix": "->toSafeString()",
		"body": "->toSafeString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''})",
		"description": "String template builder with automatic HTML escaping",
		"scope": "php"
	},
	"$file->toString()": {
		"prefix": "->toString()",
		"body": "->toString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''}, ${4:\\$handler = 'template'})",
		"description": "String template builder",
		"scope": "php"
	},
	"$file->translation()": {
		"prefix": "->translation()",
		"body": "->translation(${1:\\$languageCode = null})",
		"description": "Returns a single translation by language code If no code is specified the current translation is returned",
		"scope": "php"
	},
	"$file->translations()": {
		"prefix": "->translations()",
		"body": "->translations()",
		"description": "Returns the translations collection",
		"scope": "php"
	},
	"$file->type()": {
		"prefix": "->type()",
		"body": "->type()",
		"description": "Returns the file type",
		"scope": "php"
	},
	"$file->unpublish()": {
		"prefix": "->unpublish()",
		"body": "->unpublish(${1:\\$onlyMedia = false})",
		"description": "Remove all public versions of this file",
		"scope": "php"
	},
	"$file->update()": {
		"prefix": "->update()",
		"body": "->update(${1:\\$input = null}, ${2:\\$languageCode = null}, ${3:\\$validate = false})",
		"description": "Updates the model data",
		"scope": "php"
	},
	"$file->url()": {
		"prefix": "->url()",
		"body": "->url()",
		"description": "Returns the Url",
		"scope": "php"
	},
	"$file->uuid()": {
		"prefix": "->uuid()",
		"body": "->uuid()",
		"description": "Return the file’s Unique ID.",
		"scope": "php"
	},
	"$file->validateContents()": {
		"prefix": "->validateContents()",
		"body": "->validateContents(${1:\\$typeLazy = false})",
		"description": "Validates the file contents depending on the file type",
		"scope": "php"
	},
	"$image->width()": {
		"prefix": "->width()",
		"body": "->width()",
		"description": "Returns the width of the asset",
		"scope": "php"
	},
	"$file->write()": {
		"prefix": "->write()",
		"body": "->write(${1:\\$content})",
		"description": "Writes content to the file",
		"scope": "php"
	},
	"$file->writeContent()": {
		"prefix": "->writeContent()",
		"body": "->writeContent(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Low level data writer method to store the given data on disk or anywhere else",
		"scope": "php"
	},
	"$files->add()": {
		"prefix": "->add()",
		"body": "->add(${1:\\$object})",
		"description": "Adds a single file or an entire second collection to the current collection",
		"scope": "php"
	},
	"$files->append()": {
		"prefix": "->append()",
		"body": "->append(${1:\\$args = null})",
		"description": "Appends an element to the data array",
		"scope": "php"
	},
	"$files->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$files->changeSort()": {
		"prefix": "->changeSort()",
		"body": "->changeSort(${1:\\$files}, ${2:\\$offset = 0})",
		"description": "Sort all given files by the order in the array",
		"scope": "php"
	},
	"$files->chunk()": {
		"prefix": "->chunk()",
		"body": "->chunk(${1:\\$size})",
		"description": "Creates chunks of the same size.",
		"scope": "php"
	},
	"$files->clone()": {
		"prefix": "->clone()",
		"body": "->clone()",
		"description": "Returns a cloned instance of the collection",
		"scope": "php"
	},
	"$files->count()": {
		"prefix": "->count()",
		"body": "->count()",
		"description": "Counts all elements",
		"scope": "php"
	},
	"$files->current()": {
		"prefix": "->current()",
		"body": "->current()",
		"description": "Returns the current element",
		"scope": "php"
	},
	"$files->data()": {
		"prefix": "->data()",
		"body": "->data(${1:\\$data = null})",
		"description": "Getter and setter for the data",
		"scope": "php"
	},
	"$files->empty()": {
		"prefix": "->empty()",
		"body": "->empty()",
		"description": "Clone and remove all elements from the collection",
		"scope": "php"
	},
	"$files->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$items})",
		"description": "Adds all elements to the collection",
		"scope": "php"
	},
	"$files->filter()": {
		"prefix": "->filter()",
		"body": "->filter(${1:\\$field}, ${2:\\$args = null})",
		"description": "Filters elements by one of the predefined filter methods, by a custom filter function or an array of filters",
		"scope": "php"
	},
	"$files->filterBy()": {
		"prefix": "->filterBy()",
		"body": "->filterBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::filter`",
		"scope": "php"
	},
	"$files->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$keys = null})",
		"description": "Find one or multiple elements by id",
		"scope": "php"
	},
	"$files->findBy()": {
		"prefix": "->findBy()",
		"body": "->findBy(${1:\\$attribute}, ${2:\\$value})",
		"description": "Find a single element by an attribute and its value",
		"scope": "php"
	},
	"$files->findByKey()": {
		"prefix": "->findByKey()",
		"body": "->findByKey(${1:\\$key})",
		"description": "Finds a file by its filename",
		"scope": "php"
	},
	"$files->first()": {
		"prefix": "->first()",
		"body": "->first()",
		"description": "Returns the first element",
		"scope": "php"
	},
	"$files->flip()": {
		"prefix": "->flip()",
		"body": "->flip()",
		"description": "Returns the elements in reverse order",
		"scope": "php"
	},
	"$files->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key}, ${2:\\$default = null})",
		"description": "Getter",
		"scope": "php"
	},
	"$files->getAttribute()": {
		"prefix": "->getAttribute()",
		"body": "->getAttribute(${1:\\$item}, ${2:\\$attribute}, ${3:\\$split = false}, ${4:\\$related = null})",
		"description": "Extracts an attribute value from the given element in the collection. This is useful if elements in the collection might be objects, arrays or anything else and you need to get the value independently from that. We use it for `filter`.",
		"scope": "php"
	},
	"$files->getIterator()": {
		"prefix": "->getIterator()",
		"body": "->getIterator()",
		"description": "Get an iterator for the items.",
		"scope": "php"
	},
	"$files->group()": {
		"prefix": "->group()",
		"body": "->group(${1:\\$field}, ${2:\\$i = true})",
		"description": "Groups the items by a given field or callback. Returns a collection with an item for each group and a collection for each group.",
		"scope": "php"
	},
	"$files->groupBy()": {
		"prefix": "->groupBy()",
		"body": "->groupBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::group`",
		"scope": "php"
	},
	"$files->has()": {
		"prefix": "->has()",
		"body": "->has(${1:\\$key})",
		"description": "Checks if the given object or id is in the collection",
		"scope": "php"
	},
	"$files->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$files->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$needle})",
		"description": "Correct position detection for objects.",
		"scope": "php"
	},
	"$files->intersection()": {
		"prefix": "->intersection()",
		"body": "->intersection(${1:\\$other})",
		"description": "Returns a Collection with the intersection of the given elements",
		"scope": "php"
	},
	"$files->intersects()": {
		"prefix": "->intersects()",
		"body": "->intersects(${1:\\$other})",
		"description": "Checks if there is an intersection between the given collection and this collection",
		"scope": "php"
	},
	"$files->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the number of elements is zero",
		"scope": "php"
	},
	"$files->isEven()": {
		"prefix": "->isEven()",
		"body": "->isEven()",
		"description": "Checks if the number of elements is even",
		"scope": "php"
	},
	"$files->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the number of elements is more than zero",
		"scope": "php"
	},
	"$files->isOdd()": {
		"prefix": "->isOdd()",
		"body": "->isOdd()",
		"description": "Checks if the number of elements is odd",
		"scope": "php"
	},
	"$files->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the current key",
		"scope": "php"
	},
	"$files->keyOf()": {
		"prefix": "->keyOf()",
		"body": "->keyOf(${1:\\$needle})",
		"description": "Tries to find the key for the given element",
		"scope": "php"
	},
	"$files->keys()": {
		"prefix": "->keys()",
		"body": "->keys()",
		"description": "Returns an array of all keys",
		"scope": "php"
	},
	"$files->last()": {
		"prefix": "->last()",
		"body": "->last()",
		"description": "Returns the last element",
		"scope": "php"
	},
	"$files->limit()": {
		"prefix": "->limit()",
		"body": "->limit(${1:\\$limit})",
		"description": "Returns a new object with a limited number of elements",
		"scope": "php"
	},
	"$files->map()": {
		"prefix": "->map()",
		"body": "->map(${1:\\$callback})",
		"description": "Map a function to each element",
		"scope": "php"
	},
	"$files->next()": {
		"prefix": "->next()",
		"body": "->next()",
		"description": "Moves the cursor to the next element and returns it",
		"scope": "php"
	},
	"$files->niceSize()": {
		"prefix": "->niceSize()",
		"body": "->niceSize(${1:\\$locale = null})",
		"description": "Returns the file size for all files in the collection in a human-readable format",
		"scope": "php"
	},
	"$files->not()": {
		"prefix": "->not()",
		"body": "->not(${1:\\$keys = null})",
		"description": "Returns a Collection without the given element(s)",
		"scope": "php"
	},
	"$files->nth()": {
		"prefix": "->nth()",
		"body": "->nth(${1:\\$n})",
		"description": "Returns the nth element from the collection",
		"scope": "php"
	},
	"$files->offset()": {
		"prefix": "->offset()",
		"body": "->offset(${1:\\$offset})",
		"description": "Returns a new object starting from the given offset",
		"scope": "php"
	},
	"$files->paginate()": {
		"prefix": "->paginate()",
		"body": "->paginate(${1:\\$arguments = null})",
		"description": "Add pagination and return a sliced set of data.",
		"scope": "php"
	},
	"$files->pagination()": {
		"prefix": "->pagination()",
		"body": "->pagination()",
		"description": "Get the previously added pagination object",
		"scope": "php"
	},
	"$files->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$files->pluck()": {
		"prefix": "->pluck()",
		"body": "->pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
		"description": "Extracts all values for a single field into a new array",
		"scope": "php"
	},
	"$files->prepend()": {
		"prefix": "->prepend()",
		"body": "->prepend(${1:\\$args = null})",
		"description": "Prepends an element to the data array",
		"scope": "php"
	},
	"$files->prev()": {
		"prefix": "->prev()",
		"body": "->prev()",
		"description": "Moves the cursor to the previous element and returns it",
		"scope": "php"
	},
	"$files->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$arguments = [ ]})",
		"description": "Runs a combination of filter, sort, not, offset, limit, search and paginate on the collection.",
		"scope": "php"
	},
	"$files->random()": {
		"prefix": "->random()",
		"body": "->random(${1:\\$count = 1}, ${2:\\$shuffle = false})",
		"description": "Returns a new collection consisting of random elements, from the original collection, shuffled or ordered",
		"scope": "php"
	},
	"$files->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes an object",
		"scope": "php"
	},
	"$files->rewind()": {
		"prefix": "->rewind()",
		"body": "->rewind()",
		"description": "Moves the cursor to the first element",
		"scope": "php"
	},
	"$files->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Searches the collection",
		"scope": "php"
	},
	"$files->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Adds a new element to the collection",
		"scope": "php"
	},
	"$files->shuffle()": {
		"prefix": "->shuffle()",
		"body": "->shuffle()",
		"description": "Shuffle all elements",
		"scope": "php"
	},
	"$files->size()": {
		"prefix": "->size()",
		"body": "->size()",
		"description": "Returns the raw size for all files in the collection",
		"scope": "php"
	},
	"$files->slice()": {
		"prefix": "->slice()",
		"body": "->slice(${1:\\$offset = 0}, ${2:\\$limit = null})",
		"description": "Returns a slice of the object",
		"scope": "php"
	},
	"$files->sort()": {
		"prefix": "->sort()",
		"body": "->sort()",
		"description": "Sorts the elements by any number of fields",
		"scope": "php"
	},
	"$files->sortBy()": {
		"prefix": "->sortBy()",
		"body": "->sortBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::sort`",
		"scope": "php"
	},
	"$files->sorted()": {
		"prefix": "->sorted()",
		"body": "->sorted()",
		"description": "Returns the collection sorted by the sort number and the filename",
		"scope": "php"
	},
	"$files->template()": {
		"prefix": "->template()",
		"body": "->template(${1:\\$template})",
		"description": "Filter all files by the given template",
		"scope": "php"
	},
	"$files->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray(${1:\\$map = null})",
		"description": "Converts all objects in the collection to an array. This can also take a callback function to further modify the array result.",
		"scope": "php"
	},
	"$files->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the object into a JSON string",
		"scope": "php"
	},
	"$files->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Converts the object to a string",
		"scope": "php"
	},
	"$files->valid()": {
		"prefix": "->valid()",
		"body": "->valid()",
		"description": "Checks if the current element is valid",
		"scope": "php"
	},
	"$files->values()": {
		"prefix": "->values()",
		"body": "->values(${1:\\$map = null})",
		"description": "Returns a non-associative array with all values. If a mapping Closure is passed, all values are processed by the Closure.",
		"scope": "php"
	},
	"$files->when()": {
		"prefix": "->when()",
		"body": "->when(${1:\\$condition}, ${2:\\$callback}, ${3:\\$fallback = null})",
		"description": "The when method only executes the given Closure when the first parameter is true. If the first parameter is false, the Closure will not be executed.",
		"scope": "php"
	},
	"$files->without()": {
		"prefix": "->without()",
		"body": "->without(${1:\\$keys = null})",
		"description": "Alias for $this-&gt;not()",
		"scope": "php"
	},
	"$user->apiUrl()": {
		"prefix": "->apiUrl()",
		"body": "->apiUrl(${1:\\$relative = false})",
		"description": "Returns the url to the api endpoint",
		"scope": "php"
	},
	"$user->audio()": {
		"prefix": "->audio()",
		"body": "->audio()",
		"description": "Filters the Files collection by type audio",
		"scope": "php"
	},
	"$user->avatar()": {
		"prefix": "->avatar()",
		"body": "->avatar()",
		"description": "Returns the File object for the avatar or null",
		"scope": "php"
	},
	"$user->blueprint()": {
		"prefix": "->blueprint()",
		"body": "->blueprint()",
		"description": "Returns the UserBlueprint object",
		"scope": "php"
	},
	"$user->blueprints()": {
		"prefix": "->blueprints()",
		"body": "->blueprints(${1:\\$inSection = null})",
		"description": "Returns an array with all blueprints that are available",
		"scope": "php"
	},
	"$user->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$user->changeEmail()": {
		"prefix": "->changeEmail()",
		"body": "->changeEmail(${1:\\$email})",
		"description": "Changes the user email address",
		"scope": "php"
	},
	"$user->changeLanguage()": {
		"prefix": "->changeLanguage()",
		"body": "->changeLanguage(${1:\\$language})",
		"description": "Changes the user language",
		"scope": "php"
	},
	"$user->changeName()": {
		"prefix": "->changeName()",
		"body": "->changeName(${1:\\$name})",
		"description": "Changes the screen name of the user",
		"scope": "php"
	},
	"$user->changePassword()": {
		"prefix": "->changePassword()",
		"body": "->changePassword(${1:\\$password})",
		"description": "Changes the user password",
		"scope": "php"
	},
	"$user->changeRole()": {
		"prefix": "->changeRole()",
		"body": "->changeRole(${1:\\$role})",
		"description": "Changes the user role",
		"scope": "php"
	},
	"$user->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]})",
		"description": "Creates an instance with the same initial properties.",
		"scope": "php"
	},
	"$user->code()": {
		"prefix": "->code()",
		"body": "->code()",
		"description": "Filters the Files collection by type code",
		"scope": "php"
	},
	"$user->content()": {
		"prefix": "->content()",
		"body": "->content(${1:\\$languageCode = null})",
		"description": "Returns the content",
		"scope": "php"
	},
	"$user->contentFile()": {
		"prefix": "->contentFile()",
		"body": "->contentFile(${1:\\$languageCode = null}, ${2:\\$force = false})",
		"description": "Returns the absolute path to the content file",
		"scope": "php"
	},
	"$user->contentFileData()": {
		"prefix": "->contentFileData()",
		"body": "->contentFileData(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Prepares the content for the write method",
		"scope": "php"
	},
	"$user->contentFileDirectory()": {
		"prefix": "->contentFileDirectory()",
		"body": "->contentFileDirectory()",
		"description": "Returns the absolute path to the folder in which the content file is located",
		"scope": "php"
	},
	"$user->contentFileExtension()": {
		"prefix": "->contentFileExtension()",
		"body": "->contentFileExtension()",
		"description": "Returns the extension of the content file",
		"scope": "php"
	},
	"$user->contentFileName()": {
		"prefix": "->contentFileName()",
		"body": "->contentFileName()",
		"description": "Filename for the content file",
		"scope": "php"
	},
	"$user->contentFiles()": {
		"prefix": "->contentFiles()",
		"body": "->contentFiles()",
		"description": "Returns an array with all content files",
		"scope": "php"
	},
	"$user->createFile()": {
		"prefix": "->createFile()",
		"body": "->createFile(${1:\\$props})",
		"description": "Creates a new file",
		"scope": "php"
	},
	"$user->createId()": {
		"prefix": "->createId()",
		"body": "->createId()",
		"description": "Returns a random user id",
		"scope": "php"
	},
	"$user->decrement()": {
		"prefix": "->decrement()",
		"body": "->decrement(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$min = 0})",
		"description": "Decrement a given field value",
		"scope": "php"
	},
	"$user->delete()": {
		"prefix": "->delete()",
		"body": "->delete()",
		"description": "Deletes the user",
		"scope": "php"
	},
	"$user->documents()": {
		"prefix": "->documents()",
		"body": "->documents()",
		"description": "Filters the Files collection by type documents",
		"scope": "php"
	},
	"$user->email()": {
		"prefix": "->email()",
		"body": "->email()",
		"description": "Returns the user email address",
		"scope": "php"
	},
	"$user->errors()": {
		"prefix": "->errors()",
		"body": "->errors()",
		"description": "Returns all content validation errors",
		"scope": "php"
	},
	"$user->exists()": {
		"prefix": "->exists()",
		"body": "->exists()",
		"description": "Checks if the user exists",
		"scope": "php"
	},
	"$user->file()": {
		"prefix": "->file()",
		"body": "->file(${1:\\$filename = null}, ${2:\\$in = 'files'})",
		"description": "Returns a specific file by filename or the first one",
		"scope": "php"
	},
	"$user->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns the Files collection",
		"scope": "php"
	},
	"$user->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$user->hasAudio()": {
		"prefix": "->hasAudio()",
		"body": "->hasAudio()",
		"description": "Checks if the Files collection has any audio files",
		"scope": "php"
	},
	"$user->hasCode()": {
		"prefix": "->hasCode()",
		"body": "->hasCode()",
		"description": "Checks if the Files collection has any code files",
		"scope": "php"
	},
	"$user->hasDocuments()": {
		"prefix": "->hasDocuments()",
		"body": "->hasDocuments()",
		"description": "Checks if the Files collection has any document files",
		"scope": "php"
	},
	"$user->hasFiles()": {
		"prefix": "->hasFiles()",
		"body": "->hasFiles()",
		"description": "Checks if the Files collection has any files",
		"scope": "php"
	},
	"$user->hasImages()": {
		"prefix": "->hasImages()",
		"body": "->hasImages()",
		"description": "Checks if the Files collection has any images",
		"scope": "php"
	},
	"$user->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$user->hasNext()": {
		"prefix": "->hasNext()",
		"body": "->hasNext(${1:\\$collection = null})",
		"description": "Checks if there’s a next item in the collection",
		"scope": "php"
	},
	"$user->hasPrev()": {
		"prefix": "->hasPrev()",
		"body": "->hasPrev(${1:\\$collection = null})",
		"description": "Checks if there’s a previous item in the collection",
		"scope": "php"
	},
	"$user->hasVideos()": {
		"prefix": "->hasVideos()",
		"body": "->hasVideos()",
		"description": "Checks if the Files collection has any videos",
		"scope": "php"
	},
	"$user->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "Returns the user id",
		"scope": "php"
	},
	"$user->image()": {
		"prefix": "->image()",
		"body": "->image(${1:\\$filename = null})",
		"description": "Returns a specific image by filename or the first one",
		"scope": "php"
	},
	"$user->images()": {
		"prefix": "->images()",
		"body": "->images()",
		"description": "Filters the Files collection by type image",
		"scope": "php"
	},
	"$user->increment()": {
		"prefix": "->increment()",
		"body": "->increment(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$max = null})",
		"description": "Increment a given field value",
		"scope": "php"
	},
	"$user->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$collection = null})",
		"description": "Returns the position / index in the collection",
		"scope": "php"
	},
	"$user->inventory()": {
		"prefix": "->inventory()",
		"body": "->inventory()",
		"description": "Returns the inventory of files children and content files",
		"scope": "php"
	},
	"$user->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$user = null})",
		"description": "Compares the current object with the given user object",
		"scope": "php"
	},
	"$user->isAdmin()": {
		"prefix": "->isAdmin()",
		"body": "->isAdmin()",
		"description": "Checks if this user has the admin role",
		"scope": "php"
	},
	"$user->isFirst()": {
		"prefix": "->isFirst()",
		"body": "->isFirst(${1:\\$collection = null})",
		"description": "Checks if the item is the first in the collection",
		"scope": "php"
	},
	"$user->isKirby()": {
		"prefix": "->isKirby()",
		"body": "->isKirby()",
		"description": "Checks if the current user is the virtual Kirby user",
		"scope": "php"
	},
	"$user->isLast()": {
		"prefix": "->isLast()",
		"body": "->isLast(${1:\\$collection = null})",
		"description": "Checks if the item is the last in the collection",
		"scope": "php"
	},
	"$user->isLastAdmin()": {
		"prefix": "->isLastAdmin()",
		"body": "->isLastAdmin()",
		"description": "Checks if the user is the last one with the admin role",
		"scope": "php"
	},
	"$user->isLastUser()": {
		"prefix": "->isLastUser()",
		"body": "->isLastUser()",
		"description": "Checks if the user is the last user",
		"scope": "php"
	},
	"$user->isLocked()": {
		"prefix": "->isLocked()",
		"body": "->isLocked()",
		"description": "Checks if the model is locked for the current user",
		"scope": "php"
	},
	"$user->isLoggedIn()": {
		"prefix": "->isLoggedIn()",
		"body": "->isLoggedIn()",
		"description": "Checks if the current user is this user",
		"scope": "php"
	},
	"$user->isNobody()": {
		"prefix": "->isNobody()",
		"body": "->isNobody()",
		"description": "Checks if the current user is the virtual Nobody user",
		"scope": "php"
	},
	"$user->isNth()": {
		"prefix": "->isNth()",
		"body": "->isNth(${1:\\$n}, ${2:\\$collection = null})",
		"description": "Checks if the item is at a certain position",
		"scope": "php"
	},
	"$user->isValid()": {
		"prefix": "->isValid()",
		"body": "->isValid()",
		"description": "Checks if the data has any errors",
		"scope": "php"
	},
	"$user->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the parent Kirby instance",
		"scope": "php"
	},
	"$user->language()": {
		"prefix": "->language()",
		"body": "->language()",
		"description": "Returns the user language",
		"scope": "php"
	},
	"$user->lock()": {
		"prefix": "->lock()",
		"body": "->lock()",
		"description": "Returns the lock object for this model",
		"scope": "php"
	},
	"$user->login()": {
		"prefix": "->login()",
		"body": "->login(${1:\\$password}, ${2:\\$session = null})",
		"description": "Logs the user in",
		"scope": "php"
	},
	"$user->loginPasswordless()": {
		"prefix": "->loginPasswordless()",
		"body": "->loginPasswordless(${1:\\$session = null})",
		"description": "Logs the user in without checking the password",
		"scope": "php"
	},
	"$user->logout()": {
		"prefix": "->logout()",
		"body": "->logout(${1:\\$session = null})",
		"description": "Logs the user out",
		"scope": "php"
	},
	"$user->mediaRoot()": {
		"prefix": "->mediaRoot()",
		"body": "->mediaRoot()",
		"description": "Returns the root to the media folder for the user",
		"scope": "php"
	},
	"$user->mediaUrl()": {
		"prefix": "->mediaUrl()",
		"body": "->mediaUrl()",
		"description": "Returns the media url for the user object",
		"scope": "php"
	},
	"$user->modified()": {
		"prefix": "->modified()",
		"body": "->modified(${1:\\$format = 'U'}, ${2:\\$handler = null}, ${3:\\$languageCode = null})",
		"description": "Returns the last modification date of the user",
		"scope": "php"
	},
	"$user->name()": {
		"prefix": "->name()",
		"body": "->name()",
		"description": "Returns the user’s name",
		"scope": "php"
	},
	"$user->nameOrEmail()": {
		"prefix": "->nameOrEmail()",
		"body": "->nameOrEmail()",
		"description": "Returns the user’s name or, if empty, the email address",
		"scope": "php"
	},
	"$user->next()": {
		"prefix": "->next()",
		"body": "->next(${1:\\$collection = null})",
		"description": "Returns the next item in the collection if available",
		"scope": "php"
	},
	"$user->nextAll()": {
		"prefix": "->nextAll()",
		"body": "->nextAll(${1:\\$collection = null})",
		"description": "Returns the end of the collection starting after the current item",
		"scope": "php"
	},
	"$user->panel()": {
		"prefix": "->panel()",
		"body": "->panel()",
		"description": "Returns the panel info object",
		"scope": "php"
	},
	"$user->password()": {
		"prefix": "->password()",
		"body": "->password()",
		"description": "Returns the encrypted user password",
		"scope": "php"
	},
	"$user->permissions()": {
		"prefix": "->permissions()",
		"body": "->permissions()",
		"description": "",
		"scope": "php"
	},
	"$user->prev()": {
		"prefix": "->prev()",
		"body": "->prev(${1:\\$collection = null})",
		"description": "Returns the previous item in the collection if available",
		"scope": "php"
	},
	"$user->prevAll()": {
		"prefix": "->prevAll()",
		"body": "->prevAll(${1:\\$collection = null})",
		"description": "Returns the beginning of the collection before the current item",
		"scope": "php"
	},
	"$user->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$query = null}, ${2:\\$expect = null})",
		"description": "Creates a string query, starting from the model",
		"scope": "php"
	},
	"$user->readContent()": {
		"prefix": "->readContent()",
		"body": "->readContent(${1:\\$languageCode = null})",
		"description": "Read the content from the content file",
		"scope": "php"
	},
	"$user->role()": {
		"prefix": "->role()",
		"body": "->role()",
		"description": "Returns the user role",
		"scope": "php"
	},
	"$user->roles()": {
		"prefix": "->roles()",
		"body": "->roles()",
		"description": "Returns all available roles for this user, that can be selected by the authenticated user",
		"scope": "php"
	},
	"$user->root()": {
		"prefix": "->root()",
		"body": "->root()",
		"description": "The absolute path to the user directory",
		"scope": "php"
	},
	"$user->save()": {
		"prefix": "->save()",
		"body": "->save(${1:\\$data = null}, ${2:\\$languageCode = null}, ${3:\\$overwrite = false})",
		"description": "Stores the content on disk",
		"scope": "php"
	},
	"$user->setSite()": {
		"prefix": "->setSite()",
		"body": "->setSite(${1:\\$site = null})",
		"description": "Setter for the parent site object",
		"scope": "php"
	},
	"$user->siblings()": {
		"prefix": "->siblings()",
		"body": "->siblings(${1:\\$self = true})",
		"description": "Returns all sibling elements",
		"scope": "php"
	},
	"$user->site()": {
		"prefix": "->site()",
		"body": "->site()",
		"description": "Returns the parent Site instance",
		"scope": "php"
	},
	"$user->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Converts the most important user properties to an array",
		"scope": "php"
	},
	"$user->toSafeString()": {
		"prefix": "->toSafeString()",
		"body": "->toSafeString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''})",
		"description": "String template builder with automatic HTML escaping",
		"scope": "php"
	},
	"$user->toString()": {
		"prefix": "->toString()",
		"body": "->toString(${1:\\$template = null}, ${2:\\$data = [ ]}, ${3:\\$fallback = ''}, ${4:\\$handler = 'template'})",
		"description": "String template builder",
		"scope": "php"
	},
	"$user->translation()": {
		"prefix": "->translation()",
		"body": "->translation(${1:\\$languageCode = null})",
		"description": "Returns a single translation by language code If no code is specified the current translation is returned",
		"scope": "php"
	},
	"$user->translations()": {
		"prefix": "->translations()",
		"body": "->translations()",
		"description": "Returns the translations collection",
		"scope": "php"
	},
	"$user->update()": {
		"prefix": "->update()",
		"body": "->update(${1:\\$input = null}, ${2:\\$languageCode = null}, ${3:\\$validate = false})",
		"description": "Updates the user data",
		"scope": "php"
	},
	"$user->username()": {
		"prefix": "->username()",
		"body": "->username()",
		"description": "Returns the username which is the given name or the email as a fallback",
		"scope": "php"
	},
	"$user->uuid()": {
		"prefix": "->uuid()",
		"body": "->uuid()",
		"description": "Returns the user’s Unique ID.",
		"scope": "php"
	},
	"$user->validatePassword()": {
		"prefix": "->validatePassword()",
		"body": "->validatePassword(${1:\\$password = null})",
		"description": "Compares the given password with the stored one",
		"scope": "php"
	},
	"$user->videos()": {
		"prefix": "->videos()",
		"body": "->videos()",
		"description": "Filters the Files collection by type videos",
		"scope": "php"
	},
	"$user->writeContent()": {
		"prefix": "->writeContent()",
		"body": "->writeContent(${1:\\$data}, ${2:\\$languageCode = null})",
		"description": "Low level data writer method to store the given data on disk or anywhere else",
		"scope": "php"
	},
	"$users->add()": {
		"prefix": "->add()",
		"body": "->add(${1:\\$object})",
		"description": "Adds a single user or an entire second collection to the current collection",
		"scope": "php"
	},
	"$users->append()": {
		"prefix": "->append()",
		"body": "->append(${1:\\$args = null})",
		"description": "Appends an element to the data array",
		"scope": "php"
	},
	"$users->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$users->chunk()": {
		"prefix": "->chunk()",
		"body": "->chunk(${1:\\$size})",
		"description": "Creates chunks of the same size.",
		"scope": "php"
	},
	"$users->clone()": {
		"prefix": "->clone()",
		"body": "->clone()",
		"description": "Returns a cloned instance of the collection",
		"scope": "php"
	},
	"$users->count()": {
		"prefix": "->count()",
		"body": "->count()",
		"description": "Counts all elements",
		"scope": "php"
	},
	"$users->create()": {
		"prefix": "->create()",
		"body": "->create(${1:\\$data})",
		"description": "",
		"scope": "php"
	},
	"$users->current()": {
		"prefix": "->current()",
		"body": "->current()",
		"description": "Returns the current element",
		"scope": "php"
	},
	"$users->data()": {
		"prefix": "->data()",
		"body": "->data(${1:\\$data = null})",
		"description": "Getter and setter for the data",
		"scope": "php"
	},
	"$users->empty()": {
		"prefix": "->empty()",
		"body": "->empty()",
		"description": "Clone and remove all elements from the collection",
		"scope": "php"
	},
	"$users->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$items})",
		"description": "Adds all elements to the collection",
		"scope": "php"
	},
	"$users->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns all files of all users",
		"scope": "php"
	},
	"$users->filter()": {
		"prefix": "->filter()",
		"body": "->filter(${1:\\$field}, ${2:\\$args = null})",
		"description": "Filters elements by one of the predefined filter methods, by a custom filter function or an array of filters",
		"scope": "php"
	},
	"$users->filterBy()": {
		"prefix": "->filterBy()",
		"body": "->filterBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::filter`",
		"scope": "php"
	},
	"$users->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$keys = null})",
		"description": "Find one or multiple elements by id",
		"scope": "php"
	},
	"$users->findBy()": {
		"prefix": "->findBy()",
		"body": "->findBy(${1:\\$attribute}, ${2:\\$value})",
		"description": "Find a single element by an attribute and its value",
		"scope": "php"
	},
	"$users->findByKey()": {
		"prefix": "->findByKey()",
		"body": "->findByKey(${1:\\$key})",
		"description": "Finds a user in the collection by ID or email address",
		"scope": "php"
	},
	"$users->first()": {
		"prefix": "->first()",
		"body": "->first()",
		"description": "Returns the first element",
		"scope": "php"
	},
	"$users->flip()": {
		"prefix": "->flip()",
		"body": "->flip()",
		"description": "Returns the elements in reverse order",
		"scope": "php"
	},
	"$users->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key}, ${2:\\$default = null})",
		"description": "Getter",
		"scope": "php"
	},
	"$users->getAttribute()": {
		"prefix": "->getAttribute()",
		"body": "->getAttribute(${1:\\$item}, ${2:\\$attribute}, ${3:\\$split = false}, ${4:\\$related = null})",
		"description": "Extracts an attribute value from the given element in the collection. This is useful if elements in the collection might be objects, arrays or anything else and you need to get the value independently from that. We use it for `filter`.",
		"scope": "php"
	},
	"$users->getIterator()": {
		"prefix": "->getIterator()",
		"body": "->getIterator()",
		"description": "Get an iterator for the items.",
		"scope": "php"
	},
	"$users->group()": {
		"prefix": "->group()",
		"body": "->group(${1:\\$field}, ${2:\\$i = true})",
		"description": "Groups the items by a given field or callback. Returns a collection with an item for each group and a collection for each group.",
		"scope": "php"
	},
	"$users->groupBy()": {
		"prefix": "->groupBy()",
		"body": "->groupBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::group`",
		"scope": "php"
	},
	"$users->has()": {
		"prefix": "->has()",
		"body": "->has(${1:\\$key})",
		"description": "Checks if the given object or id is in the collection",
		"scope": "php"
	},
	"$users->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$users->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$needle})",
		"description": "Correct position detection for objects.",
		"scope": "php"
	},
	"$users->intersection()": {
		"prefix": "->intersection()",
		"body": "->intersection(${1:\\$other})",
		"description": "Returns a Collection with the intersection of the given elements",
		"scope": "php"
	},
	"$users->intersects()": {
		"prefix": "->intersects()",
		"body": "->intersects(${1:\\$other})",
		"description": "Checks if there is an intersection between the given collection and this collection",
		"scope": "php"
	},
	"$users->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the number of elements is zero",
		"scope": "php"
	},
	"$users->isEven()": {
		"prefix": "->isEven()",
		"body": "->isEven()",
		"description": "Checks if the number of elements is even",
		"scope": "php"
	},
	"$users->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the number of elements is more than zero",
		"scope": "php"
	},
	"$users->isOdd()": {
		"prefix": "->isOdd()",
		"body": "->isOdd()",
		"description": "Checks if the number of elements is odd",
		"scope": "php"
	},
	"$users->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the current key",
		"scope": "php"
	},
	"$users->keyOf()": {
		"prefix": "->keyOf()",
		"body": "->keyOf(${1:\\$needle})",
		"description": "Tries to find the key for the given element",
		"scope": "php"
	},
	"$users->keys()": {
		"prefix": "->keys()",
		"body": "->keys()",
		"description": "Returns an array of all keys",
		"scope": "php"
	},
	"$users->last()": {
		"prefix": "->last()",
		"body": "->last()",
		"description": "Returns the last element",
		"scope": "php"
	},
	"$users->limit()": {
		"prefix": "->limit()",
		"body": "->limit(${1:\\$limit})",
		"description": "Returns a new object with a limited number of elements",
		"scope": "php"
	},
	"$users->map()": {
		"prefix": "->map()",
		"body": "->map(${1:\\$callback})",
		"description": "Map a function to each element",
		"scope": "php"
	},
	"$users->next()": {
		"prefix": "->next()",
		"body": "->next()",
		"description": "Moves the cursor to the next element and returns it",
		"scope": "php"
	},
	"$users->not()": {
		"prefix": "->not()",
		"body": "->not(${1:\\$keys = null})",
		"description": "Returns a Collection without the given element(s)",
		"scope": "php"
	},
	"$users->nth()": {
		"prefix": "->nth()",
		"body": "->nth(${1:\\$n})",
		"description": "Returns the nth element from the collection",
		"scope": "php"
	},
	"$users->offset()": {
		"prefix": "->offset()",
		"body": "->offset(${1:\\$offset})",
		"description": "Returns a new object starting from the given offset",
		"scope": "php"
	},
	"$users->paginate()": {
		"prefix": "->paginate()",
		"body": "->paginate(${1:\\$arguments = null})",
		"description": "Add pagination and return a sliced set of data.",
		"scope": "php"
	},
	"$users->pagination()": {
		"prefix": "->pagination()",
		"body": "->pagination()",
		"description": "Get the previously added pagination object",
		"scope": "php"
	},
	"$users->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$users->pluck()": {
		"prefix": "->pluck()",
		"body": "->pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
		"description": "Extracts all values for a single field into a new array",
		"scope": "php"
	},
	"$users->prepend()": {
		"prefix": "->prepend()",
		"body": "->prepend(${1:\\$args = null})",
		"description": "Prepends an element to the data array",
		"scope": "php"
	},
	"$users->prev()": {
		"prefix": "->prev()",
		"body": "->prev()",
		"description": "Moves the cursor to the previous element and returns it",
		"scope": "php"
	},
	"$users->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$arguments = [ ]})",
		"description": "Runs a combination of filter, sort, not, offset, limit, search and paginate on the collection.",
		"scope": "php"
	},
	"$users->random()": {
		"prefix": "->random()",
		"body": "->random(${1:\\$count = 1}, ${2:\\$shuffle = false})",
		"description": "Returns a new collection consisting of random elements, from the original collection, shuffled or ordered",
		"scope": "php"
	},
	"$users->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes an object",
		"scope": "php"
	},
	"$users->rewind()": {
		"prefix": "->rewind()",
		"body": "->rewind()",
		"description": "Moves the cursor to the first element",
		"scope": "php"
	},
	"$users->role()": {
		"prefix": "->role()",
		"body": "->role(${1:\\$role})",
		"description": "Shortcut for `$users-&gt;filter(’role’, ’admin’)`",
		"scope": "php"
	},
	"$users->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Searches the collection",
		"scope": "php"
	},
	"$users->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Adds a new element to the collection",
		"scope": "php"
	},
	"$users->shuffle()": {
		"prefix": "->shuffle()",
		"body": "->shuffle()",
		"description": "Shuffle all elements",
		"scope": "php"
	},
	"$users->slice()": {
		"prefix": "->slice()",
		"body": "->slice(${1:\\$offset = 0}, ${2:\\$limit = null})",
		"description": "Returns a slice of the object",
		"scope": "php"
	},
	"$users->sort()": {
		"prefix": "->sort()",
		"body": "->sort()",
		"description": "Sorts the elements by any number of fields",
		"scope": "php"
	},
	"$users->sortBy()": {
		"prefix": "->sortBy()",
		"body": "->sortBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::sort`",
		"scope": "php"
	},
	"$users->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray(${1:\\$map = null})",
		"description": "Converts all objects in the collection to an array. This can also take a callback function to further modify the array result.",
		"scope": "php"
	},
	"$users->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the object into a JSON string",
		"scope": "php"
	},
	"$users->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Converts the object to a string",
		"scope": "php"
	},
	"$users->valid()": {
		"prefix": "->valid()",
		"body": "->valid()",
		"description": "Checks if the current element is valid",
		"scope": "php"
	},
	"$users->values()": {
		"prefix": "->values()",
		"body": "->values(${1:\\$map = null})",
		"description": "Returns a non-associative array with all values. If a mapping Closure is passed, all values are processed by the Closure.",
		"scope": "php"
	},
	"$users->when()": {
		"prefix": "->when()",
		"body": "->when(${1:\\$condition}, ${2:\\$callback}, ${3:\\$fallback = null})",
		"description": "The when method only executes the given Closure when the first parameter is true. If the first parameter is false, the Closure will not be executed.",
		"scope": "php"
	},
	"$users->without()": {
		"prefix": "->without()",
		"body": "->without(${1:\\$keys = null})",
		"description": "Alias for $this-&gt;not()",
		"scope": "php"
	},
	"$blocks->add()": {
		"prefix": "->add()",
		"body": "->add(${1:\\$object})",
		"description": "Adds a single object or an entire second collection to the current collection",
		"scope": "php"
	},
	"$blocks->append()": {
		"prefix": "->append()",
		"body": "->append(${1:\\$args = null})",
		"description": "Appends an element to the data array",
		"scope": "php"
	},
	"$blocks->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$blocks->chunk()": {
		"prefix": "->chunk()",
		"body": "->chunk(${1:\\$size})",
		"description": "Creates chunks of the same size.",
		"scope": "php"
	},
	"$blocks->clone()": {
		"prefix": "->clone()",
		"body": "->clone()",
		"description": "Returns a cloned instance of the collection",
		"scope": "php"
	},
	"$blocks->count()": {
		"prefix": "->count()",
		"body": "->count()",
		"description": "Counts all elements",
		"scope": "php"
	},
	"$blocks->current()": {
		"prefix": "->current()",
		"body": "->current()",
		"description": "Returns the current element",
		"scope": "php"
	},
	"$blocks->data()": {
		"prefix": "->data()",
		"body": "->data(${1:\\$data = null})",
		"description": "Getter and setter for the data",
		"scope": "php"
	},
	"$blocks->empty()": {
		"prefix": "->empty()",
		"body": "->empty()",
		"description": "Clone and remove all elements from the collection",
		"scope": "php"
	},
	"$blocks->excerpt()": {
		"prefix": "->excerpt()",
		"body": "->excerpt(${1:\\$args = null})",
		"description": "Converts the blocks to HTML and then uses the Str::excerpt method to create a non-formatted, shortened excerpt from it",
		"scope": "php"
	},
	"$blocks->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$items})",
		"description": "Adds all elements to the collection",
		"scope": "php"
	},
	"$blocks->filter()": {
		"prefix": "->filter()",
		"body": "->filter(${1:\\$field}, ${2:\\$args = null})",
		"description": "Filters elements by one of the predefined filter methods, by a custom filter function or an array of filters",
		"scope": "php"
	},
	"$blocks->filterBy()": {
		"prefix": "->filterBy()",
		"body": "->filterBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::filter`",
		"scope": "php"
	},
	"$blocks->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$keys = null})",
		"description": "Find one or multiple elements by id",
		"scope": "php"
	},
	"$blocks->findBy()": {
		"prefix": "->findBy()",
		"body": "->findBy(${1:\\$attribute}, ${2:\\$value})",
		"description": "Find a single element by an attribute and its value",
		"scope": "php"
	},
	"$blocks->findByKey()": {
		"prefix": "->findByKey()",
		"body": "->findByKey(${1:\\$key})",
		"description": "Find a single element by key (id)",
		"scope": "php"
	},
	"$blocks->first()": {
		"prefix": "->first()",
		"body": "->first()",
		"description": "Returns the first element",
		"scope": "php"
	},
	"$blocks->flip()": {
		"prefix": "->flip()",
		"body": "->flip()",
		"description": "Returns the elements in reverse order",
		"scope": "php"
	},
	"$blocks->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key}, ${2:\\$default = null})",
		"description": "Getter",
		"scope": "php"
	},
	"$blocks->getAttribute()": {
		"prefix": "->getAttribute()",
		"body": "->getAttribute(${1:\\$item}, ${2:\\$attribute}, ${3:\\$split = false}, ${4:\\$related = null})",
		"description": "Extracts an attribute value from the given element in the collection. This is useful if elements in the collection might be objects, arrays or anything else and you need to get the value independently from that. We use it for `filter`.",
		"scope": "php"
	},
	"$blocks->getIterator()": {
		"prefix": "->getIterator()",
		"body": "->getIterator()",
		"description": "Get an iterator for the items.",
		"scope": "php"
	},
	"$blocks->group()": {
		"prefix": "->group()",
		"body": "->group(${1:\\$field}, ${2:\\$i = true})",
		"description": "Groups the items by a given field or callback. Returns a collection with an item for each group and a collection for each group.",
		"scope": "php"
	},
	"$blocks->groupBy()": {
		"prefix": "->groupBy()",
		"body": "->groupBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::group`",
		"scope": "php"
	},
	"$blocks->has()": {
		"prefix": "->has()",
		"body": "->has(${1:\\$key})",
		"description": "Checks if the given object or id is in the collection",
		"scope": "php"
	},
	"$blocks->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$blocks->hasType()": {
		"prefix": "->hasType()",
		"body": "->hasType(${1:\\$type})",
		"description": "Checks if a given block type exists in the collection",
		"scope": "php"
	},
	"$blocks->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$needle})",
		"description": "Correct position detection for objects.",
		"scope": "php"
	},
	"$blocks->intersection()": {
		"prefix": "->intersection()",
		"body": "->intersection(${1:\\$other})",
		"description": "Returns a Collection with the intersection of the given elements",
		"scope": "php"
	},
	"$blocks->intersects()": {
		"prefix": "->intersects()",
		"body": "->intersects(${1:\\$other})",
		"description": "Checks if there is an intersection between the given collection and this collection",
		"scope": "php"
	},
	"$blocks->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the number of elements is zero",
		"scope": "php"
	},
	"$blocks->isEven()": {
		"prefix": "->isEven()",
		"body": "->isEven()",
		"description": "Checks if the number of elements is even",
		"scope": "php"
	},
	"$blocks->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the number of elements is more than zero",
		"scope": "php"
	},
	"$blocks->isOdd()": {
		"prefix": "->isOdd()",
		"body": "->isOdd()",
		"description": "Checks if the number of elements is odd",
		"scope": "php"
	},
	"$blocks->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the current key",
		"scope": "php"
	},
	"$blocks->keyOf()": {
		"prefix": "->keyOf()",
		"body": "->keyOf(${1:\\$needle})",
		"description": "Tries to find the key for the given element",
		"scope": "php"
	},
	"$blocks->keys()": {
		"prefix": "->keys()",
		"body": "->keys()",
		"description": "Returns an array of all keys",
		"scope": "php"
	},
	"$blocks->last()": {
		"prefix": "->last()",
		"body": "->last()",
		"description": "Returns the last element",
		"scope": "php"
	},
	"$blocks->limit()": {
		"prefix": "->limit()",
		"body": "->limit(${1:\\$limit})",
		"description": "Returns a new object with a limited number of elements",
		"scope": "php"
	},
	"$blocks->map()": {
		"prefix": "->map()",
		"body": "->map(${1:\\$callback})",
		"description": "Map a function to each element",
		"scope": "php"
	},
	"$blocks->next()": {
		"prefix": "->next()",
		"body": "->next()",
		"description": "Moves the cursor to the next element and returns it",
		"scope": "php"
	},
	"$blocks->not()": {
		"prefix": "->not()",
		"body": "->not(${1:\\$keys = null})",
		"description": "Returns a Collection without the given element(s)",
		"scope": "php"
	},
	"$blocks->nth()": {
		"prefix": "->nth()",
		"body": "->nth(${1:\\$n})",
		"description": "Returns the nth element from the collection",
		"scope": "php"
	},
	"$blocks->offset()": {
		"prefix": "->offset()",
		"body": "->offset(${1:\\$offset})",
		"description": "Returns a new object starting from the given offset",
		"scope": "php"
	},
	"$blocks->paginate()": {
		"prefix": "->paginate()",
		"body": "->paginate(${1:\\$arguments = null})",
		"description": "Add pagination and return a sliced set of data.",
		"scope": "php"
	},
	"$blocks->pagination()": {
		"prefix": "->pagination()",
		"body": "->pagination()",
		"description": "Get the previously added pagination object",
		"scope": "php"
	},
	"$blocks->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$blocks->pluck()": {
		"prefix": "->pluck()",
		"body": "->pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
		"description": "Extracts all values for a single field into a new array",
		"scope": "php"
	},
	"$blocks->prepend()": {
		"prefix": "->prepend()",
		"body": "->prepend(${1:\\$args = null})",
		"description": "Prepends an element to the data array",
		"scope": "php"
	},
	"$blocks->prev()": {
		"prefix": "->prev()",
		"body": "->prev()",
		"description": "Moves the cursor to the previous element and returns it",
		"scope": "php"
	},
	"$blocks->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$arguments = [ ]})",
		"description": "Runs a combination of filter, sort, not, offset, limit, search and paginate on the collection.",
		"scope": "php"
	},
	"$blocks->random()": {
		"prefix": "->random()",
		"body": "->random(${1:\\$count = 1}, ${2:\\$shuffle = false})",
		"description": "Returns a new collection consisting of random elements, from the original collection, shuffled or ordered",
		"scope": "php"
	},
	"$blocks->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes an object",
		"scope": "php"
	},
	"$blocks->rewind()": {
		"prefix": "->rewind()",
		"body": "->rewind()",
		"description": "Moves the cursor to the first element",
		"scope": "php"
	},
	"$blocks->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Searches the collection",
		"scope": "php"
	},
	"$blocks->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Adds a new element to the collection",
		"scope": "php"
	},
	"$blocks->shuffle()": {
		"prefix": "->shuffle()",
		"body": "->shuffle()",
		"description": "Shuffle all elements",
		"scope": "php"
	},
	"$blocks->slice()": {
		"prefix": "->slice()",
		"body": "->slice(${1:\\$offset = 0}, ${2:\\$limit = null})",
		"description": "Returns a slice of the object",
		"scope": "php"
	},
	"$blocks->sort()": {
		"prefix": "->sort()",
		"body": "->sort()",
		"description": "Sorts the elements by any number of fields",
		"scope": "php"
	},
	"$blocks->sortBy()": {
		"prefix": "->sortBy()",
		"body": "->sortBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::sort`",
		"scope": "php"
	},
	"$blocks->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray(${1:\\$map = null})",
		"description": "Convert the items to an array",
		"scope": "php"
	},
	"$blocks->toHtml()": {
		"prefix": "->toHtml()",
		"body": "->toHtml()",
		"description": "Convert all blocks to HTML",
		"scope": "php"
	},
	"$blocks->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the object into a JSON string",
		"scope": "php"
	},
	"$blocks->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Converts the object to a string",
		"scope": "php"
	},
	"$blocks->valid()": {
		"prefix": "->valid()",
		"body": "->valid()",
		"description": "Checks if the current element is valid",
		"scope": "php"
	},
	"$blocks->values()": {
		"prefix": "->values()",
		"body": "->values(${1:\\$map = null})",
		"description": "Returns a non-associative array with all values. If a mapping Closure is passed, all values are processed by the Closure.",
		"scope": "php"
	},
	"$blocks->when()": {
		"prefix": "->when()",
		"body": "->when(${1:\\$condition}, ${2:\\$callback}, ${3:\\$fallback = null})",
		"description": "The when method only executes the given Closure when the first parameter is true. If the first parameter is false, the Closure will not be executed.",
		"scope": "php"
	},
	"$blocks->without()": {
		"prefix": "->without()",
		"body": "->without(${1:\\$keys = null})",
		"description": "Alias for $this-&gt;not()",
		"scope": "php"
	},
	"$block->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$block->content()": {
		"prefix": "->content()",
		"body": "->content()",
		"description": "Returns the content object",
		"scope": "php"
	},
	"$block->controller()": {
		"prefix": "->controller()",
		"body": "->controller()",
		"description": "Controller for the block snippet",
		"scope": "php"
	},
	"$block->excerpt()": {
		"prefix": "->excerpt()",
		"body": "->excerpt(${1:\\$args = null})",
		"description": "Converts the block to HTML and then uses the Str::excerpt method to create a non-formatted, shortened excerpt from it",
		"scope": "php"
	},
	"$block->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$block->hasNext()": {
		"prefix": "->hasNext()",
		"body": "->hasNext(${1:\\$collection = null})",
		"description": "Checks if there’s a next item in the collection",
		"scope": "php"
	},
	"$block->hasPrev()": {
		"prefix": "->hasPrev()",
		"body": "->hasPrev(${1:\\$collection = null})",
		"description": "Checks if there’s a previous item in the collection",
		"scope": "php"
	},
	"$block->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "Returns the unique item id (UUID v4)",
		"scope": "php"
	},
	"$block->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$collection = null})",
		"description": "Returns the position / index in the collection",
		"scope": "php"
	},
	"$block->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$item})",
		"description": "Compares the item to another one",
		"scope": "php"
	},
	"$block->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the block is empty",
		"scope": "php"
	},
	"$block->isFirst()": {
		"prefix": "->isFirst()",
		"body": "->isFirst(${1:\\$collection = null})",
		"description": "Checks if the item is the first in the collection",
		"scope": "php"
	},
	"$block->isHidden()": {
		"prefix": "->isHidden()",
		"body": "->isHidden()",
		"description": "Checks if the block is hidden from being rendered in the frontend",
		"scope": "php"
	},
	"$block->isLast()": {
		"prefix": "->isLast()",
		"body": "->isLast(${1:\\$collection = null})",
		"description": "Checks if the item is the last in the collection",
		"scope": "php"
	},
	"$block->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the block is not empty",
		"scope": "php"
	},
	"$block->isNth()": {
		"prefix": "->isNth()",
		"body": "->isNth(${1:\\$n}, ${2:\\$collection = null})",
		"description": "Checks if the item is at a certain position",
		"scope": "php"
	},
	"$block->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the Kirby instance",
		"scope": "php"
	},
	"$block->next()": {
		"prefix": "->next()",
		"body": "->next(${1:\\$collection = null})",
		"description": "Returns the next item in the collection if available",
		"scope": "php"
	},
	"$block->nextAll()": {
		"prefix": "->nextAll()",
		"body": "->nextAll(${1:\\$collection = null})",
		"description": "Returns the end of the collection starting after the current item",
		"scope": "php"
	},
	"$block->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$block->prev()": {
		"prefix": "->prev()",
		"body": "->prev(${1:\\$collection = null})",
		"description": "Returns the previous item in the collection if available",
		"scope": "php"
	},
	"$block->prevAll()": {
		"prefix": "->prevAll()",
		"body": "->prevAll(${1:\\$collection = null})",
		"description": "Returns the beginning of the collection before the current item",
		"scope": "php"
	},
	"$block->siblings()": {
		"prefix": "->siblings()",
		"body": "->siblings(${1:\\$self = true})",
		"description": "Returns all sibling elements",
		"scope": "php"
	},
	"$block->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "The result is being sent to the editor via the API in the panel",
		"scope": "php"
	},
	"$block->toField()": {
		"prefix": "->toField()",
		"body": "->toField()",
		"description": "Converts the block to html first and then places that inside a field object. This can be used further with all available field methods",
		"scope": "php"
	},
	"$block->toHtml()": {
		"prefix": "->toHtml()",
		"body": "->toHtml()",
		"description": "Converts the block to HTML",
		"scope": "php"
	},
	"$block->type()": {
		"prefix": "->type()",
		"body": "->type()",
		"description": "Returns the block type",
		"scope": "php"
	},
	"$layouts->add()": {
		"prefix": "->add()",
		"body": "->add(${1:\\$object})",
		"description": "Adds a single object or an entire second collection to the current collection",
		"scope": "php"
	},
	"$layouts->append()": {
		"prefix": "->append()",
		"body": "->append(${1:\\$args = null})",
		"description": "Appends an element to the data array",
		"scope": "php"
	},
	"$layouts->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$layouts->chunk()": {
		"prefix": "->chunk()",
		"body": "->chunk(${1:\\$size})",
		"description": "Creates chunks of the same size.",
		"scope": "php"
	},
	"$layouts->clone()": {
		"prefix": "->clone()",
		"body": "->clone()",
		"description": "Returns a cloned instance of the collection",
		"scope": "php"
	},
	"$layouts->count()": {
		"prefix": "->count()",
		"body": "->count()",
		"description": "Counts all elements",
		"scope": "php"
	},
	"$layouts->current()": {
		"prefix": "->current()",
		"body": "->current()",
		"description": "Returns the current element",
		"scope": "php"
	},
	"$layouts->data()": {
		"prefix": "->data()",
		"body": "->data(${1:\\$data = null})",
		"description": "Getter and setter for the data",
		"scope": "php"
	},
	"$layouts->empty()": {
		"prefix": "->empty()",
		"body": "->empty()",
		"description": "Clone and remove all elements from the collection",
		"scope": "php"
	},
	"$layouts->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$items})",
		"description": "Adds all elements to the collection",
		"scope": "php"
	},
	"$layouts->filter()": {
		"prefix": "->filter()",
		"body": "->filter(${1:\\$field}, ${2:\\$args = null})",
		"description": "Filters elements by one of the predefined filter methods, by a custom filter function or an array of filters",
		"scope": "php"
	},
	"$layouts->filterBy()": {
		"prefix": "->filterBy()",
		"body": "->filterBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::filter`",
		"scope": "php"
	},
	"$layouts->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$keys = null})",
		"description": "Find one or multiple elements by id",
		"scope": "php"
	},
	"$layouts->findBy()": {
		"prefix": "->findBy()",
		"body": "->findBy(${1:\\$attribute}, ${2:\\$value})",
		"description": "Find a single element by an attribute and its value",
		"scope": "php"
	},
	"$layouts->findByKey()": {
		"prefix": "->findByKey()",
		"body": "->findByKey(${1:\\$key})",
		"description": "Find a single element by key (id)",
		"scope": "php"
	},
	"$layouts->first()": {
		"prefix": "->first()",
		"body": "->first()",
		"description": "Returns the first element",
		"scope": "php"
	},
	"$layouts->flip()": {
		"prefix": "->flip()",
		"body": "->flip()",
		"description": "Returns the elements in reverse order",
		"scope": "php"
	},
	"$layouts->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key}, ${2:\\$default = null})",
		"description": "Getter",
		"scope": "php"
	},
	"$layouts->getAttribute()": {
		"prefix": "->getAttribute()",
		"body": "->getAttribute(${1:\\$item}, ${2:\\$attribute}, ${3:\\$split = false}, ${4:\\$related = null})",
		"description": "Extracts an attribute value from the given element in the collection. This is useful if elements in the collection might be objects, arrays or anything else and you need to get the value independently from that. We use it for `filter`.",
		"scope": "php"
	},
	"$layouts->getIterator()": {
		"prefix": "->getIterator()",
		"body": "->getIterator()",
		"description": "Get an iterator for the items.",
		"scope": "php"
	},
	"$layouts->group()": {
		"prefix": "->group()",
		"body": "->group(${1:\\$field}, ${2:\\$i = true})",
		"description": "Groups the items by a given field or callback. Returns a collection with an item for each group and a collection for each group.",
		"scope": "php"
	},
	"$layouts->groupBy()": {
		"prefix": "->groupBy()",
		"body": "->groupBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::group`",
		"scope": "php"
	},
	"$layouts->has()": {
		"prefix": "->has()",
		"body": "->has(${1:\\$key})",
		"description": "Checks if the given object or id is in the collection",
		"scope": "php"
	},
	"$layouts->hasBlockType()": {
		"prefix": "->hasBlockType()",
		"body": "->hasBlockType(${1:\\$type})",
		"description": "Checks if a given block type exists in the layouts collection",
		"scope": "php"
	},
	"$layouts->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$layouts->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$needle})",
		"description": "Correct position detection for objects.",
		"scope": "php"
	},
	"$layouts->intersection()": {
		"prefix": "->intersection()",
		"body": "->intersection(${1:\\$other})",
		"description": "Returns a Collection with the intersection of the given elements",
		"scope": "php"
	},
	"$layouts->intersects()": {
		"prefix": "->intersects()",
		"body": "->intersects(${1:\\$other})",
		"description": "Checks if there is an intersection between the given collection and this collection",
		"scope": "php"
	},
	"$layouts->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the number of elements is zero",
		"scope": "php"
	},
	"$layouts->isEven()": {
		"prefix": "->isEven()",
		"body": "->isEven()",
		"description": "Checks if the number of elements is even",
		"scope": "php"
	},
	"$layouts->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the number of elements is more than zero",
		"scope": "php"
	},
	"$layouts->isOdd()": {
		"prefix": "->isOdd()",
		"body": "->isOdd()",
		"description": "Checks if the number of elements is odd",
		"scope": "php"
	},
	"$layouts->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the current key",
		"scope": "php"
	},
	"$layouts->keyOf()": {
		"prefix": "->keyOf()",
		"body": "->keyOf(${1:\\$needle})",
		"description": "Tries to find the key for the given element",
		"scope": "php"
	},
	"$layouts->keys()": {
		"prefix": "->keys()",
		"body": "->keys()",
		"description": "Returns an array of all keys",
		"scope": "php"
	},
	"$layouts->last()": {
		"prefix": "->last()",
		"body": "->last()",
		"description": "Returns the last element",
		"scope": "php"
	},
	"$layouts->limit()": {
		"prefix": "->limit()",
		"body": "->limit(${1:\\$limit})",
		"description": "Returns a new object with a limited number of elements",
		"scope": "php"
	},
	"$layouts->map()": {
		"prefix": "->map()",
		"body": "->map(${1:\\$callback})",
		"description": "Map a function to each element",
		"scope": "php"
	},
	"$layouts->next()": {
		"prefix": "->next()",
		"body": "->next()",
		"description": "Moves the cursor to the next element and returns it",
		"scope": "php"
	},
	"$layouts->not()": {
		"prefix": "->not()",
		"body": "->not(${1:\\$keys = null})",
		"description": "Returns a Collection without the given element(s)",
		"scope": "php"
	},
	"$layouts->nth()": {
		"prefix": "->nth()",
		"body": "->nth(${1:\\$n})",
		"description": "Returns the nth element from the collection",
		"scope": "php"
	},
	"$layouts->offset()": {
		"prefix": "->offset()",
		"body": "->offset(${1:\\$offset})",
		"description": "Returns a new object starting from the given offset",
		"scope": "php"
	},
	"$layouts->paginate()": {
		"prefix": "->paginate()",
		"body": "->paginate(${1:\\$arguments = null})",
		"description": "Add pagination and return a sliced set of data.",
		"scope": "php"
	},
	"$layouts->pagination()": {
		"prefix": "->pagination()",
		"body": "->pagination()",
		"description": "Get the previously added pagination object",
		"scope": "php"
	},
	"$layouts->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$layouts->pluck()": {
		"prefix": "->pluck()",
		"body": "->pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
		"description": "Extracts all values for a single field into a new array",
		"scope": "php"
	},
	"$layouts->prepend()": {
		"prefix": "->prepend()",
		"body": "->prepend(${1:\\$args = null})",
		"description": "Prepends an element to the data array",
		"scope": "php"
	},
	"$layouts->prev()": {
		"prefix": "->prev()",
		"body": "->prev()",
		"description": "Moves the cursor to the previous element and returns it",
		"scope": "php"
	},
	"$layouts->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$arguments = [ ]})",
		"description": "Runs a combination of filter, sort, not, offset, limit, search and paginate on the collection.",
		"scope": "php"
	},
	"$layouts->random()": {
		"prefix": "->random()",
		"body": "->random(${1:\\$count = 1}, ${2:\\$shuffle = false})",
		"description": "Returns a new collection consisting of random elements, from the original collection, shuffled or ordered",
		"scope": "php"
	},
	"$layouts->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes an object",
		"scope": "php"
	},
	"$layouts->rewind()": {
		"prefix": "->rewind()",
		"body": "->rewind()",
		"description": "Moves the cursor to the first element",
		"scope": "php"
	},
	"$layouts->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Searches the collection",
		"scope": "php"
	},
	"$layouts->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Adds a new element to the collection",
		"scope": "php"
	},
	"$layouts->shuffle()": {
		"prefix": "->shuffle()",
		"body": "->shuffle()",
		"description": "Shuffle all elements",
		"scope": "php"
	},
	"$layouts->slice()": {
		"prefix": "->slice()",
		"body": "->slice(${1:\\$offset = 0}, ${2:\\$limit = null})",
		"description": "Returns a slice of the object",
		"scope": "php"
	},
	"$layouts->sort()": {
		"prefix": "->sort()",
		"body": "->sort()",
		"description": "Sorts the elements by any number of fields",
		"scope": "php"
	},
	"$layouts->sortBy()": {
		"prefix": "->sortBy()",
		"body": "->sortBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::sort`",
		"scope": "php"
	},
	"$layouts->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray(${1:\\$map = null})",
		"description": "Convert the items to an array",
		"scope": "php"
	},
	"$layouts->toBlocks()": {
		"prefix": "->toBlocks()",
		"body": "->toBlocks(${1:\\$includeHidden = false})",
		"description": "Converts layouts to blocks",
		"scope": "php"
	},
	"$layouts->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the object into a JSON string",
		"scope": "php"
	},
	"$layouts->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Converts the object to a string",
		"scope": "php"
	},
	"$layouts->valid()": {
		"prefix": "->valid()",
		"body": "->valid()",
		"description": "Checks if the current element is valid",
		"scope": "php"
	},
	"$layouts->values()": {
		"prefix": "->values()",
		"body": "->values(${1:\\$map = null})",
		"description": "Returns a non-associative array with all values. If a mapping Closure is passed, all values are processed by the Closure.",
		"scope": "php"
	},
	"$layouts->when()": {
		"prefix": "->when()",
		"body": "->when(${1:\\$condition}, ${2:\\$callback}, ${3:\\$fallback = null})",
		"description": "The when method only executes the given Closure when the first parameter is true. If the first parameter is false, the Closure will not be executed.",
		"scope": "php"
	},
	"$layouts->without()": {
		"prefix": "->without()",
		"body": "->without(${1:\\$keys = null})",
		"description": "Alias for $this-&gt;not()",
		"scope": "php"
	},
	"$layout->attrs()": {
		"prefix": "->attrs()",
		"body": "->attrs()",
		"description": "Returns the attrs object",
		"scope": "php"
	},
	"$layout->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$layout->columns()": {
		"prefix": "->columns()",
		"body": "->columns()",
		"description": "Returns the columns in this layout",
		"scope": "php"
	},
	"$layout->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$layout->hasNext()": {
		"prefix": "->hasNext()",
		"body": "->hasNext(${1:\\$collection = null})",
		"description": "Checks if there’s a next item in the collection",
		"scope": "php"
	},
	"$layout->hasPrev()": {
		"prefix": "->hasPrev()",
		"body": "->hasPrev(${1:\\$collection = null})",
		"description": "Checks if there’s a previous item in the collection",
		"scope": "php"
	},
	"$layout->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "Returns the unique item id (UUID v4)",
		"scope": "php"
	},
	"$layout->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$collection = null})",
		"description": "Returns the position / index in the collection",
		"scope": "php"
	},
	"$layout->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$item})",
		"description": "Compares the item to another one",
		"scope": "php"
	},
	"$layout->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the layout is empty",
		"scope": "php"
	},
	"$layout->isFirst()": {
		"prefix": "->isFirst()",
		"body": "->isFirst(${1:\\$collection = null})",
		"description": "Checks if the item is the first in the collection",
		"scope": "php"
	},
	"$layout->isLast()": {
		"prefix": "->isLast()",
		"body": "->isLast(${1:\\$collection = null})",
		"description": "Checks if the item is the last in the collection",
		"scope": "php"
	},
	"$layout->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the layout is not empty",
		"scope": "php"
	},
	"$layout->isNth()": {
		"prefix": "->isNth()",
		"body": "->isNth(${1:\\$n}, ${2:\\$collection = null})",
		"description": "Checks if the item is at a certain position",
		"scope": "php"
	},
	"$layout->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the Kirby instance",
		"scope": "php"
	},
	"$layout->next()": {
		"prefix": "->next()",
		"body": "->next(${1:\\$collection = null})",
		"description": "Returns the next item in the collection if available",
		"scope": "php"
	},
	"$layout->nextAll()": {
		"prefix": "->nextAll()",
		"body": "->nextAll(${1:\\$collection = null})",
		"description": "Returns the end of the collection starting after the current item",
		"scope": "php"
	},
	"$layout->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$layout->prev()": {
		"prefix": "->prev()",
		"body": "->prev(${1:\\$collection = null})",
		"description": "Returns the previous item in the collection if available",
		"scope": "php"
	},
	"$layout->prevAll()": {
		"prefix": "->prevAll()",
		"body": "->prevAll(${1:\\$collection = null})",
		"description": "Returns the beginning of the collection before the current item",
		"scope": "php"
	},
	"$layout->siblings()": {
		"prefix": "->siblings()",
		"body": "->siblings(${1:\\$self = true})",
		"description": "Returns all sibling elements",
		"scope": "php"
	},
	"$layout->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "The result is being sent to the editor via the API in the panel",
		"scope": "php"
	},
	"$language->baseUrl()": {
		"prefix": "->baseUrl()",
		"body": "->baseUrl()",
		"description": "Returns the base Url for the language without the path or other cruft",
		"scope": "php"
	},
	"$language->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]})",
		"description": "Creates an instance with the same initial properties.",
		"scope": "php"
	},
	"$language->code()": {
		"prefix": "->code()",
		"body": "->code()",
		"description": "Returns the language code/id.",
		"scope": "php"
	},
	"$language->delete()": {
		"prefix": "->delete()",
		"body": "->delete()",
		"description": "Delete the current language and all its translation files",
		"scope": "php"
	},
	"$language->direction()": {
		"prefix": "->direction()",
		"body": "->direction()",
		"description": "Reading direction of this language",
		"scope": "php"
	},
	"$language->exists()": {
		"prefix": "->exists()",
		"body": "->exists()",
		"description": "Check if the language file exists",
		"scope": "php"
	},
	"$language->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$language->id()": {
		"prefix": "->id()",
		"body": "->id()",
		"description": "The id is required for collections to work properly. The code is used as id",
		"scope": "php"
	},
	"$language->isDefault()": {
		"prefix": "->isDefault()",
		"body": "->isDefault()",
		"description": "Checks if this is the default language for the site.",
		"scope": "php"
	},
	"$language->kirby()": {
		"prefix": "->kirby()",
		"body": "->kirby()",
		"description": "Returns the parent Kirby instance",
		"scope": "php"
	},
	"$language->locale()": {
		"prefix": "->locale()",
		"body": "->locale(${1:\\$category = null})",
		"description": "Returns the PHP locale setting array",
		"scope": "php"
	},
	"$language->name()": {
		"prefix": "->name()",
		"body": "->name()",
		"description": "Returns the human-readable name of the language",
		"scope": "php"
	},
	"$language->path()": {
		"prefix": "->path()",
		"body": "->path()",
		"description": "Returns the URL path for the language",
		"scope": "php"
	},
	"$language->pattern()": {
		"prefix": "->pattern()",
		"body": "->pattern()",
		"description": "Returns the routing pattern for the language",
		"scope": "php"
	},
	"$language->root()": {
		"prefix": "->root()",
		"body": "->root()",
		"description": "Returns the absolute path to the language file",
		"scope": "php"
	},
	"$language->router()": {
		"prefix": "->router()",
		"body": "->router()",
		"description": "Returns the LanguageRouter instance which is used to handle language specific routes.",
		"scope": "php"
	},
	"$language->rules()": {
		"prefix": "->rules()",
		"body": "->rules()",
		"description": "Get slug rules for language",
		"scope": "php"
	},
	"$language->save()": {
		"prefix": "->save()",
		"body": "->save()",
		"description": "Saves the language settings in the languages folder",
		"scope": "php"
	},
	"$language->setSite()": {
		"prefix": "->setSite()",
		"body": "->setSite(${1:\\$site = null})",
		"description": "Setter for the parent site object",
		"scope": "php"
	},
	"$language->site()": {
		"prefix": "->site()",
		"body": "->site()",
		"description": "Returns the parent Site instance",
		"scope": "php"
	},
	"$language->slugs()": {
		"prefix": "->slugs()",
		"body": "->slugs()",
		"description": "Returns the custom slug rules for this language",
		"scope": "php"
	},
	"$language->smartypants()": {
		"prefix": "->smartypants()",
		"body": "->smartypants()",
		"description": "Returns the custom SmartyPants options for this language",
		"scope": "php"
	},
	"$language->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Returns the most important properties as array",
		"scope": "php"
	},
	"$language->translations()": {
		"prefix": "->translations()",
		"body": "->translations()",
		"description": "Returns the translation strings for this language",
		"scope": "php"
	},
	"$language->update()": {
		"prefix": "->update()",
		"body": "->update(${1:\\$props = null})",
		"description": "Update language properties and save them",
		"scope": "php"
	},
	"$language->url()": {
		"prefix": "->url()",
		"body": "->url()",
		"description": "Returns the absolute Url for the language",
		"scope": "php"
	},
	"$languages->add()": {
		"prefix": "->add()",
		"body": "->add(${1:\\$object})",
		"description": "Adds a single object or an entire second collection to the current collection",
		"scope": "php"
	},
	"$languages->append()": {
		"prefix": "->append()",
		"body": "->append(${1:\\$args = null})",
		"description": "Appends an element to the data array",
		"scope": "php"
	},
	"$languages->callMethod()": {
		"prefix": "->callMethod()",
		"body": "->callMethod(${1:\\$method}, ${2:\\$args = [ ]})",
		"description": "Calls a registered method class with the passed arguments",
		"scope": "php"
	},
	"$languages->chunk()": {
		"prefix": "->chunk()",
		"body": "->chunk(${1:\\$size})",
		"description": "Creates chunks of the same size.",
		"scope": "php"
	},
	"$languages->clone()": {
		"prefix": "->clone()",
		"body": "->clone()",
		"description": "Returns a cloned instance of the collection",
		"scope": "php"
	},
	"$languages->codes()": {
		"prefix": "->codes()",
		"body": "->codes()",
		"description": "Returns all language codes as array",
		"scope": "php"
	},
	"$languages->count()": {
		"prefix": "->count()",
		"body": "->count()",
		"description": "Counts all elements",
		"scope": "php"
	},
	"$languages->create()": {
		"prefix": "->create()",
		"body": "->create(${1:\\$props})",
		"description": "Creates a new language with the given props",
		"scope": "php"
	},
	"$languages->current()": {
		"prefix": "->current()",
		"body": "->current()",
		"description": "Returns the current element",
		"scope": "php"
	},
	"$languages->data()": {
		"prefix": "->data()",
		"body": "->data(${1:\\$data = null})",
		"description": "Getter and setter for the data",
		"scope": "php"
	},
	"$languages->default()": {
		"prefix": "->default()",
		"body": "->default()",
		"description": "Returns the default language",
		"scope": "php"
	},
	"$languages->empty()": {
		"prefix": "->empty()",
		"body": "->empty()",
		"description": "Clone and remove all elements from the collection",
		"scope": "php"
	},
	"$languages->extend()": {
		"prefix": "->extend()",
		"body": "->extend(${1:\\$items})",
		"description": "Adds all elements to the collection",
		"scope": "php"
	},
	"$languages->filter()": {
		"prefix": "->filter()",
		"body": "->filter(${1:\\$field}, ${2:\\$args = null})",
		"description": "Filters elements by one of the predefined filter methods, by a custom filter function or an array of filters",
		"scope": "php"
	},
	"$languages->filterBy()": {
		"prefix": "->filterBy()",
		"body": "->filterBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::filter`",
		"scope": "php"
	},
	"$languages->find()": {
		"prefix": "->find()",
		"body": "->find(${1:\\$keys = null})",
		"description": "Find one or multiple elements by id",
		"scope": "php"
	},
	"$languages->findBy()": {
		"prefix": "->findBy()",
		"body": "->findBy(${1:\\$attribute}, ${2:\\$value})",
		"description": "Find a single element by an attribute and its value",
		"scope": "php"
	},
	"$languages->findByKey()": {
		"prefix": "->findByKey()",
		"body": "->findByKey(${1:\\$key})",
		"description": "Find a single element by key (id)",
		"scope": "php"
	},
	"$languages->first()": {
		"prefix": "->first()",
		"body": "->first()",
		"description": "Returns the first element",
		"scope": "php"
	},
	"$languages->flip()": {
		"prefix": "->flip()",
		"body": "->flip()",
		"description": "Returns the elements in reverse order",
		"scope": "php"
	},
	"$languages->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key}, ${2:\\$default = null})",
		"description": "Getter",
		"scope": "php"
	},
	"$languages->getAttribute()": {
		"prefix": "->getAttribute()",
		"body": "->getAttribute(${1:\\$item}, ${2:\\$attribute}, ${3:\\$split = false}, ${4:\\$related = null})",
		"description": "Extracts an attribute value from the given element in the collection. This is useful if elements in the collection might be objects, arrays or anything else and you need to get the value independently from that. We use it for `filter`.",
		"scope": "php"
	},
	"$languages->getIterator()": {
		"prefix": "->getIterator()",
		"body": "->getIterator()",
		"description": "Get an iterator for the items.",
		"scope": "php"
	},
	"$languages->group()": {
		"prefix": "->group()",
		"body": "->group(${1:\\$field}, ${2:\\$i = true})",
		"description": "Groups the items by a given field or callback. Returns a collection with an item for each group and a collection for each group.",
		"scope": "php"
	},
	"$languages->groupBy()": {
		"prefix": "->groupBy()",
		"body": "->groupBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::group`",
		"scope": "php"
	},
	"$languages->has()": {
		"prefix": "->has()",
		"body": "->has(${1:\\$key})",
		"description": "Checks if the given object or id is in the collection",
		"scope": "php"
	},
	"$languages->hasMethod()": {
		"prefix": "->hasMethod()",
		"body": "->hasMethod(${1:\\$method})",
		"description": "Checks if the object has a registered method",
		"scope": "php"
	},
	"$languages->indexOf()": {
		"prefix": "->indexOf()",
		"body": "->indexOf(${1:\\$needle})",
		"description": "Correct position detection for objects.",
		"scope": "php"
	},
	"$languages->intersection()": {
		"prefix": "->intersection()",
		"body": "->intersection(${1:\\$other})",
		"description": "Returns a Collection with the intersection of the given elements",
		"scope": "php"
	},
	"$languages->intersects()": {
		"prefix": "->intersects()",
		"body": "->intersects(${1:\\$other})",
		"description": "Checks if there is an intersection between the given collection and this collection",
		"scope": "php"
	},
	"$languages->isEmpty()": {
		"prefix": "->isEmpty()",
		"body": "->isEmpty()",
		"description": "Checks if the number of elements is zero",
		"scope": "php"
	},
	"$languages->isEven()": {
		"prefix": "->isEven()",
		"body": "->isEven()",
		"description": "Checks if the number of elements is even",
		"scope": "php"
	},
	"$languages->isNotEmpty()": {
		"prefix": "->isNotEmpty()",
		"body": "->isNotEmpty()",
		"description": "Checks if the number of elements is more than zero",
		"scope": "php"
	},
	"$languages->isOdd()": {
		"prefix": "->isOdd()",
		"body": "->isOdd()",
		"description": "Checks if the number of elements is odd",
		"scope": "php"
	},
	"$languages->key()": {
		"prefix": "->key()",
		"body": "->key()",
		"description": "Returns the current key",
		"scope": "php"
	},
	"$languages->keyOf()": {
		"prefix": "->keyOf()",
		"body": "->keyOf(${1:\\$needle})",
		"description": "Tries to find the key for the given element",
		"scope": "php"
	},
	"$languages->keys()": {
		"prefix": "->keys()",
		"body": "->keys()",
		"description": "Returns an array of all keys",
		"scope": "php"
	},
	"$languages->last()": {
		"prefix": "->last()",
		"body": "->last()",
		"description": "Returns the last element",
		"scope": "php"
	},
	"$languages->limit()": {
		"prefix": "->limit()",
		"body": "->limit(${1:\\$limit})",
		"description": "Returns a new object with a limited number of elements",
		"scope": "php"
	},
	"$languages->map()": {
		"prefix": "->map()",
		"body": "->map(${1:\\$callback})",
		"description": "Map a function to each element",
		"scope": "php"
	},
	"$languages->next()": {
		"prefix": "->next()",
		"body": "->next()",
		"description": "Moves the cursor to the next element and returns it",
		"scope": "php"
	},
	"$languages->not()": {
		"prefix": "->not()",
		"body": "->not(${1:\\$keys = null})",
		"description": "Returns a Collection without the given element(s)",
		"scope": "php"
	},
	"$languages->nth()": {
		"prefix": "->nth()",
		"body": "->nth(${1:\\$n})",
		"description": "Returns the nth element from the collection",
		"scope": "php"
	},
	"$languages->offset()": {
		"prefix": "->offset()",
		"body": "->offset(${1:\\$offset})",
		"description": "Returns a new object starting from the given offset",
		"scope": "php"
	},
	"$languages->paginate()": {
		"prefix": "->paginate()",
		"body": "->paginate(${1:\\$arguments = null})",
		"description": "Add pagination and return a sliced set of data.",
		"scope": "php"
	},
	"$languages->pagination()": {
		"prefix": "->pagination()",
		"body": "->pagination()",
		"description": "Get the previously added pagination object",
		"scope": "php"
	},
	"$languages->parent()": {
		"prefix": "->parent()",
		"body": "->parent()",
		"description": "Returns the parent model",
		"scope": "php"
	},
	"$languages->pluck()": {
		"prefix": "->pluck()",
		"body": "->pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
		"description": "Extracts all values for a single field into a new array",
		"scope": "php"
	},
	"$languages->prepend()": {
		"prefix": "->prepend()",
		"body": "->prepend(${1:\\$args = null})",
		"description": "Prepends an element to the data array",
		"scope": "php"
	},
	"$languages->prev()": {
		"prefix": "->prev()",
		"body": "->prev()",
		"description": "Moves the cursor to the previous element and returns it",
		"scope": "php"
	},
	"$languages->query()": {
		"prefix": "->query()",
		"body": "->query(${1:\\$arguments = [ ]})",
		"description": "Runs a combination of filter, sort, not, offset, limit, search and paginate on the collection.",
		"scope": "php"
	},
	"$languages->random()": {
		"prefix": "->random()",
		"body": "->random(${1:\\$count = 1}, ${2:\\$shuffle = false})",
		"description": "Returns a new collection consisting of random elements, from the original collection, shuffled or ordered",
		"scope": "php"
	},
	"$languages->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes an object",
		"scope": "php"
	},
	"$languages->rewind()": {
		"prefix": "->rewind()",
		"body": "->rewind()",
		"description": "Moves the cursor to the first element",
		"scope": "php"
	},
	"$languages->search()": {
		"prefix": "->search()",
		"body": "->search(${1:\\$query = null}, ${2:\\$params = [ ]})",
		"description": "Searches the collection",
		"scope": "php"
	},
	"$languages->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Adds a new element to the collection",
		"scope": "php"
	},
	"$languages->shuffle()": {
		"prefix": "->shuffle()",
		"body": "->shuffle()",
		"description": "Shuffle all elements",
		"scope": "php"
	},
	"$languages->slice()": {
		"prefix": "->slice()",
		"body": "->slice(${1:\\$offset = 0}, ${2:\\$limit = null})",
		"description": "Returns a slice of the object",
		"scope": "php"
	},
	"$languages->sort()": {
		"prefix": "->sort()",
		"body": "->sort()",
		"description": "Sorts the elements by any number of fields",
		"scope": "php"
	},
	"$languages->sortBy()": {
		"prefix": "->sortBy()",
		"body": "->sortBy(${1:\\$args = null})",
		"description": "Alias for `Kirby\\Toolkit\\Collection::sort`",
		"scope": "php"
	},
	"$languages->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray(${1:\\$map = null})",
		"description": "Converts all objects in the collection to an array. This can also take a callback function to further modify the array result.",
		"scope": "php"
	},
	"$languages->toJson()": {
		"prefix": "->toJson()",
		"body": "->toJson()",
		"description": "Converts the object into a JSON string",
		"scope": "php"
	},
	"$languages->toString()": {
		"prefix": "->toString()",
		"body": "->toString()",
		"description": "Converts the object to a string",
		"scope": "php"
	},
	"$languages->valid()": {
		"prefix": "->valid()",
		"body": "->valid()",
		"description": "Checks if the current element is valid",
		"scope": "php"
	},
	"$languages->values()": {
		"prefix": "->values()",
		"body": "->values(${1:\\$map = null})",
		"description": "Returns a non-associative array with all values. If a mapping Closure is passed, all values are processed by the Closure.",
		"scope": "php"
	},
	"$languages->when()": {
		"prefix": "->when()",
		"body": "->when(${1:\\$condition}, ${2:\\$callback}, ${3:\\$fallback = null})",
		"description": "The when method only executes the given Closure when the first parameter is true. If the first parameter is false, the Closure will not be executed.",
		"scope": "php"
	},
	"$languages->without()": {
		"prefix": "->without()",
		"body": "->without(${1:\\$keys = null})",
		"description": "Alias for $this-&gt;not()",
		"scope": "php"
	},
	"$pagination->clone()": {
		"prefix": "->clone()",
		"body": "->clone(${1:\\$props = [ ]})",
		"description": "Creates an instance with the same initial properties.",
		"scope": "php"
	},
	"$pagination->end()": {
		"prefix": "->end()",
		"body": "->end()",
		"description": "Returns the index of the last item on the page",
		"scope": "php"
	},
	"$pagination->firstPage()": {
		"prefix": "->firstPage()",
		"body": "->firstPage()",
		"description": "Returns the first page",
		"scope": "php"
	},
	"$pagination->firstPageUrl()": {
		"prefix": "->firstPageUrl()",
		"body": "->firstPageUrl()",
		"description": "Returns the Url for the first page",
		"scope": "php"
	},
	"$pagination->hardcopy()": {
		"prefix": "->hardcopy()",
		"body": "->hardcopy()",
		"description": "Creates a clone and fetches all lazy-loaded getters to get a full copy",
		"scope": "php"
	},
	"$pagination->hasNextPage()": {
		"prefix": "->hasNextPage()",
		"body": "->hasNextPage()",
		"description": "Checks if there’s a next page",
		"scope": "php"
	},
	"$pagination->hasPage()": {
		"prefix": "->hasPage()",
		"body": "->hasPage(${1:\\$page})",
		"description": "Checks if the given page exists",
		"scope": "php"
	},
	"$pagination->hasPages()": {
		"prefix": "->hasPages()",
		"body": "->hasPages()",
		"description": "Checks if there are any pages at all",
		"scope": "php"
	},
	"$pagination->hasPrevPage()": {
		"prefix": "->hasPrevPage()",
		"body": "->hasPrevPage()",
		"description": "Checks if there’s a previous page",
		"scope": "php"
	},
	"$pagination->isFirstPage()": {
		"prefix": "->isFirstPage()",
		"body": "->isFirstPage()",
		"description": "Checks if the current page is the first page",
		"scope": "php"
	},
	"$pagination->isLastPage()": {
		"prefix": "->isLastPage()",
		"body": "->isLastPage()",
		"description": "Checks if the current page is the last page",
		"scope": "php"
	},
	"$pagination->lastPage()": {
		"prefix": "->lastPage()",
		"body": "->lastPage()",
		"description": "Returns the last page",
		"scope": "php"
	},
	"$pagination->lastPageUrl()": {
		"prefix": "->lastPageUrl()",
		"body": "->lastPageUrl()",
		"description": "Returns the Url for the last page",
		"scope": "php"
	},
	"$pagination->limit()": {
		"prefix": "->limit()",
		"body": "->limit()",
		"description": "Getter for the number of items per page",
		"scope": "php"
	},
	"$pagination->nextPage()": {
		"prefix": "->nextPage()",
		"body": "->nextPage()",
		"description": "Returns the next page",
		"scope": "php"
	},
	"$pagination->nextPageUrl()": {
		"prefix": "->nextPageUrl()",
		"body": "->nextPageUrl()",
		"description": "Returns the Url for the next page.",
		"scope": "php"
	},
	"$pagination->offset()": {
		"prefix": "->offset()",
		"body": "->offset()",
		"description": "Returns the offset (i.e. for db queries)",
		"scope": "php"
	},
	"$pagination->page()": {
		"prefix": "->page()",
		"body": "->page()",
		"description": "Getter for the current page",
		"scope": "php"
	},
	"$pagination->pageUrl()": {
		"prefix": "->pageUrl()",
		"body": "->pageUrl(${1:\\$page = null})",
		"description": "Returns the URL of the current page.",
		"scope": "php"
	},
	"$pagination->pages()": {
		"prefix": "->pages()",
		"body": "->pages()",
		"description": "Returns the total number of pages",
		"scope": "php"
	},
	"$pagination->prevPage()": {
		"prefix": "->prevPage()",
		"body": "->prevPage()",
		"description": "Returns the previous page",
		"scope": "php"
	},
	"$pagination->prevPageUrl()": {
		"prefix": "->prevPageUrl()",
		"body": "->prevPageUrl()",
		"description": "Returns the Url for the previous page.",
		"scope": "php"
	},
	"$pagination->range()": {
		"prefix": "->range()",
		"body": "->range(${1:\\$range = 5})",
		"description": "Creates a range of page numbers for Google-like pagination",
		"scope": "php"
	},
	"$pagination->rangeEnd()": {
		"prefix": "->rangeEnd()",
		"body": "->rangeEnd(${1:\\$range = 5})",
		"description": "Returns the last page of the created range",
		"scope": "php"
	},
	"$pagination->rangeStart()": {
		"prefix": "->rangeStart()",
		"body": "->rangeStart(${1:\\$range = 5})",
		"description": "Returns the first page of the created range",
		"scope": "php"
	},
	"$pagination->start()": {
		"prefix": "->start()",
		"body": "->start()",
		"description": "Returns the index of the first item on the page",
		"scope": "php"
	},
	"$pagination->toArray()": {
		"prefix": "->toArray()",
		"body": "->toArray()",
		"description": "Returns an array with all properties",
		"scope": "php"
	},
	"$pagination->total()": {
		"prefix": "->total()",
		"body": "->total()",
		"description": "Getter for the total number of items",
		"scope": "php"
	},
	"$request->auth()": {
		"prefix": "->auth()",
		"body": "->auth()",
		"description": "Returns the Auth object if authentication is set",
		"scope": "php"
	},
	"$request->body()": {
		"prefix": "->body()",
		"body": "->body()",
		"description": "Returns the Body object",
		"scope": "php"
	},
	"$request->cli()": {
		"prefix": "->cli()",
		"body": "->cli()",
		"description": "Checks if the request has been made from the command line",
		"scope": "php"
	},
	"$request->csrf()": {
		"prefix": "->csrf()",
		"body": "->csrf()",
		"description": "Returns a CSRF token if stored in a header or the query",
		"scope": "php"
	},
	"$request->data()": {
		"prefix": "->data()",
		"body": "->data()",
		"description": "Returns the request input as array",
		"scope": "php"
	},
	"$request->detectRequestMethod()": {
		"prefix": "->detectRequestMethod()",
		"body": "->detectRequestMethod(${1:\\$method = null})",
		"description": "Detect the request method from various options: given method, query string, server vars",
		"scope": "php"
	},
	"$request->domain()": {
		"prefix": "->domain()",
		"body": "->domain()",
		"description": "Returns the domain",
		"scope": "php"
	},
	"$request->file()": {
		"prefix": "->file()",
		"body": "->file(${1:\\$key})",
		"description": "Fetches a single file array from the Files object by key",
		"scope": "php"
	},
	"$request->files()": {
		"prefix": "->files()",
		"body": "->files()",
		"description": "Returns the Files object",
		"scope": "php"
	},
	"$request->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key = null}, ${2:\\$fallback = null})",
		"description": "Returns any data field from the request if it exists",
		"scope": "php"
	},
	"$request->hasAuth()": {
		"prefix": "->hasAuth()",
		"body": "->hasAuth()",
		"description": "Returns whether the request contains the `Authorization` header",
		"scope": "php"
	},
	"$request->header()": {
		"prefix": "->header()",
		"body": "->header(${1:\\$key}, ${2:\\$fallback = null})",
		"description": "Returns a header by key if it exists",
		"scope": "php"
	},
	"$request->headers()": {
		"prefix": "->headers()",
		"body": "->headers()",
		"description": "Return all headers with polyfill for missing getallheaders function",
		"scope": "php"
	},
	"$request->is()": {
		"prefix": "->is()",
		"body": "->is(${1:\\$method})",
		"description": "Checks if the given method name matches the name of the request method.",
		"scope": "php"
	},
	"$request->method()": {
		"prefix": "->method()",
		"body": "->method()",
		"description": "Returns the request method",
		"scope": "php"
	},
	"$request->params()": {
		"prefix": "->params()",
		"body": "->params()",
		"description": "Shortcut to the Params object",
		"scope": "php"
	},
	"$request->path()": {
		"prefix": "->path()",
		"body": "->path()",
		"description": "Shortcut to the Path object",
		"scope": "php"
	},
	"$request->query()": {
		"prefix": "->query()",
		"body": "->query()",
		"description": "Returns the Query object",
		"scope": "php"
	},
	"$request->ssl()": {
		"prefix": "->ssl()",
		"body": "->ssl()",
		"description": "Checks for a valid SSL connection",
		"scope": "php"
	},
	"$request->url()": {
		"prefix": "->url()",
		"body": "->url(${1:\\$props = null})",
		"description": "Returns the current Uri object.",
		"scope": "php"
	},
	"$session->clear()": {
		"prefix": "->clear()",
		"body": "->clear()",
		"description": "Clears all session data",
		"scope": "php"
	},
	"$session->decrement()": {
		"prefix": "->decrement()",
		"body": "->decrement(${1:\\$key}, ${2:\\$by = 1}, ${3:\\$min = null})",
		"description": "Decrements one or multiple session values by a specified amount",
		"scope": "php"
	},
	"$session->get()": {
		"prefix": "->get()",
		"body": "->get(${1:\\$key = null}, ${2:\\$default = null})",
		"description": "Returns one or all session values by key",
		"scope": "php"
	},
	"$session->increment()": {
		"prefix": "->increment()",
		"body": "->increment(${1:\\$key}, ${2:\\$by = 1}, ${3:\\$max = null})",
		"description": "Increments one or multiple session values by a specified amount",
		"scope": "php"
	},
	"$session->pull()": {
		"prefix": "->pull()",
		"body": "->pull(${1:\\$key}, ${2:\\$default = null})",
		"description": "Retrieves a value and removes it afterwards",
		"scope": "php"
	},
	"$session->reload()": {
		"prefix": "->reload()",
		"body": "->reload(${1:\\$data})",
		"description": "Reloads the data array with the current session data Only used internally",
		"scope": "php"
	},
	"$session->remove()": {
		"prefix": "->remove()",
		"body": "->remove(${1:\\$key})",
		"description": "Removes one or multiple session values by key",
		"scope": "php"
	},
	"$session->set()": {
		"prefix": "->set()",
		"body": "->set(${1:\\$key}, ${2:\\$value = null})",
		"description": "Sets one or multiple session values by key",
		"scope": "php"
	}
}
