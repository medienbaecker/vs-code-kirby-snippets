{
    "$camera->make()": {
        "prefix": "make()",
        "body": "make()",
        "description": "Returns the camera brand\/make",
        "scope": "php"
    },
    "$camera->model()": {
        "prefix": "model()",
        "body": "model()",
        "description": "Returns the name of the camera model",
        "scope": "php"
    },
    "$camera->toArray()": {
        "prefix": "toArray()",
        "body": "toArray()",
        "description": "Returns the make and model as associative array.",
        "scope": "php"
    },
    "$content->data()": {
        "prefix": "data()",
        "body": "data()",
        "description": "Returns the entire data array with all field objects",
        "scope": "php"
    },
    "$content([$lang])->exists()": {
        "prefix": "exists()",
        "body": "exists()",
        "description": "Checks if the content file exists",
        "scope": "php"
    },
    "$content([$lang])->fields()": {
        "prefix": "fields()",
        "body": "fields()",
        "description": "Returns an array with all field names",
        "scope": "php"
    },
    "$content([$lang])->get($key, $arguments = null)": {
        "prefix": "get($key, $arguments = null)",
        "body": "get(${1:\\$key}, ${2:\\$arguments = null})",
        "description": "Gets a field from the content",
        "scope": "php"
    },
    "$content([$lang])->has($key)": {
        "prefix": "has($key)",
        "body": "has(${1:\\$key})",
        "description": "Checks if a field exists",
        "scope": "php"
    },
    "$content->language()": {
        "prefix": "language()",
        "body": "language()",
        "description": "Return the language code for the content",
        "scope": "php"
    },
    "$content->name()": {
        "prefix": "name()",
        "body": "name()",
        "description": "Returns the name of the content file without the extension. This is being used to determine the template for the page",
        "scope": "php"
    },
    "$content([$lang])->raw()": {
        "prefix": "raw()",
        "body": "raw()",
        "description": "Returns the raw content from the file",
        "scope": "php"
    },
    "$content([$lang])->root()": {
        "prefix": "root()",
        "body": "root()",
        "description": "Returns the root for the content file",
        "scope": "php"
    },
    "$content([$lang])->toArray()": {
        "prefix": "toArray()",
        "body": "toArray()",
        "description": "Returns the content object as array",
        "scope": "php"
    },
    "$dimension->fit()": {
        "prefix": "fit()",
        "body": "fit()",
        "description": "Fits the width and height into a box by the given value and returns a modified dimension object",
        "scope": "php"
    },
    "$dimension->fitHeight()": {
        "prefix": "fitHeight()",
        "body": "fitHeight()",
        "description": "Fits the height by the given value and returns a modified dimension object",
        "scope": "php"
    },
    "$dimension->fitWidth()": {
        "prefix": "fitWidth()",
        "body": "fitWidth()",
        "description": "Fits the width by the given value and returns a modified dimension object",
        "scope": "php"
    },
    "$dimension->fitWidthAndHeight()": {
        "prefix": "fitWidthAndHeight()",
        "body": "fitWidthAndHeight()",
        "description": "Fits the width and height by the given values and returns a modified dimension object",
        "scope": "php"
    },
    "$dimension->height()": {
        "prefix": "height()",
        "body": "height()",
        "description": "Returns the height in pixels",
        "scope": "php"
    },
    "$dimension->landscape()": {
        "prefix": "landscape()",
        "body": "landscape()",
        "description": "Checks if the dimensions are \"landscape\"",
        "scope": "php"
    },
    "$dimension->orientation()": {
        "prefix": "orientation()",
        "body": "orientation()",
        "description": "Returns the orientation of the image as string (landscape|portrait|square)",
        "scope": "php"
    },
    "$dimension->portrait()": {
        "prefix": "portrait()",
        "body": "portrait()",
        "description": "Checks if the dimensions are \"portrait\"",
        "scope": "php"
    },
    "$dimension->ratio()": {
        "prefix": "ratio()",
        "body": "ratio()",
        "description": "Returns the ratio",
        "scope": "php"
    },
    "$dimension->square()": {
        "prefix": "square()",
        "body": "square()",
        "description": "Checks if the dimensions are square",
        "scope": "php"
    },
    "$dimension->width()": {
        "prefix": "width()",
        "body": "width()",
        "description": "Returns the width in pixels",
        "scope": "php"
    },
    "$exif->aperture()": {
        "prefix": "aperture()",
        "body": "aperture()",
        "description": "Returns the aperture value of the image, if it is available in the exif data set.",
        "scope": "php"
    },
    "$exif->camera()": {
        "prefix": "camera()",
        "body": "camera()",
        "description": "Returns the $camera object for the image, which contains the make and model.",
        "scope": "php"
    },
    "$exif->data()": {
        "prefix": "data()",
        "body": "data()",
        "description": "Returns the full exif data set as a raw array.",
        "scope": "php"
    },
    "$exif->exposure()": {
        "prefix": "exposure()",
        "body": "exposure()",
        "description": "Returns the exposure value of the image, if it is available in the exif data set.",
        "scope": "php"
    },
    "$exif->focalLength()": {
        "prefix": "focalLength()",
        "body": "focalLength()",
        "description": "Returns the focal length of the image, if it is available in the exif data set.",
        "scope": "php"
    },
    "$exif->isBW()": {
        "prefix": "isBW()",
        "body": "isBW()",
        "description": "Checks if the image colorspace is grayscale",
        "scope": "php"
    },
    "$exif->isColor()": {
        "prefix": "isColor()",
        "body": "isColor()",
        "description": "Checks if the image colorspace is either RGB or CMYK",
        "scope": "php"
    },
    "$exif->iso()": {
        "prefix": "iso()",
        "body": "iso()",
        "description": "Returns the iso value of the image, if it is available in the exif data set.",
        "scope": "php"
    },
    "$exif->location()": {
        "prefix": "location()",
        "body": "location()",
        "description": "Returns the $location object for the image if the image has GPS data.",
        "scope": "php"
    },
    "$exif->timestamp()": {
        "prefix": "timestamp()",
        "body": "timestamp()",
        "description": "Returns the unix timestamp of when the image was taken.",
        "scope": "php"
    },
    "$exif->toArray()": {
        "prefix": "toArray()",
        "body": "toArray()",
        "description": "Returns an associative array of all available exif data.",
        "scope": "php"
    },
    "$field->bool()": {
        "prefix": "bool()",
        "body": "bool()",
        "description": "Converts the field value into a proper boolean",
        "scope": "php"
    },
    "$field->empty()": {
        "prefix": "empty()",
        "body": "empty()",
        "description": "Checks if the field is empty",
        "scope": "php"
    },
    "$field->escape()": {
        "prefix": "escape()",
        "body": "escape()",
        "description": "Escapes all critical characters from the field content to make sure all you get is clean HTML",
        "scope": "php"
    },
    "$field->excerpt($length = 140, $mode = 'chars')": {
        "prefix": "excerpt($length = 140, $mode = 'chars')",
        "body": "excerpt(${1:\\$length = 140}, ${2:\\$mode = 'chars'})",
        "description": "Creates a short text excerpt",
        "scope": "php"
    },
    "$field->exists()": {
        "prefix": "exists()",
        "body": "exists()",
        "description": "Checks if the field exists.",
        "scope": "php"
    },
    "$field->float()": {
        "prefix": "float()",
        "body": "float()",
        "description": "Converts the field value into a proper float",
        "scope": "php"
    },
    "$field->html()": {
        "prefix": "html()",
        "body": "html()",
        "description": "Converts the field content to valid HTML",
        "scope": "php"
    },
    "$field->int()": {
        "prefix": "int()",
        "body": "int()",
        "description": "Converts the field value into a proper integer",
        "scope": "php"
    },
    "$field->isEmpty()": {
        "prefix": "isEmpty()",
        "body": "isEmpty()",
        "description": "Checks if the field is empty",
        "scope": "php"
    },
    "$field->isFalse()": {
        "prefix": "isFalse()",
        "body": "isFalse()",
        "description": "Converts the field value into a proper boolean and inverts it",
        "scope": "php"
    },
    "$field->isNotEmpty()": {
        "prefix": "isNotEmpty()",
        "body": "isNotEmpty()",
        "description": "Checks if the field is not empty",
        "scope": "php"
    },
    "$field->isTranslated($lang = null)": {
        "prefix": "isTranslated($lang = null)",
        "body": "isTranslated(${1:\\$lang = null})",
        "description": "Checks if the field is translated in the current\/specified language",
        "scope": "php"
    },
    "$field->isTrue()": {
        "prefix": "isTrue()",
        "body": "isTrue()",
        "description": "Converts the field value into a proper boolean",
        "scope": "php"
    },
    "$field->key()": {
        "prefix": "key()",
        "body": "key()",
        "description": "Returns the name of the field.",
        "scope": "php"
    },
    "$field->kirbytext()": {
        "prefix": "kirbytext()",
        "body": "kirbytext()",
        "description": "Converts the field content from Markdown\/Kirbytext to valid HTML",
        "scope": "php"
    },
    "$field->kt()": {
        "prefix": "kt()",
        "body": "kt()",
        "description": "Converts the field content from Markdown\/Kirbytext to valid HTML",
        "scope": "php"
    },
    "$field->length()": {
        "prefix": "length()",
        "body": "length()",
        "description": "Returns the length of the field content",
        "scope": "php"
    },
    "$field->link()": {
        "prefix": "link()",
        "body": "link()",
        "description": "Creates a link for any field value",
        "scope": "php"
    },
    "$field->lower()": {
        "prefix": "lower()",
        "body": "lower()",
        "description": "Converts the field content to lowercase",
        "scope": "php"
    },
    "$field->markdown()": {
        "prefix": "markdown()",
        "body": "markdown()",
        "description": "Converts markdown to valid HTML",
        "scope": "php"
    },
    "$field->or($alternative)": {
        "prefix": "or($alternative)",
        "body": "or(${1:\\$alternative})",
        "description": "Checks if the field is empty and returns an alternative value in this case",
        "scope": "php"
    },
    "$field->pages()": {
        "prefix": "pages()",
        "body": "pages()",
        "description": "Converts a yaml list of page URIs to valid page objects",
        "scope": "php"
    },
    "$field->short($chars)": {
        "prefix": "short($chars)",
        "body": "short(${1:\\$chars})",
        "description": "Shortens the field content by the given length",
        "scope": "php"
    },
    "$field->smartypants()": {
        "prefix": "smartypants()",
        "body": "smartypants()",
        "description": "Applies SmartyPants to the field",
        "scope": "php"
    },
    "$field->split($separator = ',')": {
        "prefix": "split($separator = ',')",
        "body": "split(${1:\\$separator = ','})",
        "description": "Splits the field content into an array",
        "scope": "php"
    },
    "$field->toFile()": {
        "prefix": "toFile()",
        "body": "toFile()",
        "description": "Returns a file object from a filename in the field",
        "scope": "php"
    },
    "$field->toPage()": {
        "prefix": "toPage()",
        "body": "toPage()",
        "description": "Returns a page object from a uri in the field",
        "scope": "php"
    },
    "$field->toStructure()": {
        "prefix": "toStructure()",
        "body": "toStructure()",
        "description": "Converts a yaml field to a Structure object",
        "scope": "php"
    },
    "$field->toUrl()": {
        "prefix": "toUrl()",
        "body": "toUrl()",
        "description": "Creates an URL for any field value",
        "scope": "php"
    },
    "$field->upper()": {
        "prefix": "upper()",
        "body": "upper()",
        "description": "Converts the field content to uppercase",
        "scope": "php"
    },
    "$field->value()": {
        "prefix": "value()",
        "body": "value()",
        "description": "Returns the value of a field as string.",
        "scope": "php"
    },
    "$field->widont()": {
        "prefix": "widont()",
        "body": "widont()",
        "description": "Avoids typographical widows in strings by replacing the last space with `&nbsp;`",
        "scope": "php"
    },
    "$field->words()": {
        "prefix": "words()",
        "body": "words()",
        "description": "Returns the number of words in the text",
        "scope": "php"
    },
    "$field->xml()": {
        "prefix": "xml()",
        "body": "xml()",
        "description": "Converts the field content to valid XML",
        "scope": "php"
    },
    "$field->yaml()": {
        "prefix": "yaml()",
        "body": "yaml()",
        "description": "Converts YAML-structured field content to an array",
        "scope": "php"
    },
    "$file->base64()": {
        "prefix": "base64()",
        "body": "base64()",
        "description": "Returns the content of the file as base64 encoded string",
        "scope": "php"
    },
    "$file->blur()": {
        "prefix": "blur()",
        "body": "blur()",
        "description": "Applies a blur filter to the image",
        "scope": "php"
    },
    "$file->bw($bw)": {
        "prefix": "bw($bw)",
        "body": "bw(${1:\\$bw})",
        "description": "Converts the image to grayscale",
        "scope": "php"
    },
    "$file->createNewFilename($name, $safeName = true)": {
        "prefix": "createNewFilename($name, $safeName = true)",
        "body": "createNewFilename(${1:\\$name}, ${2:\\$safeName = true})",
        "description": "Generates a new filename for a given name and makes sure to handle badly given extensions correctly",
        "scope": "php"
    },
    "$file->crop($width, $height = null, $quality = null)": {
        "prefix": "crop($width, $height = null, $quality = null)",
        "body": "crop(${1:\\$width}, ${2:\\$height = null}, ${3:\\$quality = null})",
        "description": "Crops the image by width and optionally by height",
        "scope": "php"
    },
    "$file->dataUri()": {
        "prefix": "dataUri()",
        "body": "dataUri()",
        "description": "Returns a full base64 encoded data uri with a proper mime type",
        "scope": "php"
    },
    "$file->date($format = null, $field = 'date')": {
        "prefix": "date($format = null, $field = 'date')",
        "body": "date(${1:\\$format = null}, ${2:\\$field = 'date'})",
        "description": "Returns a unix timestamp or formatted date string from the file's meta date field or any other field containing a parsable date",
        "scope": "php"
    },
    "$file->delete()": {
        "prefix": "delete()",
        "body": "delete()",
        "description": "Deletes the file. This cannot be undone.",
        "scope": "php"
    },
    "$file->dimensions()": {
        "prefix": "dimensions()",
        "body": "dimensions()",
        "description": "Returns the $dimensions object for the file. This is only available for images (jpg, png, gif)",
        "scope": "php"
    },
    "$file->dir()": {
        "prefix": "dir()",
        "body": "dir()",
        "description": "Returns the full path for the directory, in which the file is located",
        "scope": "php"
    },
    "$file->diruri()": {
        "prefix": "diruri()",
        "body": "diruri()",
        "description": "Returns the relative path for the file",
        "scope": "php"
    },
    "$file->download($filename = null)": {
        "prefix": "download($filename = null)",
        "body": "download(${1:\\$filename = null})",
        "description": "Sends all needed headers and the content to force the browser to download the file",
        "scope": "php"
    },
    "$file->exif()": {
        "prefix": "exif()",
        "body": "exif()",
        "description": "Returns the $exif object for the file, which can be used to fetch information such as the camera model or GPS data",
        "scope": "php"
    },
    "$file->extension()": {
        "prefix": "extension()",
        "body": "extension()",
        "description": "Returns the file extension",
        "scope": "php"
    },
    "$file->filename()": {
        "prefix": "filename()",
        "body": "filename()",
        "description": "Returns the full filename including extension",
        "scope": "php"
    },
    "$file->files()": {
        "prefix": "files()",
        "body": "files()",
        "description": "Returns the collection of sibling files including the current object",
        "scope": "php"
    },
    "$file->hasNext()": {
        "prefix": "hasNext()",
        "body": "hasNext()",
        "description": "Checks if there's a next sibling",
        "scope": "php"
    },
    "$file->hasPrev()": {
        "prefix": "hasPrev()",
        "body": "hasPrev()",
        "description": "Checks if there's a previous sibling",
        "scope": "php"
    },
    "$file->hash()": {
        "prefix": "hash()",
        "body": "hash()",
        "description": "Returns an md5 hash for the root of the file",
        "scope": "php"
    },
    "$file->height()": {
        "prefix": "height()",
        "body": "height()",
        "description": "Returns the height of image files in pixels",
        "scope": "php"
    },
    "$file->isLandscape()": {
        "prefix": "isLandscape()",
        "body": "isLandscape()",
        "description": "Checks if an image file has been taken in landscape mode",
        "scope": "php"
    },
    "$file->isPortrait()": {
        "prefix": "isPortrait()",
        "body": "isPortrait()",
        "description": "Checks if an image file has been taken in portrait mode",
        "scope": "php"
    },
    "$file->isReadable()": {
        "prefix": "isReadable()",
        "body": "isReadable()",
        "description": "Checks if the file is readable",
        "scope": "php"
    },
    "$file->isSquare()": {
        "prefix": "isSquare()",
        "body": "isSquare()",
        "description": "Checks if the image is square",
        "scope": "php"
    },
    "$file->isWebsafe()": {
        "prefix": "isWebsafe()",
        "body": "isWebsafe()",
        "description": "Checks if the file is a jpg, png or gif",
        "scope": "php"
    },
    "$file->isWritable()": {
        "prefix": "isWritable()",
        "body": "isWritable()",
        "description": "Checks if the file is writable",
        "scope": "php"
    },
    "$file->kirby()": {
        "prefix": "kirby()",
        "body": "kirby()",
        "description": "Returns the kirby object",
        "scope": "php"
    },
    "$file->meta([$language])": {
        "prefix": "meta([$language])",
        "body": "meta()",
        "description": "Returns the file's $content object with data from the meta file",
        "scope": "php"
    },
    "$file->mime()": {
        "prefix": "mime()",
        "body": "mime()",
        "description": "Returns the file's mime type",
        "scope": "php"
    },
    "$file->modified($format = false, $handler = null)": {
        "prefix": "modified($format = false, $handler = null)",
        "body": "modified(${1:\\$format = false}, ${2:\\$handler = null})",
        "description": "Returns the unix timestamp or a formatted date for when the file has been modified",
        "scope": "php"
    },
    "$file->name()": {
        "prefix": "name()",
        "body": "name()",
        "description": "Returns the name of the file without extension",
        "scope": "php"
    },
    "$file->next()": {
        "prefix": "next()",
        "body": "next()",
        "description": "Returns the next sibling",
        "scope": "php"
    },
    "$file->niceSize()": {
        "prefix": "niceSize()",
        "body": "niceSize()",
        "description": "Returns the size of the file in a human readable format",
        "scope": "php"
    },
    "$file->orientation()": {
        "prefix": "orientation()",
        "body": "orientation()",
        "description": "Returns the orientation of image files as a string (landscape, portrait, square)",
        "scope": "php"
    },
    "$file->original()": {
        "prefix": "original()",
        "body": "original()",
        "description": "Returns the reference to the original file (for thumbnails)",
        "scope": "php"
    },
    "$file->page()": {
        "prefix": "page()",
        "body": "page()",
        "description": "Returns the page object for a file",
        "scope": "php"
    },
    "$file->prev()": {
        "prefix": "prev()",
        "body": "prev()",
        "description": "Returns the previous sibling",
        "scope": "php"
    },
    "$file->ratio()": {
        "prefix": "ratio()",
        "body": "ratio()",
        "description": "Returns the ratio of an image file",
        "scope": "php"
    },
    "$file->read($format = null)": {
        "prefix": "read($format = null)",
        "body": "read(${1:\\$format = null})",
        "description": "Reads the content of the file and returns it",
        "scope": "php"
    },
    "$file->rename($name, $safeName = true)": {
        "prefix": "rename($name, $safeName = true)",
        "body": "rename(${1:\\$name}, ${2:\\$safeName = true})",
        "description": "Renames the file and all the meta text files",
        "scope": "php"
    },
    "$file->resize($width, $height = null, $quality = null)": {
        "prefix": "resize($width, $height = null, $quality = null)",
        "body": "resize(${1:\\$width}, ${2:\\$height = null}, ${3:\\$quality = null})",
        "description": "Resizes the image by width and optionally by height",
        "scope": "php"
    },
    "$file->root()": {
        "prefix": "root()",
        "body": "root()",
        "description": "Returns the full root for a file",
        "scope": "php"
    },
    "$file->scale($by)": {
        "prefix": "scale($by)",
        "body": "scale(${1:\\$by})",
        "description": "Scales the image up or down by value",
        "scope": "php"
    },
    "$file->siblings()": {
        "prefix": "siblings()",
        "body": "siblings()",
        "description": "Returns all siblings of the file",
        "scope": "php"
    },
    "$file->site()": {
        "prefix": "site()",
        "body": "site()",
        "description": "Returns the site object",
        "scope": "php"
    },
    "$file->size()": {
        "prefix": "size()",
        "body": "size()",
        "description": "Returns the raw file size",
        "scope": "php"
    },
    "$file->textfile([$language])": {
        "prefix": "textfile([$language])",
        "body": "textfile()",
        "description": "Returns the root for the meta file of the file",
        "scope": "php"
    },
    "$file->thumb($params)": {
        "prefix": "thumb($params)",
        "body": "thumb(${1:\\$params})",
        "description": "Sets all parameters for the thumb generator at once.",
        "scope": "php"
    },
    "$file->toArray($callback = null)": {
        "prefix": "toArray($callback = null)",
        "body": "toArray(${1:\\$callback = null})",
        "description": "Converts the entire file object into a plain PHP array",
        "scope": "php"
    },
    "$file->type()": {
        "prefix": "type()",
        "body": "type()",
        "description": "Returns the file type (image, document, video, archive, code, audio, unkown)",
        "scope": "php"
    },
    "$file->update($data = array()[, $language])": {
        "prefix": "update($data = array()[, $language])",
        "body": "update(${1:\\$data = array()})",
        "description": "Updates the meta information for a file",
        "scope": "php"
    },
    "$file->uri()": {
        "prefix": "uri()",
        "body": "uri()",
        "description": "Returns the cleaned up relative path for the file",
        "scope": "php"
    },
    "$file->url()": {
        "prefix": "url()",
        "body": "url()",
        "description": "Returns the absolute URL for a file",
        "scope": "php"
    },
    "$file->width()": {
        "prefix": "width()",
        "body": "width()",
        "description": "Returns the width of image files in pixels",
        "scope": "php"
    },
    "$files->count()": {
        "prefix": "count()",
        "body": "count()",
        "description": "Returns the number of files in the collection",
        "scope": "php"
    },
    "$files->filter($callback)": {
        "prefix": "filter($callback)",
        "body": "filter(${1:\\$callback})",
        "description": "Applies a filter callback to each item in the collection",
        "scope": "php"
    },
    "$files->filterBy($key [, $operator], $value [, $split])": {
        "prefix": "filterBy($key [, $operator], $value [, $split])",
        "body": "filterBy(${1:\\$key}, ${2:\\$value})",
        "description": "Filters the collection by any field and value and with a set of filtering operators",
        "scope": "php"
    },
    "$files->find()": {
        "prefix": "find()",
        "body": "find()",
        "description": "Finds a single file or multiple files by one or many filenames.",
        "scope": "php"
    },
    "$files->findBy($field, $value)": {
        "prefix": "findBy($field, $value)",
        "body": "findBy(${1:\\$field}, ${2:\\$value})",
        "description": "Finds a single file by key and value",
        "scope": "php"
    },
    "$files->first()": {
        "prefix": "first()",
        "body": "first()",
        "description": "Returns the first file in the collection",
        "scope": "php"
    },
    "$files->flip()": {
        "prefix": "flip()",
        "body": "flip()",
        "description": "Returns the collection in reverse order",
        "scope": "php"
    },
    "$files->get($filename)": {
        "prefix": "get($filename)",
        "body": "get(${1:\\$filename})",
        "description": "Returns a single file by filename",
        "scope": "php"
    },
    "$files->groupBy($field, $caseInsensitive = true)": {
        "prefix": "groupBy($field, $caseInsensitive = true)",
        "body": "groupBy(${1:\\$field}, ${2:\\$caseInsensitive = true})",
        "description": "Groups all files in the collection by a given field.",
        "scope": "php"
    },
    "$files->has($file)": {
        "prefix": "has($file)",
        "body": "has(${1:\\$file})",
        "description": "Checks if a $file object is included in the collection",
        "scope": "php"
    },
    "$files->keys()": {
        "prefix": "keys()",
        "body": "keys()",
        "description": "Returns an array with all filenames in the collection.",
        "scope": "php"
    },
    "$files->last()": {
        "prefix": "last()",
        "body": "last()",
        "description": "Returns the last file in the collection",
        "scope": "php"
    },
    "$files->limit($limit)": {
        "prefix": "limit($limit)",
        "body": "limit(${1:\\$limit})",
        "description": "Returns the collection with a limited set of items",
        "scope": "php"
    },
    "$files->map($callback)": {
        "prefix": "map($callback)",
        "body": "map(${1:\\$callback})",
        "description": "Applies a callback to all items in the collection.",
        "scope": "php"
    },
    "$files->not()": {
        "prefix": "not()",
        "body": "not()",
        "description": "Returns the collection without a given file. The ignored file can be passed by filename or entire file object.",
        "scope": "php"
    },
    "$files->nth($n)": {
        "prefix": "nth($n)",
        "body": "nth(${1:\\$n})",
        "description": "Returns the nth file in the collection.",
        "scope": "php"
    },
    "$files->offset($offset)": {
        "prefix": "offset($offset)",
        "body": "offset(${1:\\$offset})",
        "description": "Returns the collection starting from a given offset",
        "scope": "php"
    },
    "$files->paginate($limit, $options = array())": {
        "prefix": "paginate($limit, $options = array())",
        "body": "paginate(${1:\\$limit}, ${2:\\$options = array()})",
        "description": "Applies pagination to the collection",
        "scope": "php"
    },
    "$files->pagination()": {
        "prefix": "pagination()",
        "body": "pagination()",
        "description": "Returns the $pagination object",
        "scope": "php"
    },
    "$files->pluck($field, $split = null, $unique = false)": {
        "prefix": "pluck($field, $split = null, $unique = false)",
        "body": "pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
        "description": "Plucks all values for a specific field from the collection and returns those as array.",
        "scope": "php"
    },
    "$files->shuffle()": {
        "prefix": "shuffle()",
        "body": "shuffle()",
        "description": "Returns the collection in shuffled order.",
        "scope": "php"
    },
    "$files->slice($offset = null, $limit = null)": {
        "prefix": "slice($offset = null, $limit = null)",
        "body": "slice(${1:\\$offset = null}, ${2:\\$limit = null})",
        "description": "Returns a sliced version of the collection starting from a given offset and an optional limited number of items.",
        "scope": "php"
    },
    "$files->sortBy($field, $direction = 'asc', $method = SORT_REGULAR)": {
        "prefix": "sortBy($field, $direction = 'asc', $method = SORT_REGULAR)",
        "body": "sortBy(${1:\\$field}, ${2:\\$direction = 'asc'}, ${3:\\$method = SORT_REGULAR})",
        "description": "Sorts the files in the collection by field and direction",
        "scope": "php"
    },
    "$files->toArray($callback = null)": {
        "prefix": "toArray($callback = null)",
        "body": "toArray(${1:\\$callback = null})",
        "description": "Converts the collection to a simple array.",
        "scope": "php"
    },
    "$files->toJson()": {
        "prefix": "toJson()",
        "body": "toJson()",
        "description": "Converts the collection to a json string.",
        "scope": "php"
    },
    "css($path, $media = null)": {
        "prefix": "css($path, $media = null)",
        "body": "css(${1:\\$path}, ${2:\\$media = null})",
        "description": "Creates one or multiple CSS link tags",
        "scope": "php"
    },
    "email($params)": {
        "prefix": "email($params)",
        "body": "email(${1:\\$params})",
        "description": "Sends an email",
        "scope": "php"
    },
    "excerpt($text, $length = 140, $mode = 'chars')": {
        "prefix": "excerpt($text, $length = 140, $mode = 'chars')",
        "body": "excerpt(${1:\\$text}, ${2:\\$length = 140}, ${3:\\$mode = 'chars'})",
        "description": "Creates an excerpt of any text by a given character or word length",
        "scope": "php"
    },
    "gist($url, $file = null)": {
        "prefix": "gist($url, $file = null)",
        "body": "gist(${1:\\$url}, ${2:\\$file = null})",
        "description": "Embeds a Gist from Github by URL",
        "scope": "php"
    },
    "image($filename = null)": {
        "prefix": "image($filename = null)",
        "body": "image(${1:\\$filename = null})",
        "description": "Fetches any image by filename for the current page, or by path for any other page",
        "scope": "php"
    },
    "js($path, $async = false)": {
        "prefix": "js($path, $async = false)",
        "body": "js(${1:\\$path}, ${2:\\$async = false})",
        "description": "Creates a script tag to load a javascript file",
        "scope": "php"
    },
    "kirby()": {
        "prefix": "kirby()",
        "body": "kirby()",
        "description": "Returns the Kirby object in any situation",
        "scope": "php"
    },
    "kirbytag($attr)": {
        "prefix": "kirbytag($attr)",
        "body": "kirbytag(${1:\\$attr})",
        "description": "Makes it possible to use any defined Kirbytag as standalone function",
        "scope": "php"
    },
    "kirbytext($text, $page = null)": {
        "prefix": "kirbytext($text, $page = null)",
        "body": "kirbytext(${1:\\$text}, ${2:\\$page = null})",
        "description": "Parses any text with Markdown and Kirbytext",
        "scope": "php"
    },
    "markdown($text)": {
        "prefix": "markdown($text)",
        "body": "markdown(${1:\\$text})",
        "description": "Parses the text as Markdown",
        "scope": "php"
    },
    "page($uri = null)": {
        "prefix": "page($uri = null)",
        "body": "page(${1:\\$uri = null})",
        "description": "Fetches any page by URI or the current page when no URI is specified",
        "scope": "php"
    },
    "pages($data = array())": {
        "prefix": "pages($data = array())",
        "body": "pages(${1:\\$data = array()})",
        "description": "Helper to build page collections",
        "scope": "php"
    },
    "site()": {
        "prefix": "site()",
        "body": "site()",
        "description": "Returns the site object in any situation",
        "scope": "php"
    },
    "smartypants($text)": {
        "prefix": "smartypants($text)",
        "body": "smartypants(${1:\\$text})",
        "description": "Applies the SmartyPants Typographer on an HTML string",
        "scope": "php"
    },
    "snippet($file, $data = array(), $return = false)": {
        "prefix": "snippet($file, $data = array(), $return = false)",
        "body": "snippet(${1:\\$file}, ${2:\\$data = array()}, ${3:\\$return = false})",
        "description": "Embeds a snippet from the snippet folder",
        "scope": "php"
    },
    "structure($data, $page = null, $key = null)": {
        "prefix": "structure($data, $page = null, $key = null)",
        "body": "structure(${1:\\$data}, ${2:\\$page = null}, ${3:\\$key = null})",
        "description": "Creates a Kirby structure object from a data array",
        "scope": "php"
    },
    "textfile($uri, $template, $lang = null)": {
        "prefix": "textfile($uri, $template, $lang = null)",
        "body": "textfile(${1:\\$uri}, ${2:\\$template}, ${3:\\$lang = null})",
        "description": "Helper to create correct text file names for content files",
        "scope": "php"
    },
    "thisUrl()": {
        "prefix": "thisUrl()",
        "body": "thisUrl()",
        "description": "Returns the current url",
        "scope": "php"
    },
    "thumb($image, $params = array(), $obj = true)": {
        "prefix": "thumb($image, $params = array(), $obj = true)",
        "body": "thumb(${1:\\$image}, ${2:\\$params = array()}, ${3:\\$obj = true})",
        "description": "Creates a thumbnail for a given image object",
        "scope": "php"
    },
    "twitter($username, $text = null, $title = null, $class = null)": {
        "prefix": "twitter($username, $text = null, $title = null, $class = null)",
        "body": "twitter(${1:\\$username}, ${2:\\$text = null}, ${3:\\$title = null}, ${4:\\$class = null})",
        "description": "Builds a Twitter profile link by username",
        "scope": "php"
    },
    "vimeo($url, $width = null, $height = null, $class = null)": {
        "prefix": "vimeo($url, $width = null, $height = null, $class = null)",
        "body": "vimeo(${1:\\$url}, ${2:\\$width = null}, ${3:\\$height = null}, ${4:\\$class = null})",
        "description": "Embeds a Vimeo video by URL in an iframe",
        "scope": "php"
    },
    "youtube($url, $width = null, $height = null, $class = null)": {
        "prefix": "youtube($url, $width = null, $height = null, $class = null)",
        "body": "youtube(${1:\\$url}, ${2:\\$width = null}, ${3:\\$height = null}, ${4:\\$class = null})",
        "description": "Embeds a Youtube video by URL in an iframe",
        "scope": "php"
    },
    "$language->code()": {
        "prefix": "code()",
        "body": "code()",
        "description": "Returns the iso language code",
        "scope": "php"
    },
    "$language->default()": {
        "prefix": "default()",
        "body": "default()",
        "description": "Checks if this is the default language",
        "scope": "php"
    },
    "$language->direction()": {
        "prefix": "direction()",
        "body": "direction()",
        "description": "Returns the text direction of the language (rtl or ltr)",
        "scope": "php"
    },
    "$language->host()": {
        "prefix": "host()",
        "body": "host()",
        "description": "Returns the host component of the language URL",
        "scope": "php"
    },
    "$language->locale()": {
        "prefix": "locale()",
        "body": "locale()",
        "description": "Returns the locale string",
        "scope": "php"
    },
    "$language->name()": {
        "prefix": "name()",
        "body": "name()",
        "description": "Returns the full name of the language",
        "scope": "php"
    },
    "$language->path()": {
        "prefix": "path()",
        "body": "path()",
        "description": "Returns the path component of the language URL",
        "scope": "php"
    },
    "$language->url()": {
        "prefix": "url()",
        "body": "url()",
        "description": "Returns the assigned base URL for the language",
        "scope": "php"
    },
    "$location->lat()": {
        "prefix": "lat()",
        "body": "lat()",
        "description": "Returns the latitude",
        "scope": "php"
    },
    "$location->lng()": {
        "prefix": "lng()",
        "body": "lng()",
        "description": "Returns the longitude",
        "scope": "php"
    },
    "$location->toArray()": {
        "prefix": "toArray()",
        "body": "toArray()",
        "description": "Returns latitude and longitude as associative array",
        "scope": "php"
    },
    "$page->archives()": {
        "prefix": "archives()",
        "body": "archives()",
        "description": "Returns a $files collection with all archive files (zip, gzip, tar) in the page's directory",
        "scope": "php"
    },
    "$page->audio()": {
        "prefix": "audio()",
        "body": "audio()",
        "description": "Returns a $files collection with all audio files in the page's directory",
        "scope": "php"
    },
    "$page->children()": {
        "prefix": "children()",
        "body": "children()",
        "description": "Returns a $pages collection with all children of the page",
        "scope": "php"
    },
    "$page->code()": {
        "prefix": "code()",
        "body": "code()",
        "description": "Returns a $files collection with all code files (css, js, html, etc.) in the page's directory",
        "scope": "php"
    },
    "$page->content([$lang = null])": {
        "prefix": "content([$lang = null])",
        "body": "content()",
        "description": "Returns the page's $content object",
        "scope": "php"
    },
    "$page->content()->has($field)": {
        "prefix": "has($field)",
        "body": "has(${1:\\$field})",
        "description": "Checks if the page has a certain field",
        "scope": "php"
    },
    "$page->contentURL()": {
        "prefix": "contentURL()",
        "body": "contentURL()",
        "description": "Returns the full URL for the content folder",
        "scope": "php"
    },
    "$page->create($uri, $template, $data = array())": {
        "prefix": "create($uri, $template, $data = array())",
        "body": "create(${1:\\$uri}, ${2:\\$template}, ${3:\\$data = array()})",
        "description": "Creates a new page object",
        "scope": "php"
    },
    "$page->date($format = null, $field = 'date')": {
        "prefix": "date($format = null, $field = 'date')",
        "body": "date(${1:\\$format = null}, ${2:\\$field = 'date'})",
        "description": "Returns a unix timestamp or formatted date string from the page's date field or any other field containing a parsable date",
        "scope": "php"
    },
    "$page->decrement($field, $by = 1, $max = null)": {
        "prefix": "decrement($field, $by = 1, $max = null)",
        "body": "decrement(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$max = null})",
        "description": "Decrement a field value by one or a given value",
        "scope": "php"
    },
    "$page->delete($force = false)": {
        "prefix": "delete($force = false)",
        "body": "delete(${1:\\$force = false})",
        "description": "Deletes the $page object and all its data and files. This cannot be undone!",
        "scope": "php"
    },
    "$page->depth()": {
        "prefix": "depth()",
        "body": "depth()",
        "description": "Returns a number, which represents the nesting depth of the page",
        "scope": "php"
    },
    "$page->dirname()": {
        "prefix": "dirname()",
        "body": "dirname()",
        "description": "Returns the full name of the page's directory",
        "scope": "php"
    },
    "$page->diruri()": {
        "prefix": "diruri()",
        "body": "diruri()",
        "description": "Returns the full directory path of the page starting at \/content",
        "scope": "php"
    },
    "$page->document($filename = false)": {
        "prefix": "document($filename = false)",
        "body": "document(${1:\\$filename = false})",
        "description": "Returns a specific document $file object by filename. If no filename is given, the first available document will be returned.",
        "scope": "php"
    },
    "$page->documents()": {
        "prefix": "documents()",
        "body": "documents()",
        "description": "Returns a $files collection with all documents in the page's directory",
        "scope": "php"
    },
    "$page->equals($other)": {
        "prefix": "equals($other)",
        "body": "equals(${1:\\$other})",
        "description": "Compares the page with another $page object and checks if they are the same",
        "scope": "php"
    },
    "$page->file($filename = false)": {
        "prefix": "file($filename = false)",
        "body": "file(${1:\\$filename = false})",
        "description": "Returns a specific $file object within the page's directory by filename. If no filename is given, the first file will be returned",
        "scope": "php"
    },
    "$page->files()": {
        "prefix": "files()",
        "body": "files()",
        "description": "Returns a $files collection with all files in the page's directory",
        "scope": "php"
    },
    "$page->find($uri)": {
        "prefix": "find($uri)",
        "body": "find(${1:\\$uri})",
        "description": "Returns the $page object of a specific subpage by URI. If multiple URIs are given, the method will return a $pages collection with all matches.",
        "scope": "php"
    },
    "$page->grandChildren()": {
        "prefix": "grandChildren()",
        "body": "grandChildren()",
        "description": "Returns a $pages collection with all children of children in the page's directory",
        "scope": "php"
    },
    "$page->hasArchives()": {
        "prefix": "hasArchives()",
        "body": "hasArchives()",
        "description": "Checks if there are any archive files (zip, gzip, tar) in the page's directory",
        "scope": "php"
    },
    "$page->hasAudio()": {
        "prefix": "hasAudio()",
        "body": "hasAudio()",
        "description": "Checks if there are any audio files in the page's directory",
        "scope": "php"
    },
    "$page->hasChildren()": {
        "prefix": "hasChildren()",
        "body": "hasChildren()",
        "description": "Checks if the page has children",
        "scope": "php"
    },
    "$page->hasCode()": {
        "prefix": "hasCode()",
        "body": "hasCode()",
        "description": "Checks if there are any audio files in the page's directory",
        "scope": "php"
    },
    "$page->hasDocuments()": {
        "prefix": "hasDocuments()",
        "body": "hasDocuments()",
        "description": "Checks if there are any documents (pdf, doc, xls, etc.) in the page's directory",
        "scope": "php"
    },
    "$page->hasFiles()": {
        "prefix": "hasFiles()",
        "body": "hasFiles()",
        "description": "Checks if there are any files in the page's directory",
        "scope": "php"
    },
    "$page->hasImages()": {
        "prefix": "hasImages()",
        "body": "hasImages()",
        "description": "Checks if there are image files (jpg, png, gif, etc.) in the page directory",
        "scope": "php"
    },
    "$page->hasInvisibleChildren()": {
        "prefix": "hasInvisibleChildren()",
        "body": "hasInvisibleChildren()",
        "description": "Checks if the page has any invisible children",
        "scope": "php"
    },
    "$page->hasNext([$sort, $direction])": {
        "prefix": "hasNext([$sort, $direction])",
        "body": "hasNext()",
        "description": "Checks if the page has a next sibling",
        "scope": "php"
    },
    "$page->hasNextInvisible([$sort, $direction])": {
        "prefix": "hasNextInvisible([$sort, $direction])",
        "body": "hasNextInvisible()",
        "description": "Checks if the page has a next invisible sibling",
        "scope": "php"
    },
    "$page->hasNextVisible([$sort, $direction])": {
        "prefix": "hasNextVisible([$sort, $direction])",
        "body": "hasNextVisible()",
        "description": "Checks if the page has a next visible sibling",
        "scope": "php"
    },
    "$page->hasPrev([$sort, $direction])": {
        "prefix": "hasPrev([$sort, $direction])",
        "body": "hasPrev()",
        "description": "Checks if the page has a previous sibling",
        "scope": "php"
    },
    "$page->hasPrevInvisible([$sort, $direction])": {
        "prefix": "hasPrevInvisible([$sort, $direction])",
        "body": "hasPrevInvisible()",
        "description": "Checks if the page has a previous invisible sibling",
        "scope": "php"
    },
    "$page->hasPrevVisible([$sort, $direction])": {
        "prefix": "hasPrevVisible([$sort, $direction])",
        "body": "hasPrevVisible()",
        "description": "Checks if the page has a previous visible sibling",
        "scope": "php"
    },
    "$page->hasTemplate()": {
        "prefix": "hasTemplate()",
        "body": "hasTemplate()",
        "description": "Checks if the page has its own template or if it uses the default template",
        "scope": "php"
    },
    "$page->hasVideos()": {
        "prefix": "hasVideos()",
        "body": "hasVideos()",
        "description": "Checks if there are any video files in the page directory",
        "scope": "php"
    },
    "$page->hasVisibleChildren()": {
        "prefix": "hasVisibleChildren()",
        "body": "hasVisibleChildren()",
        "description": "Checks if the page has any visible children",
        "scope": "php"
    },
    "$page->hash()": {
        "prefix": "hash()",
        "body": "hash()",
        "description": "Returns a unique hash for the page, which is used by tinyurls",
        "scope": "php"
    },
    "$page->headers()": {
        "prefix": "headers()",
        "body": "headers()",
        "description": "Sends all appropriate headers for this page. Can be configured with the headers config array, which should contain all header definitions for each template",
        "scope": "php"
    },
    "$page->hide()": {
        "prefix": "hide()",
        "body": "hide()",
        "description": "Removes the sorting number from the page directory to switch it to invisible",
        "scope": "php"
    },
    "$page->id()": {
        "prefix": "id()",
        "body": "id()",
        "description": "Returns the page id, which is the untranslated URI",
        "scope": "php"
    },
    "$page->image($filename = false)": {
        "prefix": "image($filename = false)",
        "body": "image(${1:\\$filename = false})",
        "description": "Returns a specific image $file object by filename. If no filename is given, the first available image will be returned.",
        "scope": "php"
    },
    "$page->images()": {
        "prefix": "images()",
        "body": "images()",
        "description": "Returns a $files collection with all image files (jpg, png, gif, etc.) in the page directory",
        "scope": "php"
    },
    "$page->increment($field, $by = 1, $max = null)": {
        "prefix": "increment($field, $by = 1, $max = null)",
        "body": "increment(${1:\\$field}, ${2:\\$by = 1}, ${3:\\$max = null})",
        "description": "Increment a field value by one or a given value",
        "scope": "php"
    },
    "$page->index()": {
        "prefix": "index()",
        "body": "index()",
        "description": "Recursively builds a $pages collection with all children, children of children, etc.",
        "scope": "php"
    },
    "$page->intendedTemplate()": {
        "prefix": "intendedTemplate()",
        "body": "intendedTemplate()",
        "description": "Returns the name of the intended template. This is the name of the content text file.",
        "scope": "php"
    },
    "$page->intendedTemplateFile()": {
        "prefix": "intendedTemplateFile()",
        "body": "intendedTemplateFile()",
        "description": "Returns the path for the intended template file",
        "scope": "php"
    },
    "$page->inventory()": {
        "prefix": "inventory()",
        "body": "inventory()",
        "description": "Reads the directory and returns an inventory array",
        "scope": "php"
    },
    "$page->is($other)": {
        "prefix": "is($other)",
        "body": "is(${1:\\$other})",
        "description": "Compares the page with another $page object and checks if they are the same",
        "scope": "php"
    },
    "$page->isActive()": {
        "prefix": "isActive()",
        "body": "isActive()",
        "description": "Checks if the page is the currently active page",
        "scope": "php"
    },
    "$page->isAncestorOf($child)": {
        "prefix": "isAncestorOf($child)",
        "body": "isAncestorOf(${1:\\$child})",
        "description": "Checks if the page is a direct or indirect ancestor of the given $page object",
        "scope": "php"
    },
    "$page->isCacheable()": {
        "prefix": "isCacheable()",
        "body": "isCacheable()",
        "description": "Checks if the page can be cached",
        "scope": "php"
    },
    "$page->isChildOf($parent)": {
        "prefix": "isChildOf($parent)",
        "body": "isChildOf(${1:\\$parent})",
        "description": "Checks if the page is a child of the given page",
        "scope": "php"
    },
    "$page->isDeletable()": {
        "prefix": "isDeletable()",
        "body": "isDeletable()",
        "description": "Checks if the page is deletable",
        "scope": "php"
    },
    "$page->isDescendantOf($parent)": {
        "prefix": "isDescendantOf($parent)",
        "body": "isDescendantOf(${1:\\$parent})",
        "description": "Checks if the page is a descendant of the given page",
        "scope": "php"
    },
    "$page->isDescendantOfActive()": {
        "prefix": "isDescendantOfActive()",
        "body": "isDescendantOfActive()",
        "description": "Checks if the page is a descendant of the currently active page",
        "scope": "php"
    },
    "$page->isErrorPage()": {
        "prefix": "isErrorPage()",
        "body": "isErrorPage()",
        "description": "Checks if the page is the error page",
        "scope": "php"
    },
    "$page->isHomePage()": {
        "prefix": "isHomePage()",
        "body": "isHomePage()",
        "description": "Checks if the page is the home page",
        "scope": "php"
    },
    "$page->isInvisible()": {
        "prefix": "isInvisible()",
        "body": "isInvisible()",
        "description": "Checks if the page is invisible",
        "scope": "php"
    },
    "$page->isOpen()": {
        "prefix": "isOpen()",
        "body": "isOpen()",
        "description": "Checks if the page is open. This means that it is either active or it is a direct or indirect parent of the currently active page.",
        "scope": "php"
    },
    "$page->isParentOf($child)": {
        "prefix": "isParentOf($child)",
        "body": "isParentOf(${1:\\$child})",
        "description": "Checks if the page is the parent of the given page",
        "scope": "php"
    },
    "$page->isSite()": {
        "prefix": "isSite()",
        "body": "isSite()",
        "description": "Checks if this page object is the main site",
        "scope": "php"
    },
    "$page->isVisible()": {
        "prefix": "isVisible()",
        "body": "isVisible()",
        "description": "Checks if the page is visible",
        "scope": "php"
    },
    "$page->isWritable()": {
        "prefix": "isWritable()",
        "body": "isWritable()",
        "description": "Checks if the page is writable",
        "scope": "php"
    },
    "$page->kirby()": {
        "prefix": "kirby()",
        "body": "kirby()",
        "description": "Returns the kirby object",
        "scope": "php"
    },
    "$page->modified($format = false)": {
        "prefix": "modified($format = false)",
        "body": "modified(${1:\\$format = false})",
        "description": "Returns the unix timestamp or a formatted date string of the last modification date of the page",
        "scope": "php"
    },
    "$page->move($uid)": {
        "prefix": "move($uid)",
        "body": "move(${1:\\$uid})",
        "description": "Changes the uid for the page",
        "scope": "php"
    },
    "$page->next([$sort, $direction])": {
        "prefix": "next([$sort, $direction])",
        "body": "next()",
        "description": "Returns the next sibling",
        "scope": "php"
    },
    "$page->nextInvisible([$sort, $direction])": {
        "prefix": "nextInvisible([$sort, $direction])",
        "body": "nextInvisible()",
        "description": "Returns the next invisible sibling",
        "scope": "php"
    },
    "$page->nextVisible([$sort, $direction])": {
        "prefix": "nextVisible([$sort, $direction])",
        "body": "nextVisible()",
        "description": "Returns the next visible sibling",
        "scope": "php"
    },
    "$page->num()": {
        "prefix": "num()",
        "body": "num()",
        "description": "Returns the sorting number",
        "scope": "php"
    },
    "$page->parent()": {
        "prefix": "parent()",
        "body": "parent()",
        "description": "Returns the parent $page object",
        "scope": "php"
    },
    "$page->parents()": {
        "prefix": "parents()",
        "body": "parents()",
        "description": "Returns a $pages collection of all parents",
        "scope": "php"
    },
    "$page->prev([$sort, $direction])": {
        "prefix": "prev([$sort, $direction])",
        "body": "prev()",
        "description": "Returns the previous sibling",
        "scope": "php"
    },
    "$page->prevInvisible([$sort, $direction])": {
        "prefix": "prevInvisible([$sort, $direction])",
        "body": "prevInvisible()",
        "description": "Returns the previous invisble sibling.",
        "scope": "php"
    },
    "$page->prevVisible([$sort, $direction])": {
        "prefix": "prevVisible([$sort, $direction])",
        "body": "prevVisible()",
        "description": "Returns the previous visible sibling",
        "scope": "php"
    },
    "$page->reset()": {
        "prefix": "reset()",
        "body": "reset()",
        "description": "Cleans the temporary page cache and the cache of all parent pages",
        "scope": "php"
    },
    "$page->root()": {
        "prefix": "root()",
        "body": "root()",
        "description": "Returns the full root of the page directory",
        "scope": "php"
    },
    "$page->search($query, $params = array())": {
        "prefix": "search($query, $params = array())",
        "body": "search(${1:\\$query}, ${2:\\$params = array()})",
        "description": "Searches all descendants",
        "scope": "php"
    },
    "$page->siblings($self = true)": {
        "prefix": "siblings($self = true)",
        "body": "siblings(${1:\\$self = true})",
        "description": "Returns all siblings.",
        "scope": "php"
    },
    "$page->site()": {
        "prefix": "site()",
        "body": "site()",
        "description": "Returns the site object",
        "scope": "php"
    },
    "$page->slug([$lang = null])": {
        "prefix": "slug([$lang = null])",
        "body": "slug()",
        "description": "Returns the slug. The slug is the last part of the page's URL. It is translatable in multi-language sites while the UID always stays the page's directory name without the sorting number.",
        "scope": "php"
    },
    "$page->sort($num = null)": {
        "prefix": "sort($num = null)",
        "body": "sort(${1:\\$num = null})",
        "description": "Changes the sorting number of the page.",
        "scope": "php"
    },
    "$page->template()": {
        "prefix": "template()",
        "body": "template()",
        "description": "Returns the name of the used template for the page. Will return default if the intended template cannot be found.",
        "scope": "php"
    },
    "$page->templateData()": {
        "prefix": "templateData()",
        "body": "templateData()",
        "description": "Additional data, which will be passed to the template",
        "scope": "php"
    },
    "$page->templateFile()": {
        "prefix": "templateFile()",
        "body": "templateFile()",
        "description": "Returns the full path of the template file.",
        "scope": "php"
    },
    "$page->textfile($template = null [, $lang = null])": {
        "prefix": "textfile($template = null [, $lang = null])",
        "body": "textfile(${1:\\$template = null})",
        "description": "Returns the root for the content file",
        "scope": "php"
    },
    "$page->tinyurl()": {
        "prefix": "tinyurl()",
        "body": "tinyurl()",
        "description": "Returns the tinyurl for the page if tinyurls are activated in the config",
        "scope": "php"
    },
    "$page->title()": {
        "prefix": "title()",
        "body": "title()",
        "description": "Returns the page title. The title is fetched from the content unless it does not exist. In this case it will be overwritten by the UID.",
        "scope": "php"
    },
    "$page->toArray($callback = null)": {
        "prefix": "toArray($callback = null)",
        "body": "toArray(${1:\\$callback = null})",
        "description": "Converts the entire page object into a plain PHP array",
        "scope": "php"
    },
    "$page->toJson($callback = null)": {
        "prefix": "toJson($callback = null)",
        "body": "toJson(${1:\\$callback = null})",
        "description": "Converts the entire page array into a json string",
        "scope": "php"
    },
    "$page->touch()": {
        "prefix": "touch()",
        "body": "touch()",
        "description": "Marks the page as modified",
        "scope": "php"
    },
    "$page->uid()": {
        "prefix": "uid()",
        "body": "uid()",
        "description": "The UID is the page directory name without the sorting number.",
        "scope": "php"
    },
    "$page->update($data = array() [, $lang = null])": {
        "prefix": "update($data = array() [, $lang = null])",
        "body": "update(${1:\\$data = array()})",
        "description": "Updates the page content with all passed variables.",
        "scope": "php"
    },
    "$page->uri([$lang = null])": {
        "prefix": "uri([$lang = null])",
        "body": "uri()",
        "description": "Returns the URI. The URI is the relative URL without the host or any subfolders.",
        "scope": "php"
    },
    "$page->url()": {
        "prefix": "url()",
        "body": "url()",
        "description": "Returns the full URL of the page",
        "scope": "php"
    },
    "$page->urlKey($lang = null)": {
        "prefix": "urlKey($lang = null)",
        "body": "urlKey(${1:\\$lang = null})",
        "description": "Returns the URL key from the content file if available and otherwise returns the page UID",
        "scope": "php"
    },
    "$page->video($filename = false)": {
        "prefix": "video($filename = false)",
        "body": "video(${1:\\$filename = false})",
        "description": "Returns a specific video $file object by filename. If no filename is given, the first available video will be returned.",
        "scope": "php"
    },
    "$page->videos()": {
        "prefix": "videos()",
        "body": "videos()",
        "description": "Returns a $files collection with all videos in the page directory.",
        "scope": "php"
    },
    "$pages->add($page)": {
        "prefix": "add($page)",
        "body": "add(${1:\\$page})",
        "description": "Adds a single page object or a collection to a collection",
        "scope": "php"
    },
    "$pages->append($key, $object)": {
        "prefix": "append($key, $object)",
        "body": "append(${1:\\$key}, ${2:\\$object})",
        "description": "Appends an element to the data array",
        "scope": "php"
    },
    "$pages->children()": {
        "prefix": "children()",
        "body": "children()",
        "description": "Returns a $pages collection with all children of each page in the collection",
        "scope": "php"
    },
    "$pages->count()": {
        "prefix": "count()",
        "body": "count()",
        "description": "Returns the number of pages in the collection",
        "scope": "php"
    },
    "$pages->create($uid, $template, $data = array())": {
        "prefix": "create($uid, $template, $data = array())",
        "body": "create(${1:\\$uid}, ${2:\\$template}, ${3:\\$data = array()})",
        "description": "Creates a new subpage",
        "scope": "php"
    },
    "$pages->files()": {
        "prefix": "files()",
        "body": "files()",
        "description": "Returns a $files collection with all files of each page in the collection",
        "scope": "php"
    },
    "$pages->filter($callback)": {
        "prefix": "filter($callback)",
        "body": "filter(${1:\\$callback})",
        "description": "Filters the collection with a custom filter callback",
        "scope": "php"
    },
    "$pages->filterBy($key [, $operator], $value [, $split])": {
        "prefix": "filterBy($key [, $operator], $value [, $split])",
        "body": "filterBy(${1:\\$key}, ${2:\\$value})",
        "description": "Filters the collection by any field and value and with a set of filtering operators",
        "scope": "php"
    },
    "$pages->find($page)": {
        "prefix": "find($page)",
        "body": "find(${1:\\$page})",
        "description": "Finds a $page object in the collection by UID or relative URI",
        "scope": "php"
    },
    "$pages->findBy($key, $value)": {
        "prefix": "findBy($key, $value)",
        "body": "findBy(${1:\\$key}, ${2:\\$value})",
        "description": "Finds a single $page object in the collection by $key and $value",
        "scope": "php"
    },
    "$pages->findByURI($uri)": {
        "prefix": "findByURI($uri)",
        "body": "findByURI(${1:\\$uri})",
        "description": "Finds a $page object in the collection by its full URI",
        "scope": "php"
    },
    "$pages->findOpen()": {
        "prefix": "findOpen()",
        "body": "findOpen()",
        "description": "Finds the open $page object in the collection",
        "scope": "php"
    },
    "$pages->first()": {
        "prefix": "first()",
        "body": "first()",
        "description": "Returns the first $page object from the collection",
        "scope": "php"
    },
    "$pages->flip()": {
        "prefix": "flip()",
        "body": "flip()",
        "description": "Returns the collection in reverse order",
        "scope": "php"
    },
    "$pages->get($key, $default = null)": {
        "prefix": "get($key, $default = null)",
        "body": "get(${1:\\$key}, ${2:\\$default = null})",
        "description": "Returns a $page object by its full URI",
        "scope": "php"
    },
    "$pages->groupBy($field, $caseInsensitive = true)": {
        "prefix": "groupBy($field, $caseInsensitive = true)",
        "body": "groupBy(${1:\\$field}, ${2:\\$caseInsensitive = true})",
        "description": "Groups $page objects in the collection by any field and returns them in a new collection",
        "scope": "php"
    },
    "$pages->has($page)": {
        "prefix": "has($page)",
        "body": "has(${1:\\$page})",
        "description": "Checks if a $page object is included in the collection",
        "scope": "php"
    },
    "$pages->index()": {
        "prefix": "index()",
        "body": "index()",
        "description": "Recursively creates a full index from all pages and subpages in the collection and returns it as a new flat $pages collection",
        "scope": "php"
    },
    "$pages->invisible()": {
        "prefix": "invisible()",
        "body": "invisible()",
        "description": "Returns all invisible $page objects from the collection",
        "scope": "php"
    },
    "$pages->keys()": {
        "prefix": "keys()",
        "body": "keys()",
        "description": "Returns all keys\/URIs from the collection",
        "scope": "php"
    },
    "$pages->last()": {
        "prefix": "last()",
        "body": "last()",
        "description": "Returns the last $page object from the collection",
        "scope": "php"
    },
    "$pages->limit($limit)": {
        "prefix": "limit($limit)",
        "body": "limit(${1:\\$limit})",
        "description": "Returns the collection with a limited amount of pages",
        "scope": "php"
    },
    "$pages->map($callback)": {
        "prefix": "map($callback)",
        "body": "map(${1:\\$callback})",
        "description": "Returns a new collection and applies the mapping callback to all pages",
        "scope": "php"
    },
    "$pages->merge($collection2)": {
        "prefix": "merge($collection2)",
        "body": "merge(${1:\\$collection2})",
        "description": "Returns a new combined collection",
        "scope": "php"
    },
    "$pages->not($args)": {
        "prefix": "not($args)",
        "body": "not(${1:\\$args})",
        "description": "Returns the collection without any given pages.",
        "scope": "php"
    },
    "$pages->nth($n)": {
        "prefix": "nth($n)",
        "body": "nth(${1:\\$n})",
        "description": "Returns the nth page in the collection",
        "scope": "php"
    },
    "$pages->offset($offset)": {
        "prefix": "offset($offset)",
        "body": "offset(${1:\\$offset})",
        "description": "Returns the collection starting from the given offset",
        "scope": "php"
    },
    "$pages->paginate($limit, $options = array())": {
        "prefix": "paginate($limit, $options = array())",
        "body": "paginate(${1:\\$limit}, ${2:\\$options = array()})",
        "description": "Adds a $pagination object to the collection, which makes it easy to page through items",
        "scope": "php"
    },
    "$pages->pagination()": {
        "prefix": "pagination()",
        "body": "pagination()",
        "description": "Returns the $pagination object if available",
        "scope": "php"
    },
    "$pages->pluck($field, $split = null, $unique = false)": {
        "prefix": "pluck($field, $split = null, $unique = false)",
        "body": "pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
        "description": "Extracts an array of values from each item by field",
        "scope": "php"
    },
    "$pages->prepend($key, $object)": {
        "prefix": "prepend($key, $object)",
        "body": "prepend(${1:\\$key}, ${2:\\$object})",
        "description": "Prepends an element to the data array",
        "scope": "php"
    },
    "$pages->search($query, $params = array())": {
        "prefix": "search($query, $params = array())",
        "body": "search(${1:\\$query}, ${2:\\$params = array()})",
        "description": "Searches all pages in the collection and all descendants",
        "scope": "php"
    },
    "$pages->shuffle()": {
        "prefix": "shuffle()",
        "body": "shuffle()",
        "description": "Shuffles all items in the collection",
        "scope": "php"
    },
    "$pages->slice($offset = null, $limit = null)": {
        "prefix": "slice($offset = null, $limit = null)",
        "body": "slice(${1:\\$offset = null}, ${2:\\$limit = null})",
        "description": "Returns a sliced version of the collection defined by offset and limit",
        "scope": "php"
    },
    "$pages->sortBy($field, $direction = 'asc', $method = SORT_REGULAR)": {
        "prefix": "sortBy($field, $direction = 'asc', $method = SORT_REGULAR)",
        "body": "sortBy(${1:\\$field}, ${2:\\$direction = 'asc'}, ${3:\\$method = SORT_REGULAR})",
        "description": "Returns a sorted version of the collection",
        "scope": "php"
    },
    "$pages->toArray($callback = null)": {
        "prefix": "toArray($callback = null)",
        "body": "toArray(${1:\\$callback = null})",
        "description": "Converts the collection to a good old array. You can pass a callback which will be applied to all items in the collection before conversion",
        "scope": "php"
    },
    "$pages->toJson()": {
        "prefix": "toJson()",
        "body": "toJson()",
        "description": "Converts the collection to a JSON string",
        "scope": "php"
    },
    "$pages->visible()": {
        "prefix": "visible()",
        "body": "visible()",
        "description": "Returns all visible items in the collection",
        "scope": "php"
    },
    "$pagination->firstPage()": {
        "prefix": "firstPage()",
        "body": "firstPage()",
        "description": "Returns the first page number \u2014 which is actually always 1.",
        "scope": "php"
    },
    "$pagination->firstPageUrl()": {
        "prefix": "firstPageUrl()",
        "body": "firstPageUrl()",
        "description": "Returns the absolute URL for the first page",
        "scope": "php"
    },
    "$pagination->hasNextPage()": {
        "prefix": "hasNextPage()",
        "body": "hasNextPage()",
        "description": "Checks if there's a next available page",
        "scope": "php"
    },
    "$pagination->hasPages()": {
        "prefix": "hasPages()",
        "body": "hasPages()",
        "description": "Checks if there are any pages at all. This is useful if you want to show\/hide the pagination.",
        "scope": "php"
    },
    "$pagination->hasPrevPage()": {
        "prefix": "hasPrevPage()",
        "body": "hasPrevPage()",
        "description": "Checks if there is a previous page",
        "scope": "php"
    },
    "$pagination->isFirstPage()": {
        "prefix": "isFirstPage()",
        "body": "isFirstPage()",
        "description": "Checks if the current page is the first page",
        "scope": "php"
    },
    "$pagination->isLastPage()": {
        "prefix": "isLastPage()",
        "body": "isLastPage()",
        "description": "Checks if the current page is the last page",
        "scope": "php"
    },
    "$pagination->items()": {
        "prefix": "items()",
        "body": "items()",
        "description": "Returns the total number of items",
        "scope": "php"
    },
    "$pagination->lastPage()": {
        "prefix": "lastPage()",
        "body": "lastPage()",
        "description": "Returns the last page number",
        "scope": "php"
    },
    "$pagination->lastPageUrl()": {
        "prefix": "lastPageUrl()",
        "body": "lastPageUrl()",
        "description": "Returns the absolute URL for the last page",
        "scope": "php"
    },
    "$pagination->limit()": {
        "prefix": "limit()",
        "body": "limit()",
        "description": "Returns the limit of items per page",
        "scope": "php"
    },
    "$pagination->nextPage()": {
        "prefix": "nextPage()",
        "body": "nextPage()",
        "description": "Returns the next page number",
        "scope": "php"
    },
    "$pagination->nextPageUrl()": {
        "prefix": "nextPageUrl()",
        "body": "nextPageUrl()",
        "description": "Returns the absolute URL for the next page",
        "scope": "php"
    },
    "$pagination->numEnd()": {
        "prefix": "numEnd()",
        "body": "numEnd()",
        "description": "Returns the index number of the last item on the current page",
        "scope": "php"
    },
    "$pagination->numStart()": {
        "prefix": "numStart()",
        "body": "numStart()",
        "description": "Returns the index number of the first item on the current page",
        "scope": "php"
    },
    "$pagination->offset()": {
        "prefix": "offset()",
        "body": "offset()",
        "description": "Returns the offset, which is being applied to the items collection",
        "scope": "php"
    },
    "$pagination->page()": {
        "prefix": "page()",
        "body": "page()",
        "description": "Returns the current page number",
        "scope": "php"
    },
    "$pagination->pageUrl($page)": {
        "prefix": "pageUrl($page)",
        "body": "pageUrl(${1:\\$page})",
        "description": "Returns the absolute URL for the given page",
        "scope": "php"
    },
    "$pagination->pages()": {
        "prefix": "pages()",
        "body": "pages()",
        "description": "Returns the total number of available pages",
        "scope": "php"
    },
    "$pagination->prevPage()": {
        "prefix": "prevPage()",
        "body": "prevPage()",
        "description": "Returns the previous page number",
        "scope": "php"
    },
    "$pagination->prevPageUrl()": {
        "prefix": "prevPageUrl()",
        "body": "prevPageUrl()",
        "description": "Returns the absolute URL for the previous page",
        "scope": "php"
    },
    "$pagination->range($range=5)": {
        "prefix": "range($range=5)",
        "body": "range(${1:\\$range=5})",
        "description": "Returns an array of page numbers in a range of the given value.",
        "scope": "php"
    },
    "$pagination->rangeEnd()": {
        "prefix": "rangeEnd()",
        "body": "rangeEnd()",
        "description": "Returns the page number at the end of the range",
        "scope": "php"
    },
    "$pagination->rangeStart()": {
        "prefix": "rangeStart()",
        "body": "rangeStart()",
        "description": "Returns the page number at the beginning of the range",
        "scope": "php"
    },
    "$pagination->toArray()": {
        "prefix": "toArray()",
        "body": "toArray()",
        "description": "Returns the pagination object as an associative array.",
        "scope": "php"
    },
    "$request->ajax()": {
        "prefix": "ajax()",
        "body": "ajax()",
        "description": "Checks if this request is an Ajax request",
        "scope": "php"
    },
    "$request->body()": {
        "prefix": "body()",
        "body": "body()",
        "description": "Returns the raw request body",
        "scope": "php"
    },
    "$request->cli()": {
        "prefix": "cli()",
        "body": "cli()",
        "description": "Checks if this request is comming from the command line",
        "scope": "php"
    },
    "$request->data()": {
        "prefix": "data()",
        "body": "data()",
        "description": "Returns an array of request data coming through the query and the post body.",
        "scope": "php"
    },
    "$request->files()": {
        "prefix": "files()",
        "body": "files()",
        "description": "Returns the $_FILES array",
        "scope": "php"
    },
    "$request->get($key, $default = null)": {
        "prefix": "get($key, $default = null)",
        "body": "get(${1:\\$key}, ${2:\\$default = null})",
        "description": "Returns any value of the request data by key",
        "scope": "php"
    },
    "$request->has($key)": {
        "prefix": "has($key)",
        "body": "has(${1:\\$key})",
        "description": "Checks if a value is available in the request data",
        "scope": "php"
    },
    "$request->ip()": {
        "prefix": "ip()",
        "body": "ip()",
        "description": "Returns the IP address of the current visitor",
        "scope": "php"
    },
    "$request->is()": {
        "prefix": "is()",
        "body": "is()",
        "description": "Checks for the type of method",
        "scope": "php"
    },
    "$request->method()": {
        "prefix": "method()",
        "body": "method()",
        "description": "Returns the request method (GET, POST, DELETE, etc.)",
        "scope": "php"
    },
    "$request->params()": {
        "prefix": "params()",
        "body": "params()",
        "description": "Returns all params from the URL in a handy object",
        "scope": "php"
    },
    "$request->path()": {
        "prefix": "path()",
        "body": "path()",
        "description": "Returns the path in the current URL as object",
        "scope": "php"
    },
    "$request->query()": {
        "prefix": "query()",
        "body": "query()",
        "description": "Returns the query from the current URL as object",
        "scope": "php"
    },
    "$request->referer()": {
        "prefix": "referer()",
        "body": "referer()",
        "description": "Returns the referer. Also available with to \"rr\"",
        "scope": "php"
    },
    "$request->scheme()": {
        "prefix": "scheme()",
        "body": "scheme()",
        "description": "Returns the URL scheme (http, https, ftp, etc.)",
        "scope": "php"
    },
    "$request->secure()": {
        "prefix": "secure()",
        "body": "secure()",
        "description": "Checks if this is a secure request (SSL)",
        "scope": "php"
    },
    "$request->ssl()": {
        "prefix": "ssl()",
        "body": "ssl()",
        "description": "Checks if this is an SSL request",
        "scope": "php"
    },
    "$request->url()": {
        "prefix": "url()",
        "body": "url()",
        "description": "Returns the complete URL for the current request",
        "scope": "php"
    },
    "$roots->accounts()": {
        "prefix": "accounts()",
        "body": "accounts()",
        "description": "Returns the root of the accounts folder.",
        "scope": "php"
    },
    "$roots->assets()": {
        "prefix": "assets()",
        "body": "assets()",
        "description": "Returns the root of the assets folder.",
        "scope": "php"
    },
    "$roots->autocss()": {
        "prefix": "autocss()",
        "body": "autocss()",
        "description": "Returns the root of the autocss folder for the `css('@auto')` rule.",
        "scope": "php"
    },
    "$roots->autojs()": {
        "prefix": "autojs()",
        "body": "autojs()",
        "description": "Returns the root of the autojs folder for the `js('@auto')` rule.",
        "scope": "php"
    },
    "$roots->avatars()": {
        "prefix": "avatars()",
        "body": "avatars()",
        "description": "Returns the root of the avatars folder.",
        "scope": "php"
    },
    "$roots->blueprints()": {
        "prefix": "blueprints()",
        "body": "blueprints()",
        "description": "Returns the root of the blueprints folder",
        "scope": "php"
    },
    "$roots->cache()": {
        "prefix": "cache()",
        "body": "cache()",
        "description": "Returns the root of the cache folder.",
        "scope": "php"
    },
    "$roots->config()": {
        "prefix": "config()",
        "body": "config()",
        "description": "Returns the root of the config folder.",
        "scope": "php"
    },
    "$roots->content()": {
        "prefix": "content()",
        "body": "content()",
        "description": "Returns the root of the content folder",
        "scope": "php"
    },
    "$roots->controllers()": {
        "prefix": "controllers()",
        "body": "controllers()",
        "description": "Returns the root of the controllers folder.",
        "scope": "php"
    },
    "$roots->fields()": {
        "prefix": "fields()",
        "body": "fields()",
        "description": "Returns the root of the Panel fields folder.",
        "scope": "php"
    },
    "$roots->index()": {
        "prefix": "index()",
        "body": "index()",
        "description": "Returns the document root of the website",
        "scope": "php"
    },
    "$roots->kirby()": {
        "prefix": "kirby()",
        "body": "kirby()",
        "description": "Returns the root of the Kirby core folder",
        "scope": "php"
    },
    "$roots->languages()": {
        "prefix": "languages()",
        "body": "languages()",
        "description": "Returns the root of the languages folder for custom site localizations",
        "scope": "php"
    },
    "$roots->models()": {
        "prefix": "models()",
        "body": "models()",
        "description": "Returns the root of the folder for page models",
        "scope": "php"
    },
    "$roots->plugins()": {
        "prefix": "plugins()",
        "body": "plugins()",
        "description": "Returns the root of the plugins folder.",
        "scope": "php"
    },
    "$roots->roles()": {
        "prefix": "roles()",
        "body": "roles()",
        "description": "Returns the root of the roles folder.",
        "scope": "php"
    },
    "$roots->site()": {
        "prefix": "site()",
        "body": "site()",
        "description": "Returns the root of the site folder",
        "scope": "php"
    },
    "$roots->snippets()": {
        "prefix": "snippets()",
        "body": "snippets()",
        "description": "Returns the root of the snippets folder.",
        "scope": "php"
    },
    "$roots->tags()": {
        "prefix": "tags()",
        "body": "tags()",
        "description": "Returns the root of the Kirbytags folder",
        "scope": "php"
    },
    "$roots->templates()": {
        "prefix": "templates()",
        "body": "templates()",
        "description": "Returns the root of the templates folder.",
        "scope": "php"
    },
    "$roots->thumbs()": {
        "prefix": "thumbs()",
        "body": "thumbs()",
        "description": "Returns the root of the thumbs folder.",
        "scope": "php"
    },
    "$roots->widgets()": {
        "prefix": "widgets()",
        "body": "widgets()",
        "description": "Returns the root of the Panel widgets folder.",
        "scope": "php"
    },
    "$site->activePage()": {
        "prefix": "activePage()",
        "body": "activePage()",
        "description": "Returns the currently active page object",
        "scope": "php"
    },
    "$site->archives()": {
        "prefix": "archives()",
        "body": "archives()",
        "description": "Returns a $files collection with all archive files (zip, gzip, tar) placed directly in \/content",
        "scope": "php"
    },
    "$site->audio()": {
        "prefix": "audio()",
        "body": "audio()",
        "description": "Returns a $files collection with all audio files placed directly in \/content",
        "scope": "php"
    },
    "$site->breadcrumb()": {
        "prefix": "breadcrumb()",
        "body": "breadcrumb()",
        "description": "Returns a $pages collection, prepared for a foreach loop to generate a breadcrumb",
        "scope": "php"
    },
    "$site->children()": {
        "prefix": "children()",
        "body": "children()",
        "description": "Returns a $pages collection with all first-level children in the content folder",
        "scope": "php"
    },
    "$site->code()": {
        "prefix": "code()",
        "body": "code()",
        "description": "Returns a $files collection with all code files (css, js, html) placed directly in \/content",
        "scope": "php"
    },
    "$site->content()": {
        "prefix": "content()",
        "body": "content()",
        "description": "Returns the $content object for the site, which can be used to further inspect all content variables for $site",
        "scope": "php"
    },
    "$site->content()->has($field)": {
        "prefix": "has($field)",
        "body": "has(${1:\\$field})",
        "description": "Checks if the site has a certain field",
        "scope": "php"
    },
    "$site->contentURL()": {
        "prefix": "contentURL()",
        "body": "contentURL()",
        "description": "Returns the full URL for the content folder",
        "scope": "php"
    },
    "$site->defaultLanguage()": {
        "prefix": "defaultLanguage()",
        "body": "defaultLanguage()",
        "description": "Returns the $language object for the default language",
        "scope": "php"
    },
    "$site->detectedLanguage()": {
        "prefix": "detectedLanguage()",
        "body": "detectedLanguage()",
        "description": "Returns the detected language",
        "scope": "php"
    },
    "$site->diruri()": {
        "prefix": "diruri()",
        "body": "diruri()",
        "description": "The base diruri is basically just an empty string",
        "scope": "php"
    },
    "$site->documents()": {
        "prefix": "documents()",
        "body": "documents()",
        "description": "Returns a $files collection with all documents (pdf, doc, xls, etc.) placed directly in \/content",
        "scope": "php"
    },
    "$site->errorPage()": {
        "prefix": "errorPage()",
        "body": "errorPage()",
        "description": "Returns the $page object for the error page.",
        "scope": "php"
    },
    "$site->file($filename)": {
        "prefix": "file($filename)",
        "body": "file(${1:\\$filename})",
        "description": "Searches for a specific file placed directly in \/content by filename",
        "scope": "php"
    },
    "$site->files()": {
        "prefix": "files()",
        "body": "files()",
        "description": "Returns a $files collection with all files placed directly in \/content",
        "scope": "php"
    },
    "$site->find($uri)": {
        "prefix": "find($uri)",
        "body": "find(${1:\\$uri})",
        "description": "Finds a single $page object or a collection of $pages placed directly in \/content by a single UID or a set of multiple UIDs.",
        "scope": "php"
    },
    "$site->grandChildren()": {
        "prefix": "grandChildren()",
        "body": "grandChildren()",
        "description": "Returns a $pages collection with all grandChildren in the \/content directory",
        "scope": "php"
    },
    "$site->hasArchives()": {
        "prefix": "hasArchives()",
        "body": "hasArchives()",
        "description": "Checks if there are any archive files (zip, gzip, tar) placed directly in \/content",
        "scope": "php"
    },
    "$site->hasAudio()": {
        "prefix": "hasAudio()",
        "body": "hasAudio()",
        "description": "Checks if there are any audio files placed directly in \/content",
        "scope": "php"
    },
    "$site->hasChildren()": {
        "prefix": "hasChildren()",
        "body": "hasChildren()",
        "description": "Checks if there are any children placed directly in \/content",
        "scope": "php"
    },
    "$site->hasCode()": {
        "prefix": "hasCode()",
        "body": "hasCode()",
        "description": "Checks if there are any code files placed directly in \/content",
        "scope": "php"
    },
    "$site->hasDocuments()": {
        "prefix": "hasDocuments()",
        "body": "hasDocuments()",
        "description": "Checks if there are any documents (pdf, doc, xls, etc.) placed directly in \/content",
        "scope": "php"
    },
    "$site->hasFiles()": {
        "prefix": "hasFiles()",
        "body": "hasFiles()",
        "description": "Checks if there are any files placed directly in \/content",
        "scope": "php"
    },
    "$site->hasImages()": {
        "prefix": "hasImages()",
        "body": "hasImages()",
        "description": "Checks if there are any images (jpg, png, gif, etc.) placed directly in \/content",
        "scope": "php"
    },
    "$site->hasInvisibleChildren()": {
        "prefix": "hasInvisibleChildren()",
        "body": "hasInvisibleChildren()",
        "description": "Checks if there are any invisible children placed directly in \/content",
        "scope": "php"
    },
    "$site->hasVideos()": {
        "prefix": "hasVideos()",
        "body": "hasVideos()",
        "description": "Checks if there are any videos placed directly in \/content",
        "scope": "php"
    },
    "$site->hasVisibleChildren()": {
        "prefix": "hasVisibleChildren()",
        "body": "hasVisibleChildren()",
        "description": "Checks if there are any visible children placed directly in \/content",
        "scope": "php"
    },
    "$site->homePage()": {
        "prefix": "homePage()",
        "body": "homePage()",
        "description": "Returns the $page object for the home page",
        "scope": "php"
    },
    "$site->id()": {
        "prefix": "id()",
        "body": "id()",
        "description": "Returns the site id, which is an empty string in case of the site object",
        "scope": "php"
    },
    "$site->image($filename = false)": {
        "prefix": "image($filename = false)",
        "body": "image(${1:\\$filename = false})",
        "description": "Returns a specific image $file object by filename. If no filename is given, the first image will be returned.",
        "scope": "php"
    },
    "$site->images()": {
        "prefix": "images()",
        "body": "images()",
        "description": "Returns a $files collection with all images (jpg, png, gif, etc.) placed directly in \/content",
        "scope": "php"
    },
    "$site->index()": {
        "prefix": "index()",
        "body": "index()",
        "description": "Creates a $pages collection with every page and subpage in \/content. This will walk the entire file tree.",
        "scope": "php"
    },
    "$site->isSite()": {
        "prefix": "isSite()",
        "body": "isSite()",
        "description": "Checks if this site object is the main site",
        "scope": "php"
    },
    "$site->language($code = null)": {
        "prefix": "language($code = null)",
        "body": "language(${1:\\$code = null})",
        "description": "Returns the current language by default or any other language when a language code is given",
        "scope": "php"
    },
    "$site->languages()": {
        "prefix": "languages()",
        "body": "languages()",
        "description": "Returns the collection of available languages for multi-language sites",
        "scope": "php"
    },
    "$site->locale()": {
        "prefix": "locale()",
        "body": "locale()",
        "description": "Returns the locale settings for the site",
        "scope": "php"
    },
    "$site->modified($format = false)": {
        "prefix": "modified($format = false)",
        "body": "modified(${1:\\$format = false})",
        "description": "Returns the last modification date for the site. This will walk all pages and subpages and search for the very last modification.",
        "scope": "php"
    },
    "$site->multilang()": {
        "prefix": "multilang()",
        "body": "multilang()",
        "description": "Checks if there are one or more languages configured in the config.php",
        "scope": "php"
    },
    "$site->page($uri = null)": {
        "prefix": "page($uri = null)",
        "body": "page(${1:\\$uri = null})",
        "description": "Returns a specific $page object by URI. If no URI is specified the currently active page will be returned.",
        "scope": "php"
    },
    "$site->pages()": {
        "prefix": "pages()",
        "body": "pages()",
        "description": "Returns a $pages collection for all direct children in \/content. It's an old version of $site->children()",
        "scope": "php"
    },
    "$site->reset()": {
        "prefix": "reset()",
        "body": "reset()",
        "description": "Cleans the temporary internal cache",
        "scope": "php"
    },
    "$site->roles()": {
        "prefix": "roles()",
        "body": "roles()",
        "description": "Returns a collection of all roles",
        "scope": "php"
    },
    "$site->search($query, $params = array())": {
        "prefix": "search($query, $params = array())",
        "body": "search(${1:\\$query}, ${2:\\$params = array()})",
        "description": "Searches within all pages of the site",
        "scope": "php"
    },
    "$site->sessionLanguage()": {
        "prefix": "sessionLanguage()",
        "body": "sessionLanguage()",
        "description": "Returns the language which will be remembered for the next visit",
        "scope": "php"
    },
    "$site->switchLanguage(Language $language)": {
        "prefix": "switchLanguage(Language $language)",
        "body": "switchLanguage(Language $language)",
        "description": "Redirects to the given language",
        "scope": "php"
    },
    "$site->update($data = array())": {
        "prefix": "update($data = array())",
        "body": "update(${1:\\$data = array()})",
        "description": "Updates all given site variables, which are stored in site.txt",
        "scope": "php"
    },
    "$site->url([$lang=false])": {
        "prefix": "url([$lang=false])",
        "body": "url()",
        "description": "Returns the base URL for the site",
        "scope": "php"
    },
    "$site->user()": {
        "prefix": "user()",
        "body": "user()",
        "description": "Returns the currently logged in $user object. If no user is logged in, it will return false.",
        "scope": "php"
    },
    "$site->users()": {
        "prefix": "users()",
        "body": "users()",
        "description": "Returns a $users collection with all registered users.",
        "scope": "php"
    },
    "$site->videos()": {
        "prefix": "videos()",
        "body": "videos()",
        "description": "Returns a $files collection with all video files placed directly in \/content",
        "scope": "php"
    },
    "$site->visit($uri = '' [, $lang])": {
        "prefix": "visit($uri = '' [, $lang])",
        "body": "visit(${1:\\$uri = ''})",
        "description": "Activates the specified page and returns its page object",
        "scope": "php"
    },
    "$site->visitorLanguage()": {
        "prefix": "visitorLanguage()",
        "body": "visitorLanguage()",
        "description": "Tries to find the language for the current visitor",
        "scope": "php"
    },
    "$site->wasModifiedAfter()": {
        "prefix": "wasModifiedAfter()",
        "body": "wasModifiedAfter()",
        "description": "Checks if any content of the site has been modified after the given unix timestamp",
        "scope": "php"
    },
    "$urls->assets()": {
        "prefix": "assets()",
        "body": "assets()",
        "description": "Returns the url of the assets folder",
        "scope": "php"
    },
    "$urls->autocss()": {
        "prefix": "autocss()",
        "body": "autocss()",
        "description": "Returns the url of the autocss folder for the `css('@auto')` rule.",
        "scope": "php"
    },
    "$urls->autojs()": {
        "prefix": "autojs()",
        "body": "autojs()",
        "description": "Returns the url of the autojs folder for the `js('@auto')` rule.",
        "scope": "php"
    },
    "$urls->avatars()": {
        "prefix": "avatars()",
        "body": "avatars()",
        "description": "Returns the url of the avatars folder",
        "scope": "php"
    },
    "$urls->content()": {
        "prefix": "content()",
        "body": "content()",
        "description": "Returns the url of the content folder",
        "scope": "php"
    },
    "$urls->index()": {
        "prefix": "index()",
        "body": "index()",
        "description": "Returns the base url of the site",
        "scope": "php"
    },
    "$urls->thumbs()": {
        "prefix": "thumbs()",
        "body": "thumbs()",
        "description": "Returns the URL of the thumbs folder",
        "scope": "php"
    },
    "$user->avatar()": {
        "prefix": "avatar()",
        "body": "avatar()",
        "description": "Returns the user avatar object if the avatar exists",
        "scope": "php"
    },
    "$user->avatarRoot()": {
        "prefix": "avatarRoot()",
        "body": "avatarRoot()",
        "description": "Returns the full root for the user avatar image",
        "scope": "php"
    },
    "$user->can($event, $args = [])": {
        "prefix": "can($event, $args = [])",
        "body": "can(${1:\\$event}, ${2:\\$args =})",
        "description": "Returns true if the user has permission for the specified event",
        "scope": "php"
    },
    "$user->cannot($event, $args = [])": {
        "prefix": "cannot($event, $args = [])",
        "body": "cannot(${1:\\$event}, ${2:\\$args =})",
        "description": "Returns true if the user has *no* permission for the specified event",
        "scope": "php"
    },
    "$user->current()": {
        "prefix": "current()",
        "body": "current()",
        "description": "Returns the current user",
        "scope": "php"
    },
    "$user->data()": {
        "prefix": "data()",
        "body": "data()",
        "description": "Returns an array with all user data",
        "scope": "php"
    },
    "$user->delete()": {
        "prefix": "delete()",
        "body": "delete()",
        "description": "Deletes the user account. This cannot be undone",
        "scope": "php"
    },
    "$user->email()": {
        "prefix": "email()",
        "body": "email()",
        "description": "Returns the email address for the user",
        "scope": "php"
    },
    "$user->exists()": {
        "prefix": "exists()",
        "body": "exists()",
        "description": "Checks if the user exists",
        "scope": "php"
    },
    "$user->firstName()": {
        "prefix": "firstName()",
        "body": "firstName()",
        "description": "Returns the user's first name",
        "scope": "php"
    },
    "$user->gravatar($size = 256)": {
        "prefix": "gravatar($size = 256)",
        "body": "gravatar(${1:\\$size = 256})",
        "description": "Returns the gravatar URL for the user.",
        "scope": "php"
    },
    "$user->hasPanelAccess()": {
        "prefix": "hasPanelAccess()",
        "body": "hasPanelAccess()",
        "description": "Checks if the user is allowed to access the Panel based on the role.",
        "scope": "php"
    },
    "$user->hasRole($role)": {
        "prefix": "hasRole($role)",
        "body": "hasRole(${1:\\$role})",
        "description": "Checks if the user has a particular role.",
        "scope": "php"
    },
    "$user->is($someone)": {
        "prefix": "is($someone)",
        "body": "is(${1:\\$someone})",
        "description": "Checks if the user is the same as the given $user object",
        "scope": "php"
    },
    "$user->isAdmin()": {
        "prefix": "isAdmin()",
        "body": "isAdmin()",
        "description": "Checks if the user is an admin",
        "scope": "php"
    },
    "$user->isCurrent()": {
        "prefix": "isCurrent()",
        "body": "isCurrent()",
        "description": "Checks if the user is the currently logged in user.",
        "scope": "php"
    },
    "$user->lastName()": {
        "prefix": "lastName()",
        "body": "lastName()",
        "description": "Returns the user's last name",
        "scope": "php"
    },
    "$user->login($password)": {
        "prefix": "login($password)",
        "body": "login(${1:\\$password})",
        "description": "Login the user with the given password if the password matches the user's password.",
        "scope": "php"
    },
    "$user->logout()": {
        "prefix": "logout()",
        "body": "logout()",
        "description": "Logs out the user and kills the session.",
        "scope": "php"
    },
    "$user->permission($event, $args = [])": {
        "prefix": "permission($event, $args = [])",
        "body": "permission(${1:\\$event}, ${2:\\$args =})",
        "description": "Checks if the user has permission for the specified event",
        "scope": "php"
    },
    "$user->role()": {
        "prefix": "role()",
        "body": "role()",
        "description": "Returns the user role",
        "scope": "php"
    },
    "$user->textfile()": {
        "prefix": "textfile()",
        "body": "textfile()",
        "description": "Returns the root for the account file",
        "scope": "php"
    },
    "$user->update($data = array())": {
        "prefix": "update($data = array())",
        "body": "update(${1:\\$data = array()})",
        "description": "Updates the user account information.",
        "scope": "php"
    },
    "$user->username()": {
        "prefix": "username()",
        "body": "username()",
        "description": "Returns the username",
        "scope": "php"
    },
    "$users->count()": {
        "prefix": "count()",
        "body": "count()",
        "description": "Returns the number of all users",
        "scope": "php"
    },
    "$users->create($data = array())": {
        "prefix": "create($data = array())",
        "body": "create(${1:\\$data = array()})",
        "description": "Creates a new user account",
        "scope": "php"
    },
    "$users->filter($callback)": {
        "prefix": "filter($callback)",
        "body": "filter(${1:\\$callback})",
        "description": "Filters the collection of users by a given callback function",
        "scope": "php"
    },
    "$users->filterBy($field, $value)": {
        "prefix": "filterBy($field, $value)",
        "body": "filterBy(${1:\\$field}, ${2:\\$value})",
        "description": "Filters the collection of users by field and value",
        "scope": "php"
    },
    "$users->find($username)": {
        "prefix": "find($username)",
        "body": "find(${1:\\$username})",
        "description": "Finds a single user account by username",
        "scope": "php"
    },
    "$users->findBy($field, $value)": {
        "prefix": "findBy($field, $value)",
        "body": "findBy(${1:\\$field}, ${2:\\$value})",
        "description": "Finds a single user account by field and value",
        "scope": "php"
    },
    "$users->first()": {
        "prefix": "first()",
        "body": "first()",
        "description": "Returns the first $user object from the collection",
        "scope": "php"
    },
    "$users->flip()": {
        "prefix": "flip()",
        "body": "flip()",
        "description": "Returns the $users collection in reversed order",
        "scope": "php"
    },
    "$users->get($username)": {
        "prefix": "get($username)",
        "body": "get(${1:\\$username})",
        "description": "Returns a single $user object by username",
        "scope": "php"
    },
    "$users->groupBy($field, $caseInsensitive = true)": {
        "prefix": "groupBy($field, $caseInsensitive = true)",
        "body": "groupBy(${1:\\$field}, ${2:\\$caseInsensitive = true})",
        "description": "Groups users in the collection by a given field.",
        "scope": "php"
    },
    "$users->has($user)": {
        "prefix": "has($user)",
        "body": "has(${1:\\$user})",
        "description": "Checks if a $user object is included in the collection",
        "scope": "php"
    },
    "$users->keys()": {
        "prefix": "keys()",
        "body": "keys()",
        "description": "Returns all usernames\/keys in the collection",
        "scope": "php"
    },
    "$users->last()": {
        "prefix": "last()",
        "body": "last()",
        "description": "Returns the last $user object from the collection",
        "scope": "php"
    },
    "$users->limit($limit)": {
        "prefix": "limit($limit)",
        "body": "limit(${1:\\$limit})",
        "description": "Returns a limited subset of the collection",
        "scope": "php"
    },
    "$users->map($callback)": {
        "prefix": "map($callback)",
        "body": "map(${1:\\$callback})",
        "description": "Maps a callback function to all $user objects in the collection",
        "scope": "php"
    },
    "$users->not()": {
        "prefix": "not()",
        "body": "not()",
        "description": "Returns the $users collection without the given usernames or $user objects",
        "scope": "php"
    },
    "$users->nth($n)": {
        "prefix": "nth($n)",
        "body": "nth(${1:\\$n})",
        "description": "Returns the nth $user in the collection",
        "scope": "php"
    },
    "$users->offset($offset)": {
        "prefix": "offset($offset)",
        "body": "offset(${1:\\$offset})",
        "description": "Returns the $users collection starting form the given offset",
        "scope": "php"
    },
    "$users->paginate($limit, $options = array())": {
        "prefix": "paginate($limit, $options = array())",
        "body": "paginate(${1:\\$limit}, ${2:\\$options = array()})",
        "description": "Applies pagination to the collection",
        "scope": "php"
    },
    "$users->pagination()": {
        "prefix": "pagination()",
        "body": "pagination()",
        "description": "Returns the pagination object after using $users->paginate()",
        "scope": "php"
    },
    "$users->pluck($field, $split = null, $unique = false)": {
        "prefix": "pluck($field, $split = null, $unique = false)",
        "body": "pluck(${1:\\$field}, ${2:\\$split = null}, ${3:\\$unique = false})",
        "description": "Plucks all values for a specific field from the collection and returns those as array.",
        "scope": "php"
    },
    "$users->shuffle()": {
        "prefix": "shuffle()",
        "body": "shuffle()",
        "description": "Returns the collection in shuffled order",
        "scope": "php"
    },
    "$users->slice($offset = null, $limit = null)": {
        "prefix": "slice($offset = null, $limit = null)",
        "body": "slice(${1:\\$offset = null}, ${2:\\$limit = null})",
        "description": "Returns a sliced version of the collection starting with the offset and limited by the given limit value.",
        "scope": "php"
    },
    "$users->sortBy($field, $direction = 'desc', $method = SORT_REGULAR)": {
        "prefix": "sortBy($field, $direction = 'desc', $method = SORT_REGULAR)",
        "body": "sortBy(${1:\\$field}, ${2:\\$direction = 'desc'}, ${3:\\$method = SORT_REGULAR})",
        "description": "Sort the collection by one or multiple fields",
        "scope": "php"
    },
    "$users->toArray($callback = null)": {
        "prefix": "toArray($callback = null)",
        "body": "toArray(${1:\\$callback = null})",
        "description": "Converts the collection to a mult-dimensional array",
        "scope": "php"
    },
    "$users->toJson()": {
        "prefix": "toJson()",
        "body": "toJson()",
        "description": "Converts the collection to a json string",
        "scope": "php"
    }
}